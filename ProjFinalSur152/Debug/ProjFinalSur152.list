
ProjFinalSur152.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be10  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000bbec  0800bf50  0800bf50  0000cf50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017b3c  08017b3c  000191f0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08017b3c  08017b3c  00018b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017b44  08017b44  000191f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017b44  08017b44  00018b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08017b48  08017b48  00018b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  08017b4c  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f98  200001f0  08017d3c  000191f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001188  08017d3c  0001a188  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000191f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d35  00000000  00000000  00019219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002658  00000000  00000000  0002cf4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001388  00000000  00000000  0002f5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f35  00000000  00000000  00030930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001877c  00000000  00000000  00031865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001381e  00000000  00000000  00049fe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009aa60  00000000  00000000  0005d7ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000087  00000000  00000000  000f825f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cac  00000000  00000000  000f82e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000fef94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001f0 	.word	0x200001f0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800bf38 	.word	0x0800bf38

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001f4 	.word	0x200001f4
 800017c:	0800bf38 	.word	0x0800bf38

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr

080001a4 <__aeabi_drsub>:
 80001a4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001a8:	e002      	b.n	80001b0 <__adddf3>
 80001aa:	bf00      	nop

080001ac <__aeabi_dsub>:
 80001ac:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001b0 <__adddf3>:
 80001b0:	b530      	push	{r4, r5, lr}
 80001b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ba:	ea94 0f05 	teq	r4, r5
 80001be:	bf08      	it	eq
 80001c0:	ea90 0f02 	teqeq	r0, r2
 80001c4:	bf1f      	itttt	ne
 80001c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001d6:	f000 80e2 	beq.w	800039e <__adddf3+0x1ee>
 80001da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001e2:	bfb8      	it	lt
 80001e4:	426d      	neglt	r5, r5
 80001e6:	dd0c      	ble.n	8000202 <__adddf3+0x52>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	ea82 0000 	eor.w	r0, r2, r0
 80001f6:	ea83 0101 	eor.w	r1, r3, r1
 80001fa:	ea80 0202 	eor.w	r2, r0, r2
 80001fe:	ea81 0303 	eor.w	r3, r1, r3
 8000202:	2d36      	cmp	r5, #54	@ 0x36
 8000204:	bf88      	it	hi
 8000206:	bd30      	pophi	{r4, r5, pc}
 8000208:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800020c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000210:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000214:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x70>
 800021a:	4240      	negs	r0, r0
 800021c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000220:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000224:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000228:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800022c:	d002      	beq.n	8000234 <__adddf3+0x84>
 800022e:	4252      	negs	r2, r2
 8000230:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000234:	ea94 0f05 	teq	r4, r5
 8000238:	f000 80a7 	beq.w	800038a <__adddf3+0x1da>
 800023c:	f1a4 0401 	sub.w	r4, r4, #1
 8000240:	f1d5 0e20 	rsbs	lr, r5, #32
 8000244:	db0d      	blt.n	8000262 <__adddf3+0xb2>
 8000246:	fa02 fc0e 	lsl.w	ip, r2, lr
 800024a:	fa22 f205 	lsr.w	r2, r2, r5
 800024e:	1880      	adds	r0, r0, r2
 8000250:	f141 0100 	adc.w	r1, r1, #0
 8000254:	fa03 f20e 	lsl.w	r2, r3, lr
 8000258:	1880      	adds	r0, r0, r2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	4159      	adcs	r1, r3
 8000260:	e00e      	b.n	8000280 <__adddf3+0xd0>
 8000262:	f1a5 0520 	sub.w	r5, r5, #32
 8000266:	f10e 0e20 	add.w	lr, lr, #32
 800026a:	2a01      	cmp	r2, #1
 800026c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000270:	bf28      	it	cs
 8000272:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000276:	fa43 f305 	asr.w	r3, r3, r5
 800027a:	18c0      	adds	r0, r0, r3
 800027c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000280:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000284:	d507      	bpl.n	8000296 <__adddf3+0xe6>
 8000286:	f04f 0e00 	mov.w	lr, #0
 800028a:	f1dc 0c00 	rsbs	ip, ip, #0
 800028e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000292:	eb6e 0101 	sbc.w	r1, lr, r1
 8000296:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800029a:	d31b      	bcc.n	80002d4 <__adddf3+0x124>
 800029c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002a0:	d30c      	bcc.n	80002bc <__adddf3+0x10c>
 80002a2:	0849      	lsrs	r1, r1, #1
 80002a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002ac:	f104 0401 	add.w	r4, r4, #1
 80002b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002b4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002b8:	f080 809a 	bcs.w	80003f0 <__adddf3+0x240>
 80002bc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002c0:	bf08      	it	eq
 80002c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002c6:	f150 0000 	adcs.w	r0, r0, #0
 80002ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ce:	ea41 0105 	orr.w	r1, r1, r5
 80002d2:	bd30      	pop	{r4, r5, pc}
 80002d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002d8:	4140      	adcs	r0, r0
 80002da:	eb41 0101 	adc.w	r1, r1, r1
 80002de:	3c01      	subs	r4, #1
 80002e0:	bf28      	it	cs
 80002e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002e6:	d2e9      	bcs.n	80002bc <__adddf3+0x10c>
 80002e8:	f091 0f00 	teq	r1, #0
 80002ec:	bf04      	itt	eq
 80002ee:	4601      	moveq	r1, r0
 80002f0:	2000      	moveq	r0, #0
 80002f2:	fab1 f381 	clz	r3, r1
 80002f6:	bf08      	it	eq
 80002f8:	3320      	addeq	r3, #32
 80002fa:	f1a3 030b 	sub.w	r3, r3, #11
 80002fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000302:	da0c      	bge.n	800031e <__adddf3+0x16e>
 8000304:	320c      	adds	r2, #12
 8000306:	dd08      	ble.n	800031a <__adddf3+0x16a>
 8000308:	f102 0c14 	add.w	ip, r2, #20
 800030c:	f1c2 020c 	rsb	r2, r2, #12
 8000310:	fa01 f00c 	lsl.w	r0, r1, ip
 8000314:	fa21 f102 	lsr.w	r1, r1, r2
 8000318:	e00c      	b.n	8000334 <__adddf3+0x184>
 800031a:	f102 0214 	add.w	r2, r2, #20
 800031e:	bfd8      	it	le
 8000320:	f1c2 0c20 	rsble	ip, r2, #32
 8000324:	fa01 f102 	lsl.w	r1, r1, r2
 8000328:	fa20 fc0c 	lsr.w	ip, r0, ip
 800032c:	bfdc      	itt	le
 800032e:	ea41 010c 	orrle.w	r1, r1, ip
 8000332:	4090      	lslle	r0, r2
 8000334:	1ae4      	subs	r4, r4, r3
 8000336:	bfa2      	ittt	ge
 8000338:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800033c:	4329      	orrge	r1, r5
 800033e:	bd30      	popge	{r4, r5, pc}
 8000340:	ea6f 0404 	mvn.w	r4, r4
 8000344:	3c1f      	subs	r4, #31
 8000346:	da1c      	bge.n	8000382 <__adddf3+0x1d2>
 8000348:	340c      	adds	r4, #12
 800034a:	dc0e      	bgt.n	800036a <__adddf3+0x1ba>
 800034c:	f104 0414 	add.w	r4, r4, #20
 8000350:	f1c4 0220 	rsb	r2, r4, #32
 8000354:	fa20 f004 	lsr.w	r0, r0, r4
 8000358:	fa01 f302 	lsl.w	r3, r1, r2
 800035c:	ea40 0003 	orr.w	r0, r0, r3
 8000360:	fa21 f304 	lsr.w	r3, r1, r4
 8000364:	ea45 0103 	orr.w	r1, r5, r3
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	f1c4 040c 	rsb	r4, r4, #12
 800036e:	f1c4 0220 	rsb	r2, r4, #32
 8000372:	fa20 f002 	lsr.w	r0, r0, r2
 8000376:	fa01 f304 	lsl.w	r3, r1, r4
 800037a:	ea40 0003 	orr.w	r0, r0, r3
 800037e:	4629      	mov	r1, r5
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	fa21 f004 	lsr.w	r0, r1, r4
 8000386:	4629      	mov	r1, r5
 8000388:	bd30      	pop	{r4, r5, pc}
 800038a:	f094 0f00 	teq	r4, #0
 800038e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000392:	bf06      	itte	eq
 8000394:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000398:	3401      	addeq	r4, #1
 800039a:	3d01      	subne	r5, #1
 800039c:	e74e      	b.n	800023c <__adddf3+0x8c>
 800039e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003a2:	bf18      	it	ne
 80003a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a8:	d029      	beq.n	80003fe <__adddf3+0x24e>
 80003aa:	ea94 0f05 	teq	r4, r5
 80003ae:	bf08      	it	eq
 80003b0:	ea90 0f02 	teqeq	r0, r2
 80003b4:	d005      	beq.n	80003c2 <__adddf3+0x212>
 80003b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ba:	bf04      	itt	eq
 80003bc:	4619      	moveq	r1, r3
 80003be:	4610      	moveq	r0, r2
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	ea91 0f03 	teq	r1, r3
 80003c6:	bf1e      	ittt	ne
 80003c8:	2100      	movne	r1, #0
 80003ca:	2000      	movne	r0, #0
 80003cc:	bd30      	popne	{r4, r5, pc}
 80003ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003d2:	d105      	bne.n	80003e0 <__adddf3+0x230>
 80003d4:	0040      	lsls	r0, r0, #1
 80003d6:	4149      	adcs	r1, r1
 80003d8:	bf28      	it	cs
 80003da:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003e4:	bf3c      	itt	cc
 80003e6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ea:	bd30      	popcc	{r4, r5, pc}
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003f0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003f4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003f8:	f04f 0000 	mov.w	r0, #0
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf1a      	itte	ne
 8000404:	4619      	movne	r1, r3
 8000406:	4610      	movne	r0, r2
 8000408:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800040c:	bf1c      	itt	ne
 800040e:	460b      	movne	r3, r1
 8000410:	4602      	movne	r2, r0
 8000412:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000416:	bf06      	itte	eq
 8000418:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800041c:	ea91 0f03 	teqeq	r1, r3
 8000420:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	bf00      	nop

08000428 <__aeabi_ui2d>:
 8000428:	f090 0f00 	teq	r0, #0
 800042c:	bf04      	itt	eq
 800042e:	2100      	moveq	r1, #0
 8000430:	4770      	bxeq	lr
 8000432:	b530      	push	{r4, r5, lr}
 8000434:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000438:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800043c:	f04f 0500 	mov.w	r5, #0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e750      	b.n	80002e8 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_i2d>:
 8000448:	f090 0f00 	teq	r0, #0
 800044c:	bf04      	itt	eq
 800044e:	2100      	moveq	r1, #0
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000458:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800045c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000460:	bf48      	it	mi
 8000462:	4240      	negmi	r0, r0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e73e      	b.n	80002e8 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_f2d>:
 800046c:	0042      	lsls	r2, r0, #1
 800046e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000472:	ea4f 0131 	mov.w	r1, r1, rrx
 8000476:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800047a:	bf1f      	itttt	ne
 800047c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000480:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000484:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000488:	4770      	bxne	lr
 800048a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800048e:	bf08      	it	eq
 8000490:	4770      	bxeq	lr
 8000492:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000496:	bf04      	itt	eq
 8000498:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004ac:	e71c      	b.n	80002e8 <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_ul2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f04f 0500 	mov.w	r5, #0
 80004be:	e00a      	b.n	80004d6 <__aeabi_l2d+0x16>

080004c0 <__aeabi_l2d>:
 80004c0:	ea50 0201 	orrs.w	r2, r0, r1
 80004c4:	bf08      	it	eq
 80004c6:	4770      	bxeq	lr
 80004c8:	b530      	push	{r4, r5, lr}
 80004ca:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004ce:	d502      	bpl.n	80004d6 <__aeabi_l2d+0x16>
 80004d0:	4240      	negs	r0, r0
 80004d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004da:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004e2:	f43f aed8 	beq.w	8000296 <__adddf3+0xe6>
 80004e6:	f04f 0203 	mov.w	r2, #3
 80004ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ee:	bf18      	it	ne
 80004f0:	3203      	addne	r2, #3
 80004f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004f6:	bf18      	it	ne
 80004f8:	3203      	addne	r2, #3
 80004fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004fe:	f1c2 0320 	rsb	r3, r2, #32
 8000502:	fa00 fc03 	lsl.w	ip, r0, r3
 8000506:	fa20 f002 	lsr.w	r0, r0, r2
 800050a:	fa01 fe03 	lsl.w	lr, r1, r3
 800050e:	ea40 000e 	orr.w	r0, r0, lr
 8000512:	fa21 f102 	lsr.w	r1, r1, r2
 8000516:	4414      	add	r4, r2
 8000518:	e6bd      	b.n	8000296 <__adddf3+0xe6>
 800051a:	bf00      	nop

0800051c <__aeabi_dmul>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000522:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000526:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800052a:	bf1d      	ittte	ne
 800052c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000530:	ea94 0f0c 	teqne	r4, ip
 8000534:	ea95 0f0c 	teqne	r5, ip
 8000538:	f000 f8de 	bleq	80006f8 <__aeabi_dmul+0x1dc>
 800053c:	442c      	add	r4, r5
 800053e:	ea81 0603 	eor.w	r6, r1, r3
 8000542:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000546:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800054a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800054e:	bf18      	it	ne
 8000550:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000554:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000558:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800055c:	d038      	beq.n	80005d0 <__aeabi_dmul+0xb4>
 800055e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000562:	f04f 0500 	mov.w	r5, #0
 8000566:	fbe1 e502 	umlal	lr, r5, r1, r2
 800056a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800056e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000572:	f04f 0600 	mov.w	r6, #0
 8000576:	fbe1 5603 	umlal	r5, r6, r1, r3
 800057a:	f09c 0f00 	teq	ip, #0
 800057e:	bf18      	it	ne
 8000580:	f04e 0e01 	orrne.w	lr, lr, #1
 8000584:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000588:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800058c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000590:	d204      	bcs.n	800059c <__aeabi_dmul+0x80>
 8000592:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000596:	416d      	adcs	r5, r5
 8000598:	eb46 0606 	adc.w	r6, r6, r6
 800059c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005b0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005b4:	bf88      	it	hi
 80005b6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ba:	d81e      	bhi.n	80005fa <__aeabi_dmul+0xde>
 80005bc:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005c0:	bf08      	it	eq
 80005c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005c6:	f150 0000 	adcs.w	r0, r0, #0
 80005ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ce:	bd70      	pop	{r4, r5, r6, pc}
 80005d0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005d4:	ea46 0101 	orr.w	r1, r6, r1
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	ea81 0103 	eor.w	r1, r1, r3
 80005e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005e4:	bfc2      	ittt	gt
 80005e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ee:	bd70      	popgt	{r4, r5, r6, pc}
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005f4:	f04f 0e00 	mov.w	lr, #0
 80005f8:	3c01      	subs	r4, #1
 80005fa:	f300 80ab 	bgt.w	8000754 <__aeabi_dmul+0x238>
 80005fe:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000602:	bfde      	ittt	le
 8000604:	2000      	movle	r0, #0
 8000606:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800060a:	bd70      	pople	{r4, r5, r6, pc}
 800060c:	f1c4 0400 	rsb	r4, r4, #0
 8000610:	3c20      	subs	r4, #32
 8000612:	da35      	bge.n	8000680 <__aeabi_dmul+0x164>
 8000614:	340c      	adds	r4, #12
 8000616:	dc1b      	bgt.n	8000650 <__aeabi_dmul+0x134>
 8000618:	f104 0414 	add.w	r4, r4, #20
 800061c:	f1c4 0520 	rsb	r5, r4, #32
 8000620:	fa00 f305 	lsl.w	r3, r0, r5
 8000624:	fa20 f004 	lsr.w	r0, r0, r4
 8000628:	fa01 f205 	lsl.w	r2, r1, r5
 800062c:	ea40 0002 	orr.w	r0, r0, r2
 8000630:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	fa21 f604 	lsr.w	r6, r1, r4
 8000640:	eb42 0106 	adc.w	r1, r2, r6
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 040c 	rsb	r4, r4, #12
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f304 	lsl.w	r3, r0, r4
 800065c:	fa20 f005 	lsr.w	r0, r0, r5
 8000660:	fa01 f204 	lsl.w	r2, r1, r4
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	f141 0100 	adc.w	r1, r1, #0
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f205 	lsl.w	r2, r0, r5
 8000688:	ea4e 0e02 	orr.w	lr, lr, r2
 800068c:	fa20 f304 	lsr.w	r3, r0, r4
 8000690:	fa01 f205 	lsl.w	r2, r1, r5
 8000694:	ea43 0302 	orr.w	r3, r3, r2
 8000698:	fa21 f004 	lsr.w	r0, r1, r4
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	fa21 f204 	lsr.w	r2, r1, r4
 80006a4:	ea20 0002 	bic.w	r0, r0, r2
 80006a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b0:	bf08      	it	eq
 80006b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b6:	bd70      	pop	{r4, r5, r6, pc}
 80006b8:	f094 0f00 	teq	r4, #0
 80006bc:	d10f      	bne.n	80006de <__aeabi_dmul+0x1c2>
 80006be:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006c2:	0040      	lsls	r0, r0, #1
 80006c4:	eb41 0101 	adc.w	r1, r1, r1
 80006c8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006cc:	bf08      	it	eq
 80006ce:	3c01      	subeq	r4, #1
 80006d0:	d0f7      	beq.n	80006c2 <__aeabi_dmul+0x1a6>
 80006d2:	ea41 0106 	orr.w	r1, r1, r6
 80006d6:	f095 0f00 	teq	r5, #0
 80006da:	bf18      	it	ne
 80006dc:	4770      	bxne	lr
 80006de:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006e2:	0052      	lsls	r2, r2, #1
 80006e4:	eb43 0303 	adc.w	r3, r3, r3
 80006e8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006ec:	bf08      	it	eq
 80006ee:	3d01      	subeq	r5, #1
 80006f0:	d0f7      	beq.n	80006e2 <__aeabi_dmul+0x1c6>
 80006f2:	ea43 0306 	orr.w	r3, r3, r6
 80006f6:	4770      	bx	lr
 80006f8:	ea94 0f0c 	teq	r4, ip
 80006fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000700:	bf18      	it	ne
 8000702:	ea95 0f0c 	teqne	r5, ip
 8000706:	d00c      	beq.n	8000722 <__aeabi_dmul+0x206>
 8000708:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070c:	bf18      	it	ne
 800070e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000712:	d1d1      	bne.n	80006b8 <__aeabi_dmul+0x19c>
 8000714:	ea81 0103 	eor.w	r1, r1, r3
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000726:	bf06      	itte	eq
 8000728:	4610      	moveq	r0, r2
 800072a:	4619      	moveq	r1, r3
 800072c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000730:	d019      	beq.n	8000766 <__aeabi_dmul+0x24a>
 8000732:	ea94 0f0c 	teq	r4, ip
 8000736:	d102      	bne.n	800073e <__aeabi_dmul+0x222>
 8000738:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800073c:	d113      	bne.n	8000766 <__aeabi_dmul+0x24a>
 800073e:	ea95 0f0c 	teq	r5, ip
 8000742:	d105      	bne.n	8000750 <__aeabi_dmul+0x234>
 8000744:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000748:	bf1c      	itt	ne
 800074a:	4610      	movne	r0, r2
 800074c:	4619      	movne	r1, r3
 800074e:	d10a      	bne.n	8000766 <__aeabi_dmul+0x24a>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800075c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800076a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800076e:	bd70      	pop	{r4, r5, r6, pc}

08000770 <__aeabi_ddiv>:
 8000770:	b570      	push	{r4, r5, r6, lr}
 8000772:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000776:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800077a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800077e:	bf1d      	ittte	ne
 8000780:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000784:	ea94 0f0c 	teqne	r4, ip
 8000788:	ea95 0f0c 	teqne	r5, ip
 800078c:	f000 f8a7 	bleq	80008de <__aeabi_ddiv+0x16e>
 8000790:	eba4 0405 	sub.w	r4, r4, r5
 8000794:	ea81 0e03 	eor.w	lr, r1, r3
 8000798:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800079c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007a0:	f000 8088 	beq.w	80008b4 <__aeabi_ddiv+0x144>
 80007a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007a8:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007c4:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007c8:	429d      	cmp	r5, r3
 80007ca:	bf08      	it	eq
 80007cc:	4296      	cmpeq	r6, r2
 80007ce:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007d2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007d6:	d202      	bcs.n	80007de <__aeabi_ddiv+0x6e>
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	1ab6      	subs	r6, r6, r2
 80007e0:	eb65 0503 	sbc.w	r5, r5, r3
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ea:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007ee:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 000c 	orrcs.w	r0, r0, ip
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800084c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000850:	d018      	beq.n	8000884 <__aeabi_ddiv+0x114>
 8000852:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000856:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800085a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800085e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000862:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000866:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800086a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800086e:	d1c0      	bne.n	80007f2 <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000874:	d10b      	bne.n	800088e <__aeabi_ddiv+0x11e>
 8000876:	ea41 0100 	orr.w	r1, r1, r0
 800087a:	f04f 0000 	mov.w	r0, #0
 800087e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000882:	e7b6      	b.n	80007f2 <__aeabi_ddiv+0x82>
 8000884:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000888:	bf04      	itt	eq
 800088a:	4301      	orreq	r1, r0
 800088c:	2000      	moveq	r0, #0
 800088e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000892:	bf88      	it	hi
 8000894:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000898:	f63f aeaf 	bhi.w	80005fa <__aeabi_dmul+0xde>
 800089c:	ebb5 0c03 	subs.w	ip, r5, r3
 80008a0:	bf04      	itt	eq
 80008a2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008aa:	f150 0000 	adcs.w	r0, r0, #0
 80008ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008c0:	bfc2      	ittt	gt
 80008c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ca:	bd70      	popgt	{r4, r5, r6, pc}
 80008cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008d0:	f04f 0e00 	mov.w	lr, #0
 80008d4:	3c01      	subs	r4, #1
 80008d6:	e690      	b.n	80005fa <__aeabi_dmul+0xde>
 80008d8:	ea45 0e06 	orr.w	lr, r5, r6
 80008dc:	e68d      	b.n	80005fa <__aeabi_dmul+0xde>
 80008de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008e2:	ea94 0f0c 	teq	r4, ip
 80008e6:	bf08      	it	eq
 80008e8:	ea95 0f0c 	teqeq	r5, ip
 80008ec:	f43f af3b 	beq.w	8000766 <__aeabi_dmul+0x24a>
 80008f0:	ea94 0f0c 	teq	r4, ip
 80008f4:	d10a      	bne.n	800090c <__aeabi_ddiv+0x19c>
 80008f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008fa:	f47f af34 	bne.w	8000766 <__aeabi_dmul+0x24a>
 80008fe:	ea95 0f0c 	teq	r5, ip
 8000902:	f47f af25 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e72c      	b.n	8000766 <__aeabi_dmul+0x24a>
 800090c:	ea95 0f0c 	teq	r5, ip
 8000910:	d106      	bne.n	8000920 <__aeabi_ddiv+0x1b0>
 8000912:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000916:	f43f aefd 	beq.w	8000714 <__aeabi_dmul+0x1f8>
 800091a:	4610      	mov	r0, r2
 800091c:	4619      	mov	r1, r3
 800091e:	e722      	b.n	8000766 <__aeabi_dmul+0x24a>
 8000920:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000924:	bf18      	it	ne
 8000926:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092a:	f47f aec5 	bne.w	80006b8 <__aeabi_dmul+0x19c>
 800092e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000932:	f47f af0d 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000936:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800093a:	f47f aeeb 	bne.w	8000714 <__aeabi_dmul+0x1f8>
 800093e:	e712      	b.n	8000766 <__aeabi_dmul+0x24a>

08000940 <__gedf2>:
 8000940:	f04f 3cff 	mov.w	ip, #4294967295
 8000944:	e006      	b.n	8000954 <__cmpdf2+0x4>
 8000946:	bf00      	nop

08000948 <__ledf2>:
 8000948:	f04f 0c01 	mov.w	ip, #1
 800094c:	e002      	b.n	8000954 <__cmpdf2+0x4>
 800094e:	bf00      	nop

08000950 <__cmpdf2>:
 8000950:	f04f 0c01 	mov.w	ip, #1
 8000954:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800096a:	d01b      	beq.n	80009a4 <__cmpdf2+0x54>
 800096c:	b001      	add	sp, #4
 800096e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000972:	bf0c      	ite	eq
 8000974:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000978:	ea91 0f03 	teqne	r1, r3
 800097c:	bf02      	ittt	eq
 800097e:	ea90 0f02 	teqeq	r0, r2
 8000982:	2000      	moveq	r0, #0
 8000984:	4770      	bxeq	lr
 8000986:	f110 0f00 	cmn.w	r0, #0
 800098a:	ea91 0f03 	teq	r1, r3
 800098e:	bf58      	it	pl
 8000990:	4299      	cmppl	r1, r3
 8000992:	bf08      	it	eq
 8000994:	4290      	cmpeq	r0, r2
 8000996:	bf2c      	ite	cs
 8000998:	17d8      	asrcs	r0, r3, #31
 800099a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800099e:	f040 0001 	orr.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d102      	bne.n	80009b4 <__cmpdf2+0x64>
 80009ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009b2:	d107      	bne.n	80009c4 <__cmpdf2+0x74>
 80009b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	d1d6      	bne.n	800096c <__cmpdf2+0x1c>
 80009be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009c2:	d0d3      	beq.n	800096c <__cmpdf2+0x1c>
 80009c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_cdrcmple>:
 80009cc:	4684      	mov	ip, r0
 80009ce:	4610      	mov	r0, r2
 80009d0:	4662      	mov	r2, ip
 80009d2:	468c      	mov	ip, r1
 80009d4:	4619      	mov	r1, r3
 80009d6:	4663      	mov	r3, ip
 80009d8:	e000      	b.n	80009dc <__aeabi_cdcmpeq>
 80009da:	bf00      	nop

080009dc <__aeabi_cdcmpeq>:
 80009dc:	b501      	push	{r0, lr}
 80009de:	f7ff ffb7 	bl	8000950 <__cmpdf2>
 80009e2:	2800      	cmp	r0, #0
 80009e4:	bf48      	it	mi
 80009e6:	f110 0f00 	cmnmi.w	r0, #0
 80009ea:	bd01      	pop	{r0, pc}

080009ec <__aeabi_dcmpeq>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff fff4 	bl	80009dc <__aeabi_cdcmpeq>
 80009f4:	bf0c      	ite	eq
 80009f6:	2001      	moveq	r0, #1
 80009f8:	2000      	movne	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmplt>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffea 	bl	80009dc <__aeabi_cdcmpeq>
 8000a08:	bf34      	ite	cc
 8000a0a:	2001      	movcc	r0, #1
 8000a0c:	2000      	movcs	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmple>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffe0 	bl	80009dc <__aeabi_cdcmpeq>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpge>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffce 	bl	80009cc <__aeabi_cdrcmple>
 8000a30:	bf94      	ite	ls
 8000a32:	2001      	movls	r0, #1
 8000a34:	2000      	movhi	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpgt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffc4 	bl	80009cc <__aeabi_cdrcmple>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmpun>:
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x10>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d10a      	bne.n	8000a76 <__aeabi_dcmpun+0x26>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d102      	bne.n	8000a70 <__aeabi_dcmpun+0x20>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_dcmpun+0x26>
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0001 	mov.w	r0, #1
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2uiz>:
 8000acc:	004a      	lsls	r2, r1, #1
 8000ace:	d211      	bcs.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ad4:	d211      	bcs.n	8000afa <__aeabi_d2uiz+0x2e>
 8000ad6:	d50d      	bpl.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d40e      	bmi.n	8000b00 <__aeabi_d2uiz+0x34>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_d2uiz+0x3a>
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_d2f>:
 8000b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b14:	bf24      	itt	cs
 8000b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b1e:	d90d      	bls.n	8000b3c <__aeabi_d2f+0x30>
 8000b20:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b40:	d121      	bne.n	8000b86 <__aeabi_d2f+0x7a>
 8000b42:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b46:	bfbc      	itt	lt
 8000b48:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b4c:	4770      	bxlt	lr
 8000b4e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b56:	f1c2 0218 	rsb	r2, r2, #24
 8000b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b62:	fa20 f002 	lsr.w	r0, r0, r2
 8000b66:	bf18      	it	ne
 8000b68:	f040 0001 	orrne.w	r0, r0, #1
 8000b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b78:	ea40 000c 	orr.w	r0, r0, ip
 8000b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b84:	e7cc      	b.n	8000b20 <__aeabi_d2f+0x14>
 8000b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8a:	d107      	bne.n	8000b9c <__aeabi_d2f+0x90>
 8000b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b90:	bf1e      	ittt	ne
 8000b92:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b96:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b9a:	4770      	bxne	lr
 8000b9c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ba4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_frsub>:
 8000bac:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bb0:	e002      	b.n	8000bb8 <__addsf3>
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_fsub>:
 8000bb4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bb8 <__addsf3>:
 8000bb8:	0042      	lsls	r2, r0, #1
 8000bba:	bf1f      	itttt	ne
 8000bbc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bc0:	ea92 0f03 	teqne	r2, r3
 8000bc4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bcc:	d06a      	beq.n	8000ca4 <__addsf3+0xec>
 8000bce:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bd2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bd6:	bfc1      	itttt	gt
 8000bd8:	18d2      	addgt	r2, r2, r3
 8000bda:	4041      	eorgt	r1, r0
 8000bdc:	4048      	eorgt	r0, r1
 8000bde:	4041      	eorgt	r1, r0
 8000be0:	bfb8      	it	lt
 8000be2:	425b      	neglt	r3, r3
 8000be4:	2b19      	cmp	r3, #25
 8000be6:	bf88      	it	hi
 8000be8:	4770      	bxhi	lr
 8000bea:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bee:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bf6:	bf18      	it	ne
 8000bf8:	4240      	negne	r0, r0
 8000bfa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bfe:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c02:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c06:	bf18      	it	ne
 8000c08:	4249      	negne	r1, r1
 8000c0a:	ea92 0f03 	teq	r2, r3
 8000c0e:	d03f      	beq.n	8000c90 <__addsf3+0xd8>
 8000c10:	f1a2 0201 	sub.w	r2, r2, #1
 8000c14:	fa41 fc03 	asr.w	ip, r1, r3
 8000c18:	eb10 000c 	adds.w	r0, r0, ip
 8000c1c:	f1c3 0320 	rsb	r3, r3, #32
 8000c20:	fa01 f103 	lsl.w	r1, r1, r3
 8000c24:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c28:	d502      	bpl.n	8000c30 <__addsf3+0x78>
 8000c2a:	4249      	negs	r1, r1
 8000c2c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c30:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c34:	d313      	bcc.n	8000c5e <__addsf3+0xa6>
 8000c36:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c3a:	d306      	bcc.n	8000c4a <__addsf3+0x92>
 8000c3c:	0840      	lsrs	r0, r0, #1
 8000c3e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c42:	f102 0201 	add.w	r2, r2, #1
 8000c46:	2afe      	cmp	r2, #254	@ 0xfe
 8000c48:	d251      	bcs.n	8000cee <__addsf3+0x136>
 8000c4a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c52:	bf08      	it	eq
 8000c54:	f020 0001 	biceq.w	r0, r0, #1
 8000c58:	ea40 0003 	orr.w	r0, r0, r3
 8000c5c:	4770      	bx	lr
 8000c5e:	0049      	lsls	r1, r1, #1
 8000c60:	eb40 0000 	adc.w	r0, r0, r0
 8000c64:	3a01      	subs	r2, #1
 8000c66:	bf28      	it	cs
 8000c68:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c6c:	d2ed      	bcs.n	8000c4a <__addsf3+0x92>
 8000c6e:	fab0 fc80 	clz	ip, r0
 8000c72:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c76:	ebb2 020c 	subs.w	r2, r2, ip
 8000c7a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c7e:	bfaa      	itet	ge
 8000c80:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c84:	4252      	neglt	r2, r2
 8000c86:	4318      	orrge	r0, r3
 8000c88:	bfbc      	itt	lt
 8000c8a:	40d0      	lsrlt	r0, r2
 8000c8c:	4318      	orrlt	r0, r3
 8000c8e:	4770      	bx	lr
 8000c90:	f092 0f00 	teq	r2, #0
 8000c94:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c98:	bf06      	itte	eq
 8000c9a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c9e:	3201      	addeq	r2, #1
 8000ca0:	3b01      	subne	r3, #1
 8000ca2:	e7b5      	b.n	8000c10 <__addsf3+0x58>
 8000ca4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cac:	bf18      	it	ne
 8000cae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb2:	d021      	beq.n	8000cf8 <__addsf3+0x140>
 8000cb4:	ea92 0f03 	teq	r2, r3
 8000cb8:	d004      	beq.n	8000cc4 <__addsf3+0x10c>
 8000cba:	f092 0f00 	teq	r2, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	4608      	moveq	r0, r1
 8000cc2:	4770      	bx	lr
 8000cc4:	ea90 0f01 	teq	r0, r1
 8000cc8:	bf1c      	itt	ne
 8000cca:	2000      	movne	r0, #0
 8000ccc:	4770      	bxne	lr
 8000cce:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cd2:	d104      	bne.n	8000cde <__addsf3+0x126>
 8000cd4:	0040      	lsls	r0, r0, #1
 8000cd6:	bf28      	it	cs
 8000cd8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cdc:	4770      	bx	lr
 8000cde:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000ce2:	bf3c      	itt	cc
 8000ce4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ce8:	4770      	bxcc	lr
 8000cea:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cee:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cf2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cf6:	4770      	bx	lr
 8000cf8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cfc:	bf16      	itet	ne
 8000cfe:	4608      	movne	r0, r1
 8000d00:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d04:	4601      	movne	r1, r0
 8000d06:	0242      	lsls	r2, r0, #9
 8000d08:	bf06      	itte	eq
 8000d0a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d0e:	ea90 0f01 	teqeq	r0, r1
 8000d12:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_ui2f>:
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	e004      	b.n	8000d28 <__aeabi_i2f+0x8>
 8000d1e:	bf00      	nop

08000d20 <__aeabi_i2f>:
 8000d20:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d24:	bf48      	it	mi
 8000d26:	4240      	negmi	r0, r0
 8000d28:	ea5f 0c00 	movs.w	ip, r0
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d34:	4601      	mov	r1, r0
 8000d36:	f04f 0000 	mov.w	r0, #0
 8000d3a:	e01c      	b.n	8000d76 <__aeabi_l2f+0x2a>

08000d3c <__aeabi_ul2f>:
 8000d3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d40:	bf08      	it	eq
 8000d42:	4770      	bxeq	lr
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	e00a      	b.n	8000d60 <__aeabi_l2f+0x14>
 8000d4a:	bf00      	nop

08000d4c <__aeabi_l2f>:
 8000d4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d50:	bf08      	it	eq
 8000d52:	4770      	bxeq	lr
 8000d54:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d58:	d502      	bpl.n	8000d60 <__aeabi_l2f+0x14>
 8000d5a:	4240      	negs	r0, r0
 8000d5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d60:	ea5f 0c01 	movs.w	ip, r1
 8000d64:	bf02      	ittt	eq
 8000d66:	4684      	moveq	ip, r0
 8000d68:	4601      	moveq	r1, r0
 8000d6a:	2000      	moveq	r0, #0
 8000d6c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d70:	bf08      	it	eq
 8000d72:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d76:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d7a:	fabc f28c 	clz	r2, ip
 8000d7e:	3a08      	subs	r2, #8
 8000d80:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d84:	db10      	blt.n	8000da8 <__aeabi_l2f+0x5c>
 8000d86:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d90:	f1c2 0220 	rsb	r2, r2, #32
 8000d94:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d98:	fa20 f202 	lsr.w	r2, r0, r2
 8000d9c:	eb43 0002 	adc.w	r0, r3, r2
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f102 0220 	add.w	r2, r2, #32
 8000dac:	fa01 fc02 	lsl.w	ip, r1, r2
 8000db0:	f1c2 0220 	rsb	r2, r2, #32
 8000db4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db8:	fa21 f202 	lsr.w	r2, r1, r2
 8000dbc:	eb43 0002 	adc.w	r0, r3, r2
 8000dc0:	bf08      	it	eq
 8000dc2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dc6:	4770      	bx	lr

08000dc8 <__aeabi_fmul>:
 8000dc8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000dcc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dd0:	bf1e      	ittt	ne
 8000dd2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dd6:	ea92 0f0c 	teqne	r2, ip
 8000dda:	ea93 0f0c 	teqne	r3, ip
 8000dde:	d06f      	beq.n	8000ec0 <__aeabi_fmul+0xf8>
 8000de0:	441a      	add	r2, r3
 8000de2:	ea80 0c01 	eor.w	ip, r0, r1
 8000de6:	0240      	lsls	r0, r0, #9
 8000de8:	bf18      	it	ne
 8000dea:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dee:	d01e      	beq.n	8000e2e <__aeabi_fmul+0x66>
 8000df0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000df4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000df8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dfc:	fba0 3101 	umull	r3, r1, r0, r1
 8000e00:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e04:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e08:	bf3e      	ittt	cc
 8000e0a:	0049      	lslcc	r1, r1, #1
 8000e0c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e10:	005b      	lslcc	r3, r3, #1
 8000e12:	ea40 0001 	orr.w	r0, r0, r1
 8000e16:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000e1a:	2afd      	cmp	r2, #253	@ 0xfd
 8000e1c:	d81d      	bhi.n	8000e5a <__aeabi_fmul+0x92>
 8000e1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000e22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e26:	bf08      	it	eq
 8000e28:	f020 0001 	biceq.w	r0, r0, #1
 8000e2c:	4770      	bx	lr
 8000e2e:	f090 0f00 	teq	r0, #0
 8000e32:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e36:	bf08      	it	eq
 8000e38:	0249      	lsleq	r1, r1, #9
 8000e3a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e3e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e42:	3a7f      	subs	r2, #127	@ 0x7f
 8000e44:	bfc2      	ittt	gt
 8000e46:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e4a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e4e:	4770      	bxgt	lr
 8000e50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e54:	f04f 0300 	mov.w	r3, #0
 8000e58:	3a01      	subs	r2, #1
 8000e5a:	dc5d      	bgt.n	8000f18 <__aeabi_fmul+0x150>
 8000e5c:	f112 0f19 	cmn.w	r2, #25
 8000e60:	bfdc      	itt	le
 8000e62:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e66:	4770      	bxle	lr
 8000e68:	f1c2 0200 	rsb	r2, r2, #0
 8000e6c:	0041      	lsls	r1, r0, #1
 8000e6e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e72:	f1c2 0220 	rsb	r2, r2, #32
 8000e76:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e7a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e7e:	f140 0000 	adc.w	r0, r0, #0
 8000e82:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e86:	bf08      	it	eq
 8000e88:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e8c:	4770      	bx	lr
 8000e8e:	f092 0f00 	teq	r2, #0
 8000e92:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e96:	bf02      	ittt	eq
 8000e98:	0040      	lsleq	r0, r0, #1
 8000e9a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e9e:	3a01      	subeq	r2, #1
 8000ea0:	d0f9      	beq.n	8000e96 <__aeabi_fmul+0xce>
 8000ea2:	ea40 000c 	orr.w	r0, r0, ip
 8000ea6:	f093 0f00 	teq	r3, #0
 8000eaa:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000eae:	bf02      	ittt	eq
 8000eb0:	0049      	lsleq	r1, r1, #1
 8000eb2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eb6:	3b01      	subeq	r3, #1
 8000eb8:	d0f9      	beq.n	8000eae <__aeabi_fmul+0xe6>
 8000eba:	ea41 010c 	orr.w	r1, r1, ip
 8000ebe:	e78f      	b.n	8000de0 <__aeabi_fmul+0x18>
 8000ec0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ec4:	ea92 0f0c 	teq	r2, ip
 8000ec8:	bf18      	it	ne
 8000eca:	ea93 0f0c 	teqne	r3, ip
 8000ece:	d00a      	beq.n	8000ee6 <__aeabi_fmul+0x11e>
 8000ed0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ed4:	bf18      	it	ne
 8000ed6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000eda:	d1d8      	bne.n	8000e8e <__aeabi_fmul+0xc6>
 8000edc:	ea80 0001 	eor.w	r0, r0, r1
 8000ee0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ee4:	4770      	bx	lr
 8000ee6:	f090 0f00 	teq	r0, #0
 8000eea:	bf17      	itett	ne
 8000eec:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ef0:	4608      	moveq	r0, r1
 8000ef2:	f091 0f00 	teqne	r1, #0
 8000ef6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000efa:	d014      	beq.n	8000f26 <__aeabi_fmul+0x15e>
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d101      	bne.n	8000f06 <__aeabi_fmul+0x13e>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	d10f      	bne.n	8000f26 <__aeabi_fmul+0x15e>
 8000f06:	ea93 0f0c 	teq	r3, ip
 8000f0a:	d103      	bne.n	8000f14 <__aeabi_fmul+0x14c>
 8000f0c:	024b      	lsls	r3, r1, #9
 8000f0e:	bf18      	it	ne
 8000f10:	4608      	movne	r0, r1
 8000f12:	d108      	bne.n	8000f26 <__aeabi_fmul+0x15e>
 8000f14:	ea80 0001 	eor.w	r0, r0, r1
 8000f18:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f24:	4770      	bx	lr
 8000f26:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f2a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f2e:	4770      	bx	lr

08000f30 <__aeabi_fdiv>:
 8000f30:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f34:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f38:	bf1e      	ittt	ne
 8000f3a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f3e:	ea92 0f0c 	teqne	r2, ip
 8000f42:	ea93 0f0c 	teqne	r3, ip
 8000f46:	d069      	beq.n	800101c <__aeabi_fdiv+0xec>
 8000f48:	eba2 0203 	sub.w	r2, r2, r3
 8000f4c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f50:	0249      	lsls	r1, r1, #9
 8000f52:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f56:	d037      	beq.n	8000fc8 <__aeabi_fdiv+0x98>
 8000f58:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f5c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f60:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f64:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	bf38      	it	cc
 8000f6c:	005b      	lslcc	r3, r3, #1
 8000f6e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f72:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f76:	428b      	cmp	r3, r1
 8000f78:	bf24      	itt	cs
 8000f7a:	1a5b      	subcs	r3, r3, r1
 8000f7c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f80:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f84:	bf24      	itt	cs
 8000f86:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f8a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f8e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f92:	bf24      	itt	cs
 8000f94:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f98:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f9c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fa0:	bf24      	itt	cs
 8000fa2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fa6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000faa:	011b      	lsls	r3, r3, #4
 8000fac:	bf18      	it	ne
 8000fae:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fb2:	d1e0      	bne.n	8000f76 <__aeabi_fdiv+0x46>
 8000fb4:	2afd      	cmp	r2, #253	@ 0xfd
 8000fb6:	f63f af50 	bhi.w	8000e5a <__aeabi_fmul+0x92>
 8000fba:	428b      	cmp	r3, r1
 8000fbc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fc0:	bf08      	it	eq
 8000fc2:	f020 0001 	biceq.w	r0, r0, #1
 8000fc6:	4770      	bx	lr
 8000fc8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000fcc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fd0:	327f      	adds	r2, #127	@ 0x7f
 8000fd2:	bfc2      	ittt	gt
 8000fd4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fd8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fdc:	4770      	bxgt	lr
 8000fde:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fe2:	f04f 0300 	mov.w	r3, #0
 8000fe6:	3a01      	subs	r2, #1
 8000fe8:	e737      	b.n	8000e5a <__aeabi_fmul+0x92>
 8000fea:	f092 0f00 	teq	r2, #0
 8000fee:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ff2:	bf02      	ittt	eq
 8000ff4:	0040      	lsleq	r0, r0, #1
 8000ff6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ffa:	3a01      	subeq	r2, #1
 8000ffc:	d0f9      	beq.n	8000ff2 <__aeabi_fdiv+0xc2>
 8000ffe:	ea40 000c 	orr.w	r0, r0, ip
 8001002:	f093 0f00 	teq	r3, #0
 8001006:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800100a:	bf02      	ittt	eq
 800100c:	0049      	lsleq	r1, r1, #1
 800100e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8001012:	3b01      	subeq	r3, #1
 8001014:	d0f9      	beq.n	800100a <__aeabi_fdiv+0xda>
 8001016:	ea41 010c 	orr.w	r1, r1, ip
 800101a:	e795      	b.n	8000f48 <__aeabi_fdiv+0x18>
 800101c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001020:	ea92 0f0c 	teq	r2, ip
 8001024:	d108      	bne.n	8001038 <__aeabi_fdiv+0x108>
 8001026:	0242      	lsls	r2, r0, #9
 8001028:	f47f af7d 	bne.w	8000f26 <__aeabi_fmul+0x15e>
 800102c:	ea93 0f0c 	teq	r3, ip
 8001030:	f47f af70 	bne.w	8000f14 <__aeabi_fmul+0x14c>
 8001034:	4608      	mov	r0, r1
 8001036:	e776      	b.n	8000f26 <__aeabi_fmul+0x15e>
 8001038:	ea93 0f0c 	teq	r3, ip
 800103c:	d104      	bne.n	8001048 <__aeabi_fdiv+0x118>
 800103e:	024b      	lsls	r3, r1, #9
 8001040:	f43f af4c 	beq.w	8000edc <__aeabi_fmul+0x114>
 8001044:	4608      	mov	r0, r1
 8001046:	e76e      	b.n	8000f26 <__aeabi_fmul+0x15e>
 8001048:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800104c:	bf18      	it	ne
 800104e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8001052:	d1ca      	bne.n	8000fea <__aeabi_fdiv+0xba>
 8001054:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001058:	f47f af5c 	bne.w	8000f14 <__aeabi_fmul+0x14c>
 800105c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001060:	f47f af3c 	bne.w	8000edc <__aeabi_fmul+0x114>
 8001064:	e75f      	b.n	8000f26 <__aeabi_fmul+0x15e>
 8001066:	bf00      	nop

08001068 <__gesf2>:
 8001068:	f04f 3cff 	mov.w	ip, #4294967295
 800106c:	e006      	b.n	800107c <__cmpsf2+0x4>
 800106e:	bf00      	nop

08001070 <__lesf2>:
 8001070:	f04f 0c01 	mov.w	ip, #1
 8001074:	e002      	b.n	800107c <__cmpsf2+0x4>
 8001076:	bf00      	nop

08001078 <__cmpsf2>:
 8001078:	f04f 0c01 	mov.w	ip, #1
 800107c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001080:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001084:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	bf18      	it	ne
 800108e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001092:	d011      	beq.n	80010b8 <__cmpsf2+0x40>
 8001094:	b001      	add	sp, #4
 8001096:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800109a:	bf18      	it	ne
 800109c:	ea90 0f01 	teqne	r0, r1
 80010a0:	bf58      	it	pl
 80010a2:	ebb2 0003 	subspl.w	r0, r2, r3
 80010a6:	bf88      	it	hi
 80010a8:	17c8      	asrhi	r0, r1, #31
 80010aa:	bf38      	it	cc
 80010ac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010b0:	bf18      	it	ne
 80010b2:	f040 0001 	orrne.w	r0, r0, #1
 80010b6:	4770      	bx	lr
 80010b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010bc:	d102      	bne.n	80010c4 <__cmpsf2+0x4c>
 80010be:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010c2:	d105      	bne.n	80010d0 <__cmpsf2+0x58>
 80010c4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010c8:	d1e4      	bne.n	8001094 <__cmpsf2+0x1c>
 80010ca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ce:	d0e1      	beq.n	8001094 <__cmpsf2+0x1c>
 80010d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop

080010d8 <__aeabi_cfrcmple>:
 80010d8:	4684      	mov	ip, r0
 80010da:	4608      	mov	r0, r1
 80010dc:	4661      	mov	r1, ip
 80010de:	e7ff      	b.n	80010e0 <__aeabi_cfcmpeq>

080010e0 <__aeabi_cfcmpeq>:
 80010e0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010e2:	f7ff ffc9 	bl	8001078 <__cmpsf2>
 80010e6:	2800      	cmp	r0, #0
 80010e8:	bf48      	it	mi
 80010ea:	f110 0f00 	cmnmi.w	r0, #0
 80010ee:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010f0 <__aeabi_fcmpeq>:
 80010f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f4:	f7ff fff4 	bl	80010e0 <__aeabi_cfcmpeq>
 80010f8:	bf0c      	ite	eq
 80010fa:	2001      	moveq	r0, #1
 80010fc:	2000      	movne	r0, #0
 80010fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8001102:	bf00      	nop

08001104 <__aeabi_fcmplt>:
 8001104:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001108:	f7ff ffea 	bl	80010e0 <__aeabi_cfcmpeq>
 800110c:	bf34      	ite	cc
 800110e:	2001      	movcc	r0, #1
 8001110:	2000      	movcs	r0, #0
 8001112:	f85d fb08 	ldr.w	pc, [sp], #8
 8001116:	bf00      	nop

08001118 <__aeabi_fcmple>:
 8001118:	f84d ed08 	str.w	lr, [sp, #-8]!
 800111c:	f7ff ffe0 	bl	80010e0 <__aeabi_cfcmpeq>
 8001120:	bf94      	ite	ls
 8001122:	2001      	movls	r0, #1
 8001124:	2000      	movhi	r0, #0
 8001126:	f85d fb08 	ldr.w	pc, [sp], #8
 800112a:	bf00      	nop

0800112c <__aeabi_fcmpge>:
 800112c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001130:	f7ff ffd2 	bl	80010d8 <__aeabi_cfrcmple>
 8001134:	bf94      	ite	ls
 8001136:	2001      	movls	r0, #1
 8001138:	2000      	movhi	r0, #0
 800113a:	f85d fb08 	ldr.w	pc, [sp], #8
 800113e:	bf00      	nop

08001140 <__aeabi_fcmpgt>:
 8001140:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001144:	f7ff ffc8 	bl	80010d8 <__aeabi_cfrcmple>
 8001148:	bf34      	ite	cc
 800114a:	2001      	movcc	r0, #1
 800114c:	2000      	movcs	r0, #0
 800114e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001152:	bf00      	nop

08001154 <__aeabi_f2iz>:
 8001154:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001158:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800115c:	d30f      	bcc.n	800117e <__aeabi_f2iz+0x2a>
 800115e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001162:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001166:	d90d      	bls.n	8001184 <__aeabi_f2iz+0x30>
 8001168:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800116c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001170:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001174:	fa23 f002 	lsr.w	r0, r3, r2
 8001178:	bf18      	it	ne
 800117a:	4240      	negne	r0, r0
 800117c:	4770      	bx	lr
 800117e:	f04f 0000 	mov.w	r0, #0
 8001182:	4770      	bx	lr
 8001184:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001188:	d101      	bne.n	800118e <__aeabi_f2iz+0x3a>
 800118a:	0242      	lsls	r2, r0, #9
 800118c:	d105      	bne.n	800119a <__aeabi_f2iz+0x46>
 800118e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001192:	bf08      	it	eq
 8001194:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001198:	4770      	bx	lr
 800119a:	f04f 0000 	mov.w	r0, #0
 800119e:	4770      	bx	lr

080011a0 <__aeabi_f2uiz>:
 80011a0:	0042      	lsls	r2, r0, #1
 80011a2:	d20e      	bcs.n	80011c2 <__aeabi_f2uiz+0x22>
 80011a4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80011a8:	d30b      	bcc.n	80011c2 <__aeabi_f2uiz+0x22>
 80011aa:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80011ae:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011b2:	d409      	bmi.n	80011c8 <__aeabi_f2uiz+0x28>
 80011b4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011b8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80011bc:	fa23 f002 	lsr.w	r0, r3, r2
 80011c0:	4770      	bx	lr
 80011c2:	f04f 0000 	mov.w	r0, #0
 80011c6:	4770      	bx	lr
 80011c8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80011cc:	d101      	bne.n	80011d2 <__aeabi_f2uiz+0x32>
 80011ce:	0242      	lsls	r2, r0, #9
 80011d0:	d102      	bne.n	80011d8 <__aeabi_f2uiz+0x38>
 80011d2:	f04f 30ff 	mov.w	r0, #4294967295
 80011d6:	4770      	bx	lr
 80011d8:	f04f 0000 	mov.w	r0, #0
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop

080011e0 <__aeabi_uldivmod>:
 80011e0:	b953      	cbnz	r3, 80011f8 <__aeabi_uldivmod+0x18>
 80011e2:	b94a      	cbnz	r2, 80011f8 <__aeabi_uldivmod+0x18>
 80011e4:	2900      	cmp	r1, #0
 80011e6:	bf08      	it	eq
 80011e8:	2800      	cmpeq	r0, #0
 80011ea:	bf1c      	itt	ne
 80011ec:	f04f 31ff 	movne.w	r1, #4294967295
 80011f0:	f04f 30ff 	movne.w	r0, #4294967295
 80011f4:	f000 b9c2 	b.w	800157c <__aeabi_idiv0>
 80011f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80011fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001200:	f000 f83c 	bl	800127c <__udivmoddi4>
 8001204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800120c:	b004      	add	sp, #16
 800120e:	4770      	bx	lr

08001210 <__aeabi_d2lz>:
 8001210:	b538      	push	{r3, r4, r5, lr}
 8001212:	2200      	movs	r2, #0
 8001214:	2300      	movs	r3, #0
 8001216:	4604      	mov	r4, r0
 8001218:	460d      	mov	r5, r1
 800121a:	f7ff fbf1 	bl	8000a00 <__aeabi_dcmplt>
 800121e:	b928      	cbnz	r0, 800122c <__aeabi_d2lz+0x1c>
 8001220:	4620      	mov	r0, r4
 8001222:	4629      	mov	r1, r5
 8001224:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001228:	f000 b80a 	b.w	8001240 <__aeabi_d2ulz>
 800122c:	4620      	mov	r0, r4
 800122e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001232:	f000 f805 	bl	8001240 <__aeabi_d2ulz>
 8001236:	4240      	negs	r0, r0
 8001238:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800123c:	bd38      	pop	{r3, r4, r5, pc}
 800123e:	bf00      	nop

08001240 <__aeabi_d2ulz>:
 8001240:	b5d0      	push	{r4, r6, r7, lr}
 8001242:	2200      	movs	r2, #0
 8001244:	4b0b      	ldr	r3, [pc, #44]	@ (8001274 <__aeabi_d2ulz+0x34>)
 8001246:	4606      	mov	r6, r0
 8001248:	460f      	mov	r7, r1
 800124a:	f7ff f967 	bl	800051c <__aeabi_dmul>
 800124e:	f7ff fc3d 	bl	8000acc <__aeabi_d2uiz>
 8001252:	4604      	mov	r4, r0
 8001254:	f7ff f8e8 	bl	8000428 <__aeabi_ui2d>
 8001258:	2200      	movs	r2, #0
 800125a:	4b07      	ldr	r3, [pc, #28]	@ (8001278 <__aeabi_d2ulz+0x38>)
 800125c:	f7ff f95e 	bl	800051c <__aeabi_dmul>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	4630      	mov	r0, r6
 8001266:	4639      	mov	r1, r7
 8001268:	f7fe ffa0 	bl	80001ac <__aeabi_dsub>
 800126c:	f7ff fc2e 	bl	8000acc <__aeabi_d2uiz>
 8001270:	4621      	mov	r1, r4
 8001272:	bdd0      	pop	{r4, r6, r7, pc}
 8001274:	3df00000 	.word	0x3df00000
 8001278:	41f00000 	.word	0x41f00000

0800127c <__udivmoddi4>:
 800127c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001280:	9d08      	ldr	r5, [sp, #32]
 8001282:	468e      	mov	lr, r1
 8001284:	4604      	mov	r4, r0
 8001286:	4688      	mov	r8, r1
 8001288:	2b00      	cmp	r3, #0
 800128a:	d14a      	bne.n	8001322 <__udivmoddi4+0xa6>
 800128c:	428a      	cmp	r2, r1
 800128e:	4617      	mov	r7, r2
 8001290:	d962      	bls.n	8001358 <__udivmoddi4+0xdc>
 8001292:	fab2 f682 	clz	r6, r2
 8001296:	b14e      	cbz	r6, 80012ac <__udivmoddi4+0x30>
 8001298:	f1c6 0320 	rsb	r3, r6, #32
 800129c:	fa01 f806 	lsl.w	r8, r1, r6
 80012a0:	fa20 f303 	lsr.w	r3, r0, r3
 80012a4:	40b7      	lsls	r7, r6
 80012a6:	ea43 0808 	orr.w	r8, r3, r8
 80012aa:	40b4      	lsls	r4, r6
 80012ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80012b0:	fbb8 f1fe 	udiv	r1, r8, lr
 80012b4:	fa1f fc87 	uxth.w	ip, r7
 80012b8:	fb0e 8811 	mls	r8, lr, r1, r8
 80012bc:	fb01 f20c 	mul.w	r2, r1, ip
 80012c0:	0c23      	lsrs	r3, r4, #16
 80012c2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d909      	bls.n	80012de <__udivmoddi4+0x62>
 80012ca:	18fb      	adds	r3, r7, r3
 80012cc:	f101 30ff 	add.w	r0, r1, #4294967295
 80012d0:	f080 80eb 	bcs.w	80014aa <__udivmoddi4+0x22e>
 80012d4:	429a      	cmp	r2, r3
 80012d6:	f240 80e8 	bls.w	80014aa <__udivmoddi4+0x22e>
 80012da:	3902      	subs	r1, #2
 80012dc:	443b      	add	r3, r7
 80012de:	1a9a      	subs	r2, r3, r2
 80012e0:	fbb2 f0fe 	udiv	r0, r2, lr
 80012e4:	fb0e 2210 	mls	r2, lr, r0, r2
 80012e8:	fb00 fc0c 	mul.w	ip, r0, ip
 80012ec:	b2a3      	uxth	r3, r4
 80012ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80012f2:	459c      	cmp	ip, r3
 80012f4:	d909      	bls.n	800130a <__udivmoddi4+0x8e>
 80012f6:	18fb      	adds	r3, r7, r3
 80012f8:	f100 32ff 	add.w	r2, r0, #4294967295
 80012fc:	f080 80d7 	bcs.w	80014ae <__udivmoddi4+0x232>
 8001300:	459c      	cmp	ip, r3
 8001302:	f240 80d4 	bls.w	80014ae <__udivmoddi4+0x232>
 8001306:	443b      	add	r3, r7
 8001308:	3802      	subs	r0, #2
 800130a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800130e:	2100      	movs	r1, #0
 8001310:	eba3 030c 	sub.w	r3, r3, ip
 8001314:	b11d      	cbz	r5, 800131e <__udivmoddi4+0xa2>
 8001316:	2200      	movs	r2, #0
 8001318:	40f3      	lsrs	r3, r6
 800131a:	e9c5 3200 	strd	r3, r2, [r5]
 800131e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001322:	428b      	cmp	r3, r1
 8001324:	d905      	bls.n	8001332 <__udivmoddi4+0xb6>
 8001326:	b10d      	cbz	r5, 800132c <__udivmoddi4+0xb0>
 8001328:	e9c5 0100 	strd	r0, r1, [r5]
 800132c:	2100      	movs	r1, #0
 800132e:	4608      	mov	r0, r1
 8001330:	e7f5      	b.n	800131e <__udivmoddi4+0xa2>
 8001332:	fab3 f183 	clz	r1, r3
 8001336:	2900      	cmp	r1, #0
 8001338:	d146      	bne.n	80013c8 <__udivmoddi4+0x14c>
 800133a:	4573      	cmp	r3, lr
 800133c:	d302      	bcc.n	8001344 <__udivmoddi4+0xc8>
 800133e:	4282      	cmp	r2, r0
 8001340:	f200 8108 	bhi.w	8001554 <__udivmoddi4+0x2d8>
 8001344:	1a84      	subs	r4, r0, r2
 8001346:	eb6e 0203 	sbc.w	r2, lr, r3
 800134a:	2001      	movs	r0, #1
 800134c:	4690      	mov	r8, r2
 800134e:	2d00      	cmp	r5, #0
 8001350:	d0e5      	beq.n	800131e <__udivmoddi4+0xa2>
 8001352:	e9c5 4800 	strd	r4, r8, [r5]
 8001356:	e7e2      	b.n	800131e <__udivmoddi4+0xa2>
 8001358:	2a00      	cmp	r2, #0
 800135a:	f000 8091 	beq.w	8001480 <__udivmoddi4+0x204>
 800135e:	fab2 f682 	clz	r6, r2
 8001362:	2e00      	cmp	r6, #0
 8001364:	f040 80a5 	bne.w	80014b2 <__udivmoddi4+0x236>
 8001368:	1a8a      	subs	r2, r1, r2
 800136a:	2101      	movs	r1, #1
 800136c:	0c03      	lsrs	r3, r0, #16
 800136e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001372:	b280      	uxth	r0, r0
 8001374:	b2bc      	uxth	r4, r7
 8001376:	fbb2 fcfe 	udiv	ip, r2, lr
 800137a:	fb0e 221c 	mls	r2, lr, ip, r2
 800137e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001382:	fb04 f20c 	mul.w	r2, r4, ip
 8001386:	429a      	cmp	r2, r3
 8001388:	d907      	bls.n	800139a <__udivmoddi4+0x11e>
 800138a:	18fb      	adds	r3, r7, r3
 800138c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8001390:	d202      	bcs.n	8001398 <__udivmoddi4+0x11c>
 8001392:	429a      	cmp	r2, r3
 8001394:	f200 80e3 	bhi.w	800155e <__udivmoddi4+0x2e2>
 8001398:	46c4      	mov	ip, r8
 800139a:	1a9b      	subs	r3, r3, r2
 800139c:	fbb3 f2fe 	udiv	r2, r3, lr
 80013a0:	fb0e 3312 	mls	r3, lr, r2, r3
 80013a4:	fb02 f404 	mul.w	r4, r2, r4
 80013a8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80013ac:	429c      	cmp	r4, r3
 80013ae:	d907      	bls.n	80013c0 <__udivmoddi4+0x144>
 80013b0:	18fb      	adds	r3, r7, r3
 80013b2:	f102 30ff 	add.w	r0, r2, #4294967295
 80013b6:	d202      	bcs.n	80013be <__udivmoddi4+0x142>
 80013b8:	429c      	cmp	r4, r3
 80013ba:	f200 80cd 	bhi.w	8001558 <__udivmoddi4+0x2dc>
 80013be:	4602      	mov	r2, r0
 80013c0:	1b1b      	subs	r3, r3, r4
 80013c2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80013c6:	e7a5      	b.n	8001314 <__udivmoddi4+0x98>
 80013c8:	f1c1 0620 	rsb	r6, r1, #32
 80013cc:	408b      	lsls	r3, r1
 80013ce:	fa22 f706 	lsr.w	r7, r2, r6
 80013d2:	431f      	orrs	r7, r3
 80013d4:	fa2e fa06 	lsr.w	sl, lr, r6
 80013d8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80013dc:	fbba f8f9 	udiv	r8, sl, r9
 80013e0:	fa0e fe01 	lsl.w	lr, lr, r1
 80013e4:	fa20 f306 	lsr.w	r3, r0, r6
 80013e8:	fb09 aa18 	mls	sl, r9, r8, sl
 80013ec:	fa1f fc87 	uxth.w	ip, r7
 80013f0:	ea43 030e 	orr.w	r3, r3, lr
 80013f4:	fa00 fe01 	lsl.w	lr, r0, r1
 80013f8:	fb08 f00c 	mul.w	r0, r8, ip
 80013fc:	0c1c      	lsrs	r4, r3, #16
 80013fe:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001402:	42a0      	cmp	r0, r4
 8001404:	fa02 f201 	lsl.w	r2, r2, r1
 8001408:	d90a      	bls.n	8001420 <__udivmoddi4+0x1a4>
 800140a:	193c      	adds	r4, r7, r4
 800140c:	f108 3aff 	add.w	sl, r8, #4294967295
 8001410:	f080 809e 	bcs.w	8001550 <__udivmoddi4+0x2d4>
 8001414:	42a0      	cmp	r0, r4
 8001416:	f240 809b 	bls.w	8001550 <__udivmoddi4+0x2d4>
 800141a:	f1a8 0802 	sub.w	r8, r8, #2
 800141e:	443c      	add	r4, r7
 8001420:	1a24      	subs	r4, r4, r0
 8001422:	b298      	uxth	r0, r3
 8001424:	fbb4 f3f9 	udiv	r3, r4, r9
 8001428:	fb09 4413 	mls	r4, r9, r3, r4
 800142c:	fb03 fc0c 	mul.w	ip, r3, ip
 8001430:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8001434:	45a4      	cmp	ip, r4
 8001436:	d909      	bls.n	800144c <__udivmoddi4+0x1d0>
 8001438:	193c      	adds	r4, r7, r4
 800143a:	f103 30ff 	add.w	r0, r3, #4294967295
 800143e:	f080 8085 	bcs.w	800154c <__udivmoddi4+0x2d0>
 8001442:	45a4      	cmp	ip, r4
 8001444:	f240 8082 	bls.w	800154c <__udivmoddi4+0x2d0>
 8001448:	3b02      	subs	r3, #2
 800144a:	443c      	add	r4, r7
 800144c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001450:	eba4 040c 	sub.w	r4, r4, ip
 8001454:	fba0 8c02 	umull	r8, ip, r0, r2
 8001458:	4564      	cmp	r4, ip
 800145a:	4643      	mov	r3, r8
 800145c:	46e1      	mov	r9, ip
 800145e:	d364      	bcc.n	800152a <__udivmoddi4+0x2ae>
 8001460:	d061      	beq.n	8001526 <__udivmoddi4+0x2aa>
 8001462:	b15d      	cbz	r5, 800147c <__udivmoddi4+0x200>
 8001464:	ebbe 0203 	subs.w	r2, lr, r3
 8001468:	eb64 0409 	sbc.w	r4, r4, r9
 800146c:	fa04 f606 	lsl.w	r6, r4, r6
 8001470:	fa22 f301 	lsr.w	r3, r2, r1
 8001474:	431e      	orrs	r6, r3
 8001476:	40cc      	lsrs	r4, r1
 8001478:	e9c5 6400 	strd	r6, r4, [r5]
 800147c:	2100      	movs	r1, #0
 800147e:	e74e      	b.n	800131e <__udivmoddi4+0xa2>
 8001480:	fbb1 fcf2 	udiv	ip, r1, r2
 8001484:	0c01      	lsrs	r1, r0, #16
 8001486:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800148a:	b280      	uxth	r0, r0
 800148c:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001490:	463b      	mov	r3, r7
 8001492:	fbb1 f1f7 	udiv	r1, r1, r7
 8001496:	4638      	mov	r0, r7
 8001498:	463c      	mov	r4, r7
 800149a:	46b8      	mov	r8, r7
 800149c:	46be      	mov	lr, r7
 800149e:	2620      	movs	r6, #32
 80014a0:	eba2 0208 	sub.w	r2, r2, r8
 80014a4:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80014a8:	e765      	b.n	8001376 <__udivmoddi4+0xfa>
 80014aa:	4601      	mov	r1, r0
 80014ac:	e717      	b.n	80012de <__udivmoddi4+0x62>
 80014ae:	4610      	mov	r0, r2
 80014b0:	e72b      	b.n	800130a <__udivmoddi4+0x8e>
 80014b2:	f1c6 0120 	rsb	r1, r6, #32
 80014b6:	fa2e fc01 	lsr.w	ip, lr, r1
 80014ba:	40b7      	lsls	r7, r6
 80014bc:	fa0e fe06 	lsl.w	lr, lr, r6
 80014c0:	fa20 f101 	lsr.w	r1, r0, r1
 80014c4:	ea41 010e 	orr.w	r1, r1, lr
 80014c8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80014cc:	fbbc f8fe 	udiv	r8, ip, lr
 80014d0:	b2bc      	uxth	r4, r7
 80014d2:	fb0e cc18 	mls	ip, lr, r8, ip
 80014d6:	fb08 f904 	mul.w	r9, r8, r4
 80014da:	0c0a      	lsrs	r2, r1, #16
 80014dc:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80014e0:	40b0      	lsls	r0, r6
 80014e2:	4591      	cmp	r9, r2
 80014e4:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80014e8:	b280      	uxth	r0, r0
 80014ea:	d93e      	bls.n	800156a <__udivmoddi4+0x2ee>
 80014ec:	18ba      	adds	r2, r7, r2
 80014ee:	f108 3cff 	add.w	ip, r8, #4294967295
 80014f2:	d201      	bcs.n	80014f8 <__udivmoddi4+0x27c>
 80014f4:	4591      	cmp	r9, r2
 80014f6:	d81f      	bhi.n	8001538 <__udivmoddi4+0x2bc>
 80014f8:	eba2 0209 	sub.w	r2, r2, r9
 80014fc:	fbb2 f9fe 	udiv	r9, r2, lr
 8001500:	fb09 f804 	mul.w	r8, r9, r4
 8001504:	fb0e 2a19 	mls	sl, lr, r9, r2
 8001508:	b28a      	uxth	r2, r1
 800150a:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 800150e:	4542      	cmp	r2, r8
 8001510:	d229      	bcs.n	8001566 <__udivmoddi4+0x2ea>
 8001512:	18ba      	adds	r2, r7, r2
 8001514:	f109 31ff 	add.w	r1, r9, #4294967295
 8001518:	d2c2      	bcs.n	80014a0 <__udivmoddi4+0x224>
 800151a:	4542      	cmp	r2, r8
 800151c:	d2c0      	bcs.n	80014a0 <__udivmoddi4+0x224>
 800151e:	f1a9 0102 	sub.w	r1, r9, #2
 8001522:	443a      	add	r2, r7
 8001524:	e7bc      	b.n	80014a0 <__udivmoddi4+0x224>
 8001526:	45c6      	cmp	lr, r8
 8001528:	d29b      	bcs.n	8001462 <__udivmoddi4+0x1e6>
 800152a:	ebb8 0302 	subs.w	r3, r8, r2
 800152e:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001532:	3801      	subs	r0, #1
 8001534:	46e1      	mov	r9, ip
 8001536:	e794      	b.n	8001462 <__udivmoddi4+0x1e6>
 8001538:	eba7 0909 	sub.w	r9, r7, r9
 800153c:	444a      	add	r2, r9
 800153e:	fbb2 f9fe 	udiv	r9, r2, lr
 8001542:	f1a8 0c02 	sub.w	ip, r8, #2
 8001546:	fb09 f804 	mul.w	r8, r9, r4
 800154a:	e7db      	b.n	8001504 <__udivmoddi4+0x288>
 800154c:	4603      	mov	r3, r0
 800154e:	e77d      	b.n	800144c <__udivmoddi4+0x1d0>
 8001550:	46d0      	mov	r8, sl
 8001552:	e765      	b.n	8001420 <__udivmoddi4+0x1a4>
 8001554:	4608      	mov	r0, r1
 8001556:	e6fa      	b.n	800134e <__udivmoddi4+0xd2>
 8001558:	443b      	add	r3, r7
 800155a:	3a02      	subs	r2, #2
 800155c:	e730      	b.n	80013c0 <__udivmoddi4+0x144>
 800155e:	f1ac 0c02 	sub.w	ip, ip, #2
 8001562:	443b      	add	r3, r7
 8001564:	e719      	b.n	800139a <__udivmoddi4+0x11e>
 8001566:	4649      	mov	r1, r9
 8001568:	e79a      	b.n	80014a0 <__udivmoddi4+0x224>
 800156a:	eba2 0209 	sub.w	r2, r2, r9
 800156e:	fbb2 f9fe 	udiv	r9, r2, lr
 8001572:	46c4      	mov	ip, r8
 8001574:	fb09 f804 	mul.w	r8, r9, r4
 8001578:	e7c4      	b.n	8001504 <__udivmoddi4+0x288>
 800157a:	bf00      	nop

0800157c <__aeabi_idiv0>:
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop

08001580 <adcFunctionXblinking>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//RESOLU adc probleme arrete boucle infinie a une certaine value
void adcFunctionXblinking(void) {
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
	static uint8_t ledState = 0;  // mémorise l'état ON/OFF des LEDs

	HAL_ADC_Start(&hadc);  // Start sans interruption
 8001584:	4828      	ldr	r0, [pc, #160]	@ (8001628 <adcFunctionXblinking+0xa8>)
 8001586:	f001 fb0d 	bl	8002ba4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 800158a:	2164      	movs	r1, #100	@ 0x64
 800158c:	4826      	ldr	r0, [pc, #152]	@ (8001628 <adcFunctionXblinking+0xa8>)
 800158e:	f001 fb95 	bl	8002cbc <HAL_ADC_PollForConversion>
	if (HAL_IS_BIT_SET(HAL_ADC_GetState(&hadc), HAL_ADC_STATE_REG_EOC)) {
 8001592:	4825      	ldr	r0, [pc, #148]	@ (8001628 <adcFunctionXblinking+0xa8>)
 8001594:	f001 ff00 	bl	8003398 <HAL_ADC_GetState>
 8001598:	4603      	mov	r3, r0
 800159a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800159e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015a2:	d105      	bne.n	80015b0 <adcFunctionXblinking+0x30>
		digitalValue = HAL_ADC_GetValue(&hadc);
 80015a4:	4820      	ldr	r0, [pc, #128]	@ (8001628 <adcFunctionXblinking+0xa8>)
 80015a6:	f001 fc19 	bl	8002ddc <HAL_ADC_GetValue>
 80015aa:	4603      	mov	r3, r0
 80015ac:	4a1f      	ldr	r2, [pc, #124]	@ (800162c <adcFunctionXblinking+0xac>)
 80015ae:	6013      	str	r3, [r2, #0]
	}
	HAL_ADC_Stop(&hadc);  // Stop propre
 80015b0:	481d      	ldr	r0, [pc, #116]	@ (8001628 <adcFunctionXblinking+0xa8>)
 80015b2:	f001 fb57 	bl	8002c64 <HAL_ADC_Stop>

	printf("Digital value: %lu\r\n", digitalValue);
 80015b6:	4b1d      	ldr	r3, [pc, #116]	@ (800162c <adcFunctionXblinking+0xac>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4619      	mov	r1, r3
 80015bc:	481c      	ldr	r0, [pc, #112]	@ (8001630 <adcFunctionXblinking+0xb0>)
 80015be:	f006 fea3 	bl	8008308 <iprintf>

	// Alternance ON/OFF
	ledState = !ledState;
 80015c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001634 <adcFunctionXblinking+0xb4>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	bf0c      	ite	eq
 80015ca:	2301      	moveq	r3, #1
 80015cc:	2300      	movne	r3, #0
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	461a      	mov	r2, r3
 80015d2:	4b18      	ldr	r3, [pc, #96]	@ (8001634 <adcFunctionXblinking+0xb4>)
 80015d4:	701a      	strb	r2, [r3, #0]

	// L0 reste allumée si digitalValue > 0
	HAL_GPIO_WritePin(L0_GPIO_Port, L0_Pin,
 80015d6:	4b15      	ldr	r3, [pc, #84]	@ (800162c <adcFunctionXblinking+0xac>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	bf14      	ite	ne
 80015de:	2301      	movne	r3, #1
 80015e0:	2300      	moveq	r3, #0
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	461a      	mov	r2, r3
 80015e6:	2102      	movs	r1, #2
 80015e8:	4813      	ldr	r0, [pc, #76]	@ (8001638 <adcFunctionXblinking+0xb8>)
 80015ea:	f002 fa25 	bl	8003a38 <HAL_GPIO_WritePin>
			(digitalValue > 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);

	// Clignotement de L1
	if (digitalValue > 2000) {
 80015ee:	4b0f      	ldr	r3, [pc, #60]	@ (800162c <adcFunctionXblinking+0xac>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80015f6:	d90c      	bls.n	8001612 <adcFunctionXblinking+0x92>
		HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin,
 80015f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001634 <adcFunctionXblinking+0xb4>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	bf14      	ite	ne
 8001600:	2301      	movne	r3, #1
 8001602:	2300      	moveq	r3, #0
 8001604:	b2db      	uxtb	r3, r3
 8001606:	461a      	mov	r2, r3
 8001608:	2104      	movs	r1, #4
 800160a:	480b      	ldr	r0, [pc, #44]	@ (8001638 <adcFunctionXblinking+0xb8>)
 800160c:	f002 fa14 	bl	8003a38 <HAL_GPIO_WritePin>
 8001610:	e004      	b.n	800161c <adcFunctionXblinking+0x9c>
				(ledState) ? GPIO_PIN_SET : GPIO_PIN_RESET);
	} else {
		HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin, GPIO_PIN_RESET);
 8001612:	2200      	movs	r2, #0
 8001614:	2104      	movs	r1, #4
 8001616:	4808      	ldr	r0, [pc, #32]	@ (8001638 <adcFunctionXblinking+0xb8>)
 8001618:	f002 fa0e 	bl	8003a38 <HAL_GPIO_WritePin>
	}

	// Délai pour rendre le clignotement visible
	HAL_Delay(200);
 800161c:	20c8      	movs	r0, #200	@ 0xc8
 800161e:	f001 f959 	bl	80028d4 <HAL_Delay>
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	2000020c 	.word	0x2000020c
 800162c:	20000384 	.word	0x20000384
 8001630:	0800bf84 	.word	0x0800bf84
 8001634:	200009bc 	.word	0x200009bc
 8001638:	40020400 	.word	0x40020400

0800163c <buzzer>:

void buzzer(uint8_t buzzerState) {
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	71fb      	strb	r3, [r7, #7]
	if (buzzerState) {
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d007      	beq.n	800165c <buzzer+0x20>
		printf("buzzer on \r\n");
 800164c:	480a      	ldr	r0, [pc, #40]	@ (8001678 <buzzer+0x3c>)
 800164e:	f006 fec3 	bl	80083d8 <puts>
		HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);
 8001652:	2104      	movs	r1, #4
 8001654:	4809      	ldr	r0, [pc, #36]	@ (800167c <buzzer+0x40>)
 8001656:	f004 f953 	bl	8005900 <HAL_TIM_PWM_Start_IT>
	} else if (!buzzerState) {
		printf("buzzer OFF \r\n");
		HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_2);
	}
}
 800165a:	e009      	b.n	8001670 <buzzer+0x34>
	} else if (!buzzerState) {
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d106      	bne.n	8001670 <buzzer+0x34>
		printf("buzzer OFF \r\n");
 8001662:	4807      	ldr	r0, [pc, #28]	@ (8001680 <buzzer+0x44>)
 8001664:	f006 feb8 	bl	80083d8 <puts>
		HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_2);
 8001668:	2104      	movs	r1, #4
 800166a:	4804      	ldr	r0, [pc, #16]	@ (800167c <buzzer+0x40>)
 800166c:	f004 fa2a 	bl	8005ac4 <HAL_TIM_PWM_Stop_IT>
}
 8001670:	bf00      	nop
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	0800bf9c 	.word	0x0800bf9c
 800167c:	200002b4 	.word	0x200002b4
 8001680:	0800bfa8 	.word	0x0800bfa8

08001684 <motor>:

void motor(uint8_t motorState) {
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
	if (motorState) {
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d007      	beq.n	80016a4 <motor+0x20>
		HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8001694:	2100      	movs	r1, #0
 8001696:	4809      	ldr	r0, [pc, #36]	@ (80016bc <motor+0x38>)
 8001698:	f004 f932 	bl	8005900 <HAL_TIM_PWM_Start_IT>
		printf("Motor ON \r\n");
 800169c:	4808      	ldr	r0, [pc, #32]	@ (80016c0 <motor+0x3c>)
 800169e:	f006 fe9b 	bl	80083d8 <puts>
	} else {
		HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
		printf("Motor OFF \r\n");
	}
}
 80016a2:	e006      	b.n	80016b2 <motor+0x2e>
		HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 80016a4:	2100      	movs	r1, #0
 80016a6:	4805      	ldr	r0, [pc, #20]	@ (80016bc <motor+0x38>)
 80016a8:	f004 fa0c 	bl	8005ac4 <HAL_TIM_PWM_Stop_IT>
		printf("Motor OFF \r\n");
 80016ac:	4805      	ldr	r0, [pc, #20]	@ (80016c4 <motor+0x40>)
 80016ae:	f006 fe93 	bl	80083d8 <puts>
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200002b4 	.word	0x200002b4
 80016c0:	0800bfb8 	.word	0x0800bfb8
 80016c4:	0800bfc4 	.word	0x0800bfc4

080016c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016c8:	b590      	push	{r4, r7, lr}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	/* Initialize mems driver interface */
	dev_ctx.write_reg = platform_write;
 80016ce:	4ba1      	ldr	r3, [pc, #644]	@ (8001954 <main+0x28c>)
 80016d0:	4aa1      	ldr	r2, [pc, #644]	@ (8001958 <main+0x290>)
 80016d2:	601a      	str	r2, [r3, #0]
	dev_ctx.read_reg = platform_read;
 80016d4:	4b9f      	ldr	r3, [pc, #636]	@ (8001954 <main+0x28c>)
 80016d6:	4aa1      	ldr	r2, [pc, #644]	@ (800195c <main+0x294>)
 80016d8:	605a      	str	r2, [r3, #4]
	dev_ctx.handle = &hi2c1;
 80016da:	4b9e      	ldr	r3, [pc, #632]	@ (8001954 <main+0x28c>)
 80016dc:	4aa0      	ldr	r2, [pc, #640]	@ (8001960 <main+0x298>)
 80016de:	60da      	str	r2, [r3, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016e0:	f001 f889 	bl	80027f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016e4:	f000 f974 	bl	80019d0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	iks01a3_i2c_stuck_quirk();
 80016e8:	f000 fd20 	bl	800212c <iks01a3_i2c_stuck_quirk>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016ec:	f000 fb4a 	bl	8001d84 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80016f0:	f000 fb1e 	bl	8001d30 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80016f4:	f000 fa34 	bl	8001b60 <MX_I2C1_Init>
  MX_TIM3_Init();
 80016f8:	f000 fa60 	bl	8001bbc <MX_TIM3_Init>
  MX_TIM6_Init();
 80016fc:	f000 fae2 	bl	8001cc4 <MX_TIM6_Init>
  MX_ADC_Init();
 8001700:	f000 f9b4 	bl	8001a6c <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
	KIN1_InitCycleCounter();
 8001704:	4b97      	ldr	r3, [pc, #604]	@ (8001964 <main+0x29c>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a96      	ldr	r2, [pc, #600]	@ (8001964 <main+0x29c>)
 800170a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800170e:	6013      	str	r3, [r2, #0]
	KIN1_EnableCycleCounter();
 8001710:	4b95      	ldr	r3, [pc, #596]	@ (8001968 <main+0x2a0>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a94      	ldr	r2, [pc, #592]	@ (8001968 <main+0x2a0>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(&htim3);
 800171c:	4893      	ldr	r0, [pc, #588]	@ (800196c <main+0x2a4>)
 800171e:	f004 f82f 	bl	8005780 <HAL_TIM_Base_Start_IT>
	printf("FINAL Timer 3 enabled\r\n");
 8001722:	4893      	ldr	r0, [pc, #588]	@ (8001970 <main+0x2a8>)
 8001724:	f006 fe58 	bl	80083d8 <puts>

	lis2dw12_initialize();
 8001728:	f000 fca4 	bl	8002074 <lis2dw12_initialize>
	if (NEAI_MODE) {
		neai_state = neai_classification_init(knowledge);
 800172c:	4891      	ldr	r0, [pc, #580]	@ (8001974 <main+0x2ac>)
 800172e:	f005 fbf5 	bl	8006f1c <neai_classification_init>
 8001732:	4603      	mov	r3, r0
 8001734:	461a      	mov	r2, r3
 8001736:	4b90      	ldr	r3, [pc, #576]	@ (8001978 <main+0x2b0>)
 8001738:	701a      	strb	r2, [r3, #0]
		printf("Initialize NEAI library. NEAI init return: %d.\n", neai_state);
 800173a:	4b8f      	ldr	r3, [pc, #572]	@ (8001978 <main+0x2b0>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	4619      	mov	r1, r3
 8001740:	488e      	ldr	r0, [pc, #568]	@ (800197c <main+0x2b4>)
 8001742:	f006 fde1 	bl	8008308 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		if (drdy) {
 8001746:	4b8e      	ldr	r3, [pc, #568]	@ (8001980 <main+0x2b8>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0fa      	beq.n	8001746 <main+0x7e>
			/* Reset data ready condition */
			drdy = 0;
 8001750:	4b8b      	ldr	r3, [pc, #556]	@ (8001980 <main+0x2b8>)
 8001752:	2200      	movs	r2, #0
 8001754:	701a      	strb	r2, [r3, #0]
			/* Read acceleration data */
			memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8001756:	2206      	movs	r2, #6
 8001758:	2100      	movs	r1, #0
 800175a:	488a      	ldr	r0, [pc, #552]	@ (8001984 <main+0x2bc>)
 800175c:	f006 ff3e 	bl	80085dc <memset>
			lis2dw12_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 8001760:	4988      	ldr	r1, [pc, #544]	@ (8001984 <main+0x2bc>)
 8001762:	487c      	ldr	r0, [pc, #496]	@ (8001954 <main+0x28c>)
 8001764:	f005 fad5 	bl	8006d12 <lis2dw12_acceleration_raw_get>
			for (uint8_t i = 0; i < AXIS; i++) {
 8001768:	2300      	movs	r3, #0
 800176a:	71fb      	strb	r3, [r7, #7]
 800176c:	e015      	b.n	800179a <main+0xd2>
				neai_buffer[(AXIS * drdy_counter) + i] =
						lis2dw12_convert_data_to_mg(data_raw_acceleration[i]);
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	4a84      	ldr	r2, [pc, #528]	@ (8001984 <main+0x2bc>)
 8001772:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
				neai_buffer[(AXIS * drdy_counter) + i] =
 8001776:	4b84      	ldr	r3, [pc, #528]	@ (8001988 <main+0x2c0>)
 8001778:	881b      	ldrh	r3, [r3, #0]
 800177a:	461a      	mov	r2, r3
 800177c:	4613      	mov	r3, r2
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	441a      	add	r2, r3
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	18d4      	adds	r4, r2, r3
						lis2dw12_convert_data_to_mg(data_raw_acceleration[i]);
 8001786:	4608      	mov	r0, r1
 8001788:	f000 fcbc 	bl	8002104 <lis2dw12_convert_data_to_mg>
 800178c:	4603      	mov	r3, r0
				neai_buffer[(AXIS * drdy_counter) + i] =
 800178e:	4a7f      	ldr	r2, [pc, #508]	@ (800198c <main+0x2c4>)
 8001790:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			for (uint8_t i = 0; i < AXIS; i++) {
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	3301      	adds	r3, #1
 8001798:	71fb      	strb	r3, [r7, #7]
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	2b02      	cmp	r3, #2
 800179e:	d9e6      	bls.n	800176e <main+0xa6>
			}
			drdy_counter++;
 80017a0:	4b79      	ldr	r3, [pc, #484]	@ (8001988 <main+0x2c0>)
 80017a2:	881b      	ldrh	r3, [r3, #0]
 80017a4:	3301      	adds	r3, #1
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	4b77      	ldr	r3, [pc, #476]	@ (8001988 <main+0x2c0>)
 80017aa:	801a      	strh	r2, [r3, #0]
			if (drdy_counter >= SAMPLES) {
 80017ac:	4b76      	ldr	r3, [pc, #472]	@ (8001988 <main+0x2c0>)
 80017ae:	881b      	ldrh	r3, [r3, #0]
 80017b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80017b2:	d9c8      	bls.n	8001746 <main+0x7e>
				/* Set Output Data Rate */
				lis2dw12_data_rate_set(&dev_ctx, LIS2DW12_XL_ODR_OFF);
 80017b4:	2100      	movs	r1, #0
 80017b6:	4867      	ldr	r0, [pc, #412]	@ (8001954 <main+0x28c>)
 80017b8:	f005 fa1a 	bl	8006bf0 <lis2dw12_data_rate_set>
#if NEAI_MODE
				neai_state = neai_classification(neai_buffer,
 80017bc:	4a74      	ldr	r2, [pc, #464]	@ (8001990 <main+0x2c8>)
 80017be:	4975      	ldr	r1, [pc, #468]	@ (8001994 <main+0x2cc>)
 80017c0:	4872      	ldr	r0, [pc, #456]	@ (800198c <main+0x2c4>)
 80017c2:	f005 fc8b 	bl	80070dc <neai_classification>
 80017c6:	4603      	mov	r3, r0
 80017c8:	461a      	mov	r2, r3
 80017ca:	4b6b      	ldr	r3, [pc, #428]	@ (8001978 <main+0x2b0>)
 80017cc:	701a      	strb	r2, [r3, #0]
						class_output_buffer, &id_class);
				printf("Class: %s. NEAI classification return: %d.\r\n",
 80017ce:	4b70      	ldr	r3, [pc, #448]	@ (8001990 <main+0x2c8>)
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	461a      	mov	r2, r3
 80017d4:	4b70      	ldr	r3, [pc, #448]	@ (8001998 <main+0x2d0>)
 80017d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017da:	4a67      	ldr	r2, [pc, #412]	@ (8001978 <main+0x2b0>)
 80017dc:	7812      	ldrb	r2, [r2, #0]
 80017de:	4619      	mov	r1, r3
 80017e0:	486e      	ldr	r0, [pc, #440]	@ (800199c <main+0x2d4>)
 80017e2:	f006 fd91 	bl	8008308 <iprintf>
						id2class[id_class], neai_state);


				if (strcmp(id2class[id_class], "Horizontale") == 0) {
 80017e6:	4b6a      	ldr	r3, [pc, #424]	@ (8001990 <main+0x2c8>)
 80017e8:	881b      	ldrh	r3, [r3, #0]
 80017ea:	461a      	mov	r2, r3
 80017ec:	4b6a      	ldr	r3, [pc, #424]	@ (8001998 <main+0x2d0>)
 80017ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017f2:	496b      	ldr	r1, [pc, #428]	@ (80019a0 <main+0x2d8>)
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7fe fcc3 	bl	8000180 <strcmp>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d11c      	bne.n	800183a <main+0x172>

					printf("OK HORIZON.\r\n");
 8001800:	4868      	ldr	r0, [pc, #416]	@ (80019a4 <main+0x2dc>)
 8001802:	f006 fde9 	bl	80083d8 <puts>

					if (!motorOverride) {
 8001806:	4b68      	ldr	r3, [pc, #416]	@ (80019a8 <main+0x2e0>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d107      	bne.n	800181e <main+0x156>
						motorState = 1;
 800180e:	4b67      	ldr	r3, [pc, #412]	@ (80019ac <main+0x2e4>)
 8001810:	2201      	movs	r2, #1
 8001812:	701a      	strb	r2, [r3, #0]
						motor(motorState);
 8001814:	4b65      	ldr	r3, [pc, #404]	@ (80019ac <main+0x2e4>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff ff33 	bl	8001684 <motor>
					}

					if (!buzzerOverride) {
 800181e:	4b64      	ldr	r3, [pc, #400]	@ (80019b0 <main+0x2e8>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	f040 8087 	bne.w	8001936 <main+0x26e>
						buzzerState = 1;
 8001828:	4b62      	ldr	r3, [pc, #392]	@ (80019b4 <main+0x2ec>)
 800182a:	2201      	movs	r2, #1
 800182c:	701a      	strb	r2, [r3, #0]
						buzzer(buzzerState);
 800182e:	4b61      	ldr	r3, [pc, #388]	@ (80019b4 <main+0x2ec>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff ff02 	bl	800163c <buzzer>
 8001838:	e07d      	b.n	8001936 <main+0x26e>
					}

				}

				else if (strcmp(id2class[id_class], "Immobile") == 0) {
 800183a:	4b55      	ldr	r3, [pc, #340]	@ (8001990 <main+0x2c8>)
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	461a      	mov	r2, r3
 8001840:	4b55      	ldr	r3, [pc, #340]	@ (8001998 <main+0x2d0>)
 8001842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001846:	495c      	ldr	r1, [pc, #368]	@ (80019b8 <main+0x2f0>)
 8001848:	4618      	mov	r0, r3
 800184a:	f7fe fc99 	bl	8000180 <strcmp>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d11d      	bne.n	8001890 <main+0x1c8>
					printf("OK IMMOBILE.\r\n");
 8001854:	4859      	ldr	r0, [pc, #356]	@ (80019bc <main+0x2f4>)
 8001856:	f006 fdbf 	bl	80083d8 <puts>

					if (!motorOverride) {
 800185a:	4b53      	ldr	r3, [pc, #332]	@ (80019a8 <main+0x2e0>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d107      	bne.n	8001872 <main+0x1aa>
						motorState = 0;
 8001862:	4b52      	ldr	r3, [pc, #328]	@ (80019ac <main+0x2e4>)
 8001864:	2200      	movs	r2, #0
 8001866:	701a      	strb	r2, [r3, #0]
						motor(motorState);
 8001868:	4b50      	ldr	r3, [pc, #320]	@ (80019ac <main+0x2e4>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ff09 	bl	8001684 <motor>
					}

					if (!buzzerOverride) {
 8001872:	4b4f      	ldr	r3, [pc, #316]	@ (80019b0 <main+0x2e8>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d107      	bne.n	800188a <main+0x1c2>
						buzzerState = 0;
 800187a:	4b4e      	ldr	r3, [pc, #312]	@ (80019b4 <main+0x2ec>)
 800187c:	2200      	movs	r2, #0
 800187e:	701a      	strb	r2, [r3, #0]
						buzzer(buzzerState);
 8001880:	4b4c      	ldr	r3, [pc, #304]	@ (80019b4 <main+0x2ec>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fed9 	bl	800163c <buzzer>
					}

					adcFunctionXblinking();
 800188a:	f7ff fe79 	bl	8001580 <adcFunctionXblinking>
 800188e:	e052      	b.n	8001936 <main+0x26e>
				}

				else if (strcmp(id2class[id_class], "vertical") == 0) {
 8001890:	4b3f      	ldr	r3, [pc, #252]	@ (8001990 <main+0x2c8>)
 8001892:	881b      	ldrh	r3, [r3, #0]
 8001894:	461a      	mov	r2, r3
 8001896:	4b40      	ldr	r3, [pc, #256]	@ (8001998 <main+0x2d0>)
 8001898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800189c:	4948      	ldr	r1, [pc, #288]	@ (80019c0 <main+0x2f8>)
 800189e:	4618      	mov	r0, r3
 80018a0:	f7fe fc6e 	bl	8000180 <strcmp>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d11b      	bne.n	80018e2 <main+0x21a>

					printf("OK vertical.\r\n");
 80018aa:	4846      	ldr	r0, [pc, #280]	@ (80019c4 <main+0x2fc>)
 80018ac:	f006 fd94 	bl	80083d8 <puts>
					if (!motorOverride) {
 80018b0:	4b3d      	ldr	r3, [pc, #244]	@ (80019a8 <main+0x2e0>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d107      	bne.n	80018c8 <main+0x200>
						motorState = 1;
 80018b8:	4b3c      	ldr	r3, [pc, #240]	@ (80019ac <main+0x2e4>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	701a      	strb	r2, [r3, #0]
						motor(motorState);
 80018be:	4b3b      	ldr	r3, [pc, #236]	@ (80019ac <main+0x2e4>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fede 	bl	8001684 <motor>
					}

					if (!buzzerOverride) {
 80018c8:	4b39      	ldr	r3, [pc, #228]	@ (80019b0 <main+0x2e8>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d132      	bne.n	8001936 <main+0x26e>
						buzzerState = 0;
 80018d0:	4b38      	ldr	r3, [pc, #224]	@ (80019b4 <main+0x2ec>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
						buzzer(buzzerState);
 80018d6:	4b37      	ldr	r3, [pc, #220]	@ (80019b4 <main+0x2ec>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff feae 	bl	800163c <buzzer>
 80018e0:	e029      	b.n	8001936 <main+0x26e>
					}

				}

				else if (strcmp(id2class[id_class], "shake") == 0) {
 80018e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001990 <main+0x2c8>)
 80018e4:	881b      	ldrh	r3, [r3, #0]
 80018e6:	461a      	mov	r2, r3
 80018e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001998 <main+0x2d0>)
 80018ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ee:	4936      	ldr	r1, [pc, #216]	@ (80019c8 <main+0x300>)
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fc45 	bl	8000180 <strcmp>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d11c      	bne.n	8001936 <main+0x26e>

					printf("OK shake.\r\n");
 80018fc:	4833      	ldr	r0, [pc, #204]	@ (80019cc <main+0x304>)
 80018fe:	f006 fd6b 	bl	80083d8 <puts>
					if (!motorOverride) {
 8001902:	4b29      	ldr	r3, [pc, #164]	@ (80019a8 <main+0x2e0>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d107      	bne.n	800191a <main+0x252>
						motorState = 0;
 800190a:	4b28      	ldr	r3, [pc, #160]	@ (80019ac <main+0x2e4>)
 800190c:	2200      	movs	r2, #0
 800190e:	701a      	strb	r2, [r3, #0]
						motor(motorState);
 8001910:	4b26      	ldr	r3, [pc, #152]	@ (80019ac <main+0x2e4>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff feb5 	bl	8001684 <motor>
					}

					if (!buzzerOverride) {
 800191a:	4b25      	ldr	r3, [pc, #148]	@ (80019b0 <main+0x2e8>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d107      	bne.n	8001932 <main+0x26a>
						buzzerState = 1;
 8001922:	4b24      	ldr	r3, [pc, #144]	@ (80019b4 <main+0x2ec>)
 8001924:	2201      	movs	r2, #1
 8001926:	701a      	strb	r2, [r3, #0]
						buzzer(buzzerState);
 8001928:	4b22      	ldr	r3, [pc, #136]	@ (80019b4 <main+0x2ec>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fe85 	bl	800163c <buzzer>
					}
					switchLedAll();
 8001932:	f000 fae1 	bl	8001ef8 <switchLedAll>
          printf("%.3f ", neai_buffer[i]);
        }
        printf("\n");
#endif
				/* Reset drdy_counter in order to get a new buffer */
				drdy_counter = 0;
 8001936:	4b14      	ldr	r3, [pc, #80]	@ (8001988 <main+0x2c0>)
 8001938:	2200      	movs	r2, #0
 800193a:	801a      	strh	r2, [r3, #0]
				/* Clean neai buffer */
				memset(neai_buffer, 0x00, AXIS * SAMPLES * sizeof(float));
 800193c:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8001940:	2100      	movs	r1, #0
 8001942:	4812      	ldr	r0, [pc, #72]	@ (800198c <main+0x2c4>)
 8001944:	f006 fe4a 	bl	80085dc <memset>
				/* Set Output Data Rate */
				lis2dw12_data_rate_set(&dev_ctx, ACCELEROMETER_ODR);
 8001948:	2107      	movs	r1, #7
 800194a:	4802      	ldr	r0, [pc, #8]	@ (8001954 <main+0x28c>)
 800194c:	f005 f950 	bl	8006bf0 <lis2dw12_data_rate_set>
		if (drdy) {
 8001950:	e6f9      	b.n	8001746 <main+0x7e>
 8001952:	bf00      	nop
 8001954:	20000998 	.word	0x20000998
 8001958:	08002001 	.word	0x08002001
 800195c:	0800203b 	.word	0x0800203b
 8001960:	20000260 	.word	0x20000260
 8001964:	e000edfc 	.word	0xe000edfc
 8001968:	e0001000 	.word	0xe0001000
 800196c:	200002b4 	.word	0x200002b4
 8001970:	0800bfd0 	.word	0x0800bfd0
 8001974:	0800c0dc 	.word	0x0800c0dc
 8001978:	20000390 	.word	0x20000390
 800197c:	0800bfe8 	.word	0x0800bfe8
 8001980:	20000394 	.word	0x20000394
 8001984:	20000388 	.word	0x20000388
 8001988:	20000396 	.word	0x20000396
 800198c:	20000398 	.word	0x20000398
 8001990:	20000392 	.word	0x20000392
 8001994:	200009a8 	.word	0x200009a8
 8001998:	20000000 	.word	0x20000000
 800199c:	0800c018 	.word	0x0800c018
 80019a0:	0800bf78 	.word	0x0800bf78
 80019a4:	0800c048 	.word	0x0800c048
 80019a8:	2000037d 	.word	0x2000037d
 80019ac:	2000037c 	.word	0x2000037c
 80019b0:	20000380 	.word	0x20000380
 80019b4:	2000037f 	.word	0x2000037f
 80019b8:	0800bf6c 	.word	0x0800bf6c
 80019bc:	0800c058 	.word	0x0800c058
 80019c0:	0800bf58 	.word	0x0800bf58
 80019c4:	0800c068 	.word	0x0800c068
 80019c8:	0800bf64 	.word	0x0800bf64
 80019cc:	0800c078 	.word	0x0800c078

080019d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b092      	sub	sp, #72	@ 0x48
 80019d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019d6:	f107 0314 	add.w	r3, r7, #20
 80019da:	2234      	movs	r2, #52	@ 0x34
 80019dc:	2100      	movs	r1, #0
 80019de:	4618      	mov	r0, r3
 80019e0:	f006 fdfc 	bl	80085dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019e4:	463b      	mov	r3, r7
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	605a      	str	r2, [r3, #4]
 80019ec:	609a      	str	r2, [r3, #8]
 80019ee:	60da      	str	r2, [r3, #12]
 80019f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a68 <SystemClock_Config+0x98>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 80019fa:	4a1b      	ldr	r2, [pc, #108]	@ (8001a68 <SystemClock_Config+0x98>)
 80019fc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a00:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a02:	2302      	movs	r3, #2
 8001a04:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a06:	2301      	movs	r3, #1
 8001a08:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a0a:	2310      	movs	r3, #16
 8001a0c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a12:	2300      	movs	r3, #0
 8001a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001a16:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001a1a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001a1c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8001a20:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a22:	f107 0314 	add.w	r3, r7, #20
 8001a26:	4618      	mov	r0, r3
 8001a28:	f003 f874 	bl	8004b14 <HAL_RCC_OscConfig>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001a32:	f000 fbcb 	bl	80021cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a36:	230f      	movs	r3, #15
 8001a38:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a4a:	463b      	mov	r3, r7
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f003 fb90 	bl	8005174 <HAL_RCC_ClockConfig>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001a5a:	f000 fbb7 	bl	80021cc <Error_Handler>
  }
}
 8001a5e:	bf00      	nop
 8001a60:	3748      	adds	r7, #72	@ 0x48
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40007000 	.word	0x40007000

08001a6c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08a      	sub	sp, #40	@ 0x28
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001a72:	f107 0310 	add.w	r3, r7, #16
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	60da      	str	r2, [r3, #12]
 8001a80:	611a      	str	r2, [r3, #16]
 8001a82:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001a84:	1d3b      	adds	r3, r7, #4
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001a8e:	4b31      	ldr	r3, [pc, #196]	@ (8001b54 <MX_ADC_Init+0xe8>)
 8001a90:	4a31      	ldr	r2, [pc, #196]	@ (8001b58 <MX_ADC_Init+0xec>)
 8001a92:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001a94:	4b2f      	ldr	r3, [pc, #188]	@ (8001b54 <MX_ADC_Init+0xe8>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001a9a:	4b2e      	ldr	r3, [pc, #184]	@ (8001b54 <MX_ADC_Init+0xe8>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001aa0:	4b2c      	ldr	r3, [pc, #176]	@ (8001b54 <MX_ADC_Init+0xe8>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001aa6:	4b2b      	ldr	r3, [pc, #172]	@ (8001b54 <MX_ADC_Init+0xe8>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001aac:	4b29      	ldr	r3, [pc, #164]	@ (8001b54 <MX_ADC_Init+0xe8>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001ab2:	4b28      	ldr	r3, [pc, #160]	@ (8001b54 <MX_ADC_Init+0xe8>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8001ab8:	4b26      	ldr	r3, [pc, #152]	@ (8001b54 <MX_ADC_Init+0xe8>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001abe:	4b25      	ldr	r3, [pc, #148]	@ (8001b54 <MX_ADC_Init+0xe8>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001ac4:	4b23      	ldr	r3, [pc, #140]	@ (8001b54 <MX_ADC_Init+0xe8>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc.Init.NbrOfConversion = 1;
 8001acc:	4b21      	ldr	r3, [pc, #132]	@ (8001b54 <MX_ADC_Init+0xe8>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001ad2:	4b20      	ldr	r3, [pc, #128]	@ (8001b54 <MX_ADC_Init+0xe8>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ada:	4b1e      	ldr	r3, [pc, #120]	@ (8001b54 <MX_ADC_Init+0xe8>)
 8001adc:	2210      	movs	r2, #16
 8001ade:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ae0:	4b1c      	ldr	r3, [pc, #112]	@ (8001b54 <MX_ADC_Init+0xe8>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001ae6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b54 <MX_ADC_Init+0xe8>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001aee:	4819      	ldr	r0, [pc, #100]	@ (8001b54 <MX_ADC_Init+0xe8>)
 8001af0:	f000 ff12 	bl	8002918 <HAL_ADC_Init>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_ADC_Init+0x92>
  {
    Error_Handler();
 8001afa:	f000 fb67 	bl	80021cc <Error_Handler>
  }

  /** Configure the analog watchdog
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8001afe:	4b17      	ldr	r3, [pc, #92]	@ (8001b5c <MX_ADC_Init+0xf0>)
 8001b00:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.Channel = ADC_CHANNEL_0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.ITMode = DISABLE;
 8001b06:	2300      	movs	r3, #0
 8001b08:	763b      	strb	r3, [r7, #24]
  AnalogWDGConfig.HighThreshold = 3724;
 8001b0a:	f640 638c 	movw	r3, #3724	@ 0xe8c
 8001b0e:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.LowThreshold = 0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_AnalogWDGConfig(&hadc, &AnalogWDGConfig) != HAL_OK)
 8001b14:	f107 0310 	add.w	r3, r7, #16
 8001b18:	4619      	mov	r1, r3
 8001b1a:	480e      	ldr	r0, [pc, #56]	@ (8001b54 <MX_ADC_Init+0xe8>)
 8001b1c:	f001 fbe0 	bl	80032e0 <HAL_ADC_AnalogWDGConfig>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8001b26:	f000 fb51 	bl	80021cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001b36:	1d3b      	adds	r3, r7, #4
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4806      	ldr	r0, [pc, #24]	@ (8001b54 <MX_ADC_Init+0xe8>)
 8001b3c:	f001 fa64 	bl	8003008 <HAL_ADC_ConfigChannel>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_ADC_Init+0xde>
  {
    Error_Handler();
 8001b46:	f000 fb41 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001b4a:	bf00      	nop
 8001b4c:	3728      	adds	r7, #40	@ 0x28
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	2000020c 	.word	0x2000020c
 8001b58:	40012400 	.word	0x40012400
 8001b5c:	00800200 	.word	0x00800200

08001b60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b64:	4b12      	ldr	r3, [pc, #72]	@ (8001bb0 <MX_I2C1_Init+0x50>)
 8001b66:	4a13      	ldr	r2, [pc, #76]	@ (8001bb4 <MX_I2C1_Init+0x54>)
 8001b68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001b6a:	4b11      	ldr	r3, [pc, #68]	@ (8001bb0 <MX_I2C1_Init+0x50>)
 8001b6c:	4a12      	ldr	r2, [pc, #72]	@ (8001bb8 <MX_I2C1_Init+0x58>)
 8001b6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b70:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb0 <MX_I2C1_Init+0x50>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b76:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb0 <MX_I2C1_Init+0x50>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb0 <MX_I2C1_Init+0x50>)
 8001b7e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b82:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b84:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb0 <MX_I2C1_Init+0x50>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b8a:	4b09      	ldr	r3, [pc, #36]	@ (8001bb0 <MX_I2C1_Init+0x50>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b90:	4b07      	ldr	r3, [pc, #28]	@ (8001bb0 <MX_I2C1_Init+0x50>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b96:	4b06      	ldr	r3, [pc, #24]	@ (8001bb0 <MX_I2C1_Init+0x50>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b9c:	4804      	ldr	r0, [pc, #16]	@ (8001bb0 <MX_I2C1_Init+0x50>)
 8001b9e:	f001 ff95 	bl	8003acc <HAL_I2C_Init>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ba8:	f000 fb10 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000260 	.word	0x20000260
 8001bb4:	40005400 	.word	0x40005400
 8001bb8:	00061a80 	.word	0x00061a80

08001bbc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08a      	sub	sp, #40	@ 0x28
 8001bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bc2:	f107 0318 	add.w	r3, r7, #24
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]
 8001bcc:	609a      	str	r2, [r3, #8]
 8001bce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd0:	f107 0310 	add.w	r3, r7, #16
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bda:	463b      	mov	r3, r7
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001be6:	4b35      	ldr	r3, [pc, #212]	@ (8001cbc <MX_TIM3_Init+0x100>)
 8001be8:	4a35      	ldr	r2, [pc, #212]	@ (8001cc0 <MX_TIM3_Init+0x104>)
 8001bea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31999;
 8001bec:	4b33      	ldr	r3, [pc, #204]	@ (8001cbc <MX_TIM3_Init+0x100>)
 8001bee:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 8001bf2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf4:	4b31      	ldr	r3, [pc, #196]	@ (8001cbc <MX_TIM3_Init+0x100>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4;
 8001bfa:	4b30      	ldr	r3, [pc, #192]	@ (8001cbc <MX_TIM3_Init+0x100>)
 8001bfc:	2204      	movs	r2, #4
 8001bfe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c00:	4b2e      	ldr	r3, [pc, #184]	@ (8001cbc <MX_TIM3_Init+0x100>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c06:	4b2d      	ldr	r3, [pc, #180]	@ (8001cbc <MX_TIM3_Init+0x100>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c0c:	482b      	ldr	r0, [pc, #172]	@ (8001cbc <MX_TIM3_Init+0x100>)
 8001c0e:	f003 fd77 	bl	8005700 <HAL_TIM_Base_Init>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001c18:	f000 fad8 	bl	80021cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c20:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c22:	f107 0318 	add.w	r3, r7, #24
 8001c26:	4619      	mov	r1, r3
 8001c28:	4824      	ldr	r0, [pc, #144]	@ (8001cbc <MX_TIM3_Init+0x100>)
 8001c2a:	f004 f963 	bl	8005ef4 <HAL_TIM_ConfigClockSource>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001c34:	f000 faca 	bl	80021cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c38:	4820      	ldr	r0, [pc, #128]	@ (8001cbc <MX_TIM3_Init+0x100>)
 8001c3a:	f003 fe19 	bl	8005870 <HAL_TIM_PWM_Init>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001c44:	f000 fac2 	bl	80021cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c50:	f107 0310 	add.w	r3, r7, #16
 8001c54:	4619      	mov	r1, r3
 8001c56:	4819      	ldr	r0, [pc, #100]	@ (8001cbc <MX_TIM3_Init+0x100>)
 8001c58:	f004 fc5e 	bl	8006518 <HAL_TIMEx_MasterConfigSynchronization>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001c62:	f000 fab3 	bl	80021cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c66:	2360      	movs	r3, #96	@ 0x60
 8001c68:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8001c6a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001c6e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c70:	2300      	movs	r3, #0
 8001c72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c78:	463b      	mov	r3, r7
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	480f      	ldr	r0, [pc, #60]	@ (8001cbc <MX_TIM3_Init+0x100>)
 8001c80:	f004 f876 	bl	8005d70 <HAL_TIM_PWM_ConfigChannel>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8001c8a:	f000 fa9f 	bl	80021cc <Error_Handler>
  }
  sConfigOC.Pulse = 1;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001c92:	2302      	movs	r3, #2
 8001c94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c96:	463b      	mov	r3, r7
 8001c98:	2204      	movs	r2, #4
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4807      	ldr	r0, [pc, #28]	@ (8001cbc <MX_TIM3_Init+0x100>)
 8001c9e:	f004 f867 	bl	8005d70 <HAL_TIM_PWM_ConfigChannel>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8001ca8:	f000 fa90 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001cac:	4803      	ldr	r0, [pc, #12]	@ (8001cbc <MX_TIM3_Init+0x100>)
 8001cae:	f000 fb91 	bl	80023d4 <HAL_TIM_MspPostInit>

}
 8001cb2:	bf00      	nop
 8001cb4:	3728      	adds	r7, #40	@ 0x28
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	200002b4 	.word	0x200002b4
 8001cc0:	40000400 	.word	0x40000400

08001cc4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cca:	463b      	mov	r3, r7
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001cd2:	4b15      	ldr	r3, [pc, #84]	@ (8001d28 <MX_TIM6_Init+0x64>)
 8001cd4:	4a15      	ldr	r2, [pc, #84]	@ (8001d2c <MX_TIM6_Init+0x68>)
 8001cd6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 31999;
 8001cd8:	4b13      	ldr	r3, [pc, #76]	@ (8001d28 <MX_TIM6_Init+0x64>)
 8001cda:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 8001cde:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce0:	4b11      	ldr	r3, [pc, #68]	@ (8001d28 <MX_TIM6_Init+0x64>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 199;
 8001ce6:	4b10      	ldr	r3, [pc, #64]	@ (8001d28 <MX_TIM6_Init+0x64>)
 8001ce8:	22c7      	movs	r2, #199	@ 0xc7
 8001cea:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cec:	4b0e      	ldr	r3, [pc, #56]	@ (8001d28 <MX_TIM6_Init+0x64>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001cf2:	480d      	ldr	r0, [pc, #52]	@ (8001d28 <MX_TIM6_Init+0x64>)
 8001cf4:	f003 fd04 	bl	8005700 <HAL_TIM_Base_Init>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001cfe:	f000 fa65 	bl	80021cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d02:	2300      	movs	r3, #0
 8001d04:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d06:	2300      	movs	r3, #0
 8001d08:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001d0a:	463b      	mov	r3, r7
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4806      	ldr	r0, [pc, #24]	@ (8001d28 <MX_TIM6_Init+0x64>)
 8001d10:	f004 fc02 	bl	8006518 <HAL_TIMEx_MasterConfigSynchronization>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001d1a:	f000 fa57 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	200002f4 	.word	0x200002f4
 8001d2c:	40001000 	.word	0x40001000

08001d30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d34:	4b11      	ldr	r3, [pc, #68]	@ (8001d7c <MX_USART2_UART_Init+0x4c>)
 8001d36:	4a12      	ldr	r2, [pc, #72]	@ (8001d80 <MX_USART2_UART_Init+0x50>)
 8001d38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d3a:	4b10      	ldr	r3, [pc, #64]	@ (8001d7c <MX_USART2_UART_Init+0x4c>)
 8001d3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d42:	4b0e      	ldr	r3, [pc, #56]	@ (8001d7c <MX_USART2_UART_Init+0x4c>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d48:	4b0c      	ldr	r3, [pc, #48]	@ (8001d7c <MX_USART2_UART_Init+0x4c>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d7c <MX_USART2_UART_Init+0x4c>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d54:	4b09      	ldr	r3, [pc, #36]	@ (8001d7c <MX_USART2_UART_Init+0x4c>)
 8001d56:	220c      	movs	r2, #12
 8001d58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d5a:	4b08      	ldr	r3, [pc, #32]	@ (8001d7c <MX_USART2_UART_Init+0x4c>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d60:	4b06      	ldr	r3, [pc, #24]	@ (8001d7c <MX_USART2_UART_Init+0x4c>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d66:	4805      	ldr	r0, [pc, #20]	@ (8001d7c <MX_USART2_UART_Init+0x4c>)
 8001d68:	f004 fc34 	bl	80065d4 <HAL_UART_Init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d72:	f000 fa2b 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20000334 	.word	0x20000334
 8001d80:	40004400 	.word	0x40004400

08001d84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b088      	sub	sp, #32
 8001d88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8a:	f107 030c 	add.w	r3, r7, #12
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	605a      	str	r2, [r3, #4]
 8001d94:	609a      	str	r2, [r3, #8]
 8001d96:	60da      	str	r2, [r3, #12]
 8001d98:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d9a:	4b48      	ldr	r3, [pc, #288]	@ (8001ebc <MX_GPIO_Init+0x138>)
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	4a47      	ldr	r2, [pc, #284]	@ (8001ebc <MX_GPIO_Init+0x138>)
 8001da0:	f043 0304 	orr.w	r3, r3, #4
 8001da4:	61d3      	str	r3, [r2, #28]
 8001da6:	4b45      	ldr	r3, [pc, #276]	@ (8001ebc <MX_GPIO_Init+0x138>)
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	f003 0304 	and.w	r3, r3, #4
 8001dae:	60bb      	str	r3, [r7, #8]
 8001db0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db2:	4b42      	ldr	r3, [pc, #264]	@ (8001ebc <MX_GPIO_Init+0x138>)
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	4a41      	ldr	r2, [pc, #260]	@ (8001ebc <MX_GPIO_Init+0x138>)
 8001db8:	f043 0301 	orr.w	r3, r3, #1
 8001dbc:	61d3      	str	r3, [r2, #28]
 8001dbe:	4b3f      	ldr	r3, [pc, #252]	@ (8001ebc <MX_GPIO_Init+0x138>)
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	607b      	str	r3, [r7, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dca:	4b3c      	ldr	r3, [pc, #240]	@ (8001ebc <MX_GPIO_Init+0x138>)
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	4a3b      	ldr	r2, [pc, #236]	@ (8001ebc <MX_GPIO_Init+0x138>)
 8001dd0:	f043 0302 	orr.w	r3, r3, #2
 8001dd4:	61d3      	str	r3, [r2, #28]
 8001dd6:	4b39      	ldr	r3, [pc, #228]	@ (8001ebc <MX_GPIO_Init+0x138>)
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	603b      	str	r3, [r7, #0]
 8001de0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001de2:	2200      	movs	r2, #0
 8001de4:	2120      	movs	r1, #32
 8001de6:	4836      	ldr	r0, [pc, #216]	@ (8001ec0 <MX_GPIO_Init+0x13c>)
 8001de8:	f001 fe26 	bl	8003a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L0_Pin|L1_Pin|L2_Pin|L3_Pin, GPIO_PIN_RESET);
 8001dec:	2200      	movs	r2, #0
 8001dee:	f640 4106 	movw	r1, #3078	@ 0xc06
 8001df2:	4834      	ldr	r0, [pc, #208]	@ (8001ec4 <MX_GPIO_Init+0x140>)
 8001df4:	f001 fe20 	bl	8003a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin BP3_OnOffMotor_Pin */
  GPIO_InitStruct.Pin = B1_Pin|BP3_OnOffMotor_Pin;
 8001df8:	f44f 5301 	mov.w	r3, #8256	@ 0x2040
 8001dfc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dfe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001e02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e08:	f107 030c 	add.w	r3, r7, #12
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	482e      	ldr	r0, [pc, #184]	@ (8001ec8 <MX_GPIO_Init+0x144>)
 8001e10:	f001 fc82 	bl	8003718 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001e14:	2320      	movs	r3, #32
 8001e16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e20:	2300      	movs	r3, #0
 8001e22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001e24:	f107 030c 	add.w	r3, r7, #12
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4825      	ldr	r0, [pc, #148]	@ (8001ec0 <MX_GPIO_Init+0x13c>)
 8001e2c:	f001 fc74 	bl	8003718 <HAL_GPIO_Init>

  /*Configure GPIO pin : LIS2DW12_INT_Pin */
  GPIO_InitStruct.Pin = LIS2DW12_INT_Pin;
 8001e30:	2301      	movs	r3, #1
 8001e32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e34:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001e38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LIS2DW12_INT_GPIO_Port, &GPIO_InitStruct);
 8001e3e:	f107 030c 	add.w	r3, r7, #12
 8001e42:	4619      	mov	r1, r3
 8001e44:	481f      	ldr	r0, [pc, #124]	@ (8001ec4 <MX_GPIO_Init+0x140>)
 8001e46:	f001 fc67 	bl	8003718 <HAL_GPIO_Init>

  /*Configure GPIO pins : L0_Pin L1_Pin L2_Pin L3_Pin */
  GPIO_InitStruct.Pin = L0_Pin|L1_Pin|L2_Pin|L3_Pin;
 8001e4a:	f640 4306 	movw	r3, #3078	@ 0xc06
 8001e4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e50:	2301      	movs	r3, #1
 8001e52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e5c:	f107 030c 	add.w	r3, r7, #12
 8001e60:	4619      	mov	r1, r3
 8001e62:	4818      	ldr	r0, [pc, #96]	@ (8001ec4 <MX_GPIO_Init+0x140>)
 8001e64:	f001 fc58 	bl	8003718 <HAL_GPIO_Init>

  /*Configure GPIO pin : BP2_onOffBuzzer_Pin */
  GPIO_InitStruct.Pin = BP2_onOffBuzzer_Pin;
 8001e68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e6e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001e72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BP2_onOffBuzzer_GPIO_Port, &GPIO_InitStruct);
 8001e78:	f107 030c 	add.w	r3, r7, #12
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4810      	ldr	r0, [pc, #64]	@ (8001ec0 <MX_GPIO_Init+0x13c>)
 8001e80:	f001 fc4a 	bl	8003718 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001e84:	2200      	movs	r2, #0
 8001e86:	2100      	movs	r1, #0
 8001e88:	2006      	movs	r0, #6
 8001e8a:	f001 fc0e 	bl	80036aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001e8e:	2006      	movs	r0, #6
 8001e90:	f001 fc27 	bl	80036e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001e94:	2200      	movs	r2, #0
 8001e96:	2100      	movs	r1, #0
 8001e98:	2017      	movs	r0, #23
 8001e9a:	f001 fc06 	bl	80036aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001e9e:	2017      	movs	r0, #23
 8001ea0:	f001 fc1f 	bl	80036e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	2028      	movs	r0, #40	@ 0x28
 8001eaa:	f001 fbfe 	bl	80036aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001eae:	2028      	movs	r0, #40	@ 0x28
 8001eb0:	f001 fc17 	bl	80036e2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001eb4:	bf00      	nop
 8001eb6:	3720      	adds	r7, #32
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40020000 	.word	0x40020000
 8001ec4:	40020400 	.word	0x40020400
 8001ec8:	40020800 	.word	0x40020800

08001ecc <__io_putchar>:
/**
 * @brief  Redirecting stdout to USART2 which is connected on the STLINK port
 * @retval
 * @param
 */
int __io_putchar(int ch) {
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, &*c, 1, 10);
 8001eda:	f107 010c 	add.w	r1, r7, #12
 8001ede:	230a      	movs	r3, #10
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	4804      	ldr	r0, [pc, #16]	@ (8001ef4 <__io_putchar+0x28>)
 8001ee4:	f004 fbc6 	bl	8006674 <HAL_UART_Transmit>
	return ch;
 8001ee8:	687b      	ldr	r3, [r7, #4]
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000334 	.word	0x20000334

08001ef8 <switchLedAll>:

void switchLedAll(void) {
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(L0_GPIO_Port, L0_Pin);
 8001efc:	2102      	movs	r1, #2
 8001efe:	4804      	ldr	r0, [pc, #16]	@ (8001f10 <switchLedAll+0x18>)
 8001f00:	f001 fdb2 	bl	8003a68 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(L1_GPIO_Port, L1_Pin);
 8001f04:	2104      	movs	r1, #4
 8001f06:	4802      	ldr	r0, [pc, #8]	@ (8001f10 <switchLedAll+0x18>)
 8001f08:	f001 fdae 	bl	8003a68 <HAL_GPIO_TogglePin>
}
 8001f0c:	bf00      	nop
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40020400 	.word	0x40020400

08001f14 <HAL_GPIO_EXTI_Callback>:
 * @brief  EXTI line rising detection callback.
 * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
 * @retval None
 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BP2_onOffBuzzer_Pin) {
 8001f1e:	88fb      	ldrh	r3, [r7, #6]
 8001f20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f24:	d125      	bne.n	8001f72 <HAL_GPIO_EXTI_Callback+0x5e>
		if (!debound_flag) {
 8001f26:	4b2d      	ldr	r3, [pc, #180]	@ (8001fdc <HAL_GPIO_EXTI_Callback+0xc8>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d121      	bne.n	8001f72 <HAL_GPIO_EXTI_Callback+0x5e>
			debound_flag = 1;
 8001f2e:	4b2b      	ldr	r3, [pc, #172]	@ (8001fdc <HAL_GPIO_EXTI_Callback+0xc8>)
 8001f30:	2201      	movs	r2, #1
 8001f32:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim6, 0);
 8001f34:	4b2a      	ldr	r3, [pc, #168]	@ (8001fe0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	625a      	str	r2, [r3, #36]	@ 0x24
			HAL_TIM_Base_Start_IT(&htim6);
 8001f3c:	4828      	ldr	r0, [pc, #160]	@ (8001fe0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001f3e:	f003 fc1f 	bl	8005780 <HAL_TIM_Base_Start_IT>

			buzzerOverride = 1;               // activer override
 8001f42:	4b28      	ldr	r3, [pc, #160]	@ (8001fe4 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	701a      	strb	r2, [r3, #0]
			buzzerState = !buzzerState;       // inverser l'état
 8001f48:	4b27      	ldr	r3, [pc, #156]	@ (8001fe8 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	bf0c      	ite	eq
 8001f50:	2301      	moveq	r3, #1
 8001f52:	2300      	movne	r3, #0
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	461a      	mov	r2, r3
 8001f58:	4b23      	ldr	r3, [pc, #140]	@ (8001fe8 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001f5a:	701a      	strb	r2, [r3, #0]
			buzzer(buzzerState);
 8001f5c:	4b22      	ldr	r3, [pc, #136]	@ (8001fe8 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff fb6b 	bl	800163c <buzzer>
			printf("!!!! Buzzer toggled via button: %d !!!!\r\n", buzzerState);
 8001f66:	4b20      	ldr	r3, [pc, #128]	@ (8001fe8 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	481f      	ldr	r0, [pc, #124]	@ (8001fec <HAL_GPIO_EXTI_Callback+0xd8>)
 8001f6e:	f006 f9cb 	bl	8008308 <iprintf>
		}
	}

	if (GPIO_Pin == BP3_OnOffMotor_Pin) {
 8001f72:	88fb      	ldrh	r3, [r7, #6]
 8001f74:	2b40      	cmp	r3, #64	@ 0x40
 8001f76:	d125      	bne.n	8001fc4 <HAL_GPIO_EXTI_Callback+0xb0>
		if (!debound_flag) {
 8001f78:	4b18      	ldr	r3, [pc, #96]	@ (8001fdc <HAL_GPIO_EXTI_Callback+0xc8>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d121      	bne.n	8001fc4 <HAL_GPIO_EXTI_Callback+0xb0>
			debound_flag = 1;
 8001f80:	4b16      	ldr	r3, [pc, #88]	@ (8001fdc <HAL_GPIO_EXTI_Callback+0xc8>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim6, 0);
 8001f86:	4b16      	ldr	r3, [pc, #88]	@ (8001fe0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	625a      	str	r2, [r3, #36]	@ 0x24
			HAL_TIM_Base_Start_IT(&htim6);
 8001f8e:	4814      	ldr	r0, [pc, #80]	@ (8001fe0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001f90:	f003 fbf6 	bl	8005780 <HAL_TIM_Base_Start_IT>

			motorOverride = 1;
 8001f94:	4b16      	ldr	r3, [pc, #88]	@ (8001ff0 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	701a      	strb	r2, [r3, #0]
			motorState = !motorState;
 8001f9a:	4b16      	ldr	r3, [pc, #88]	@ (8001ff4 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	bf0c      	ite	eq
 8001fa2:	2301      	moveq	r3, #1
 8001fa4:	2300      	movne	r3, #0
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4b12      	ldr	r3, [pc, #72]	@ (8001ff4 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001fac:	701a      	strb	r2, [r3, #0]
			motor(motorState);
 8001fae:	4b11      	ldr	r3, [pc, #68]	@ (8001ff4 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff fb66 	bl	8001684 <motor>
			printf("!!!! Motor toggled via button: %d!!!! \r\n", motorState);
 8001fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff4 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	480e      	ldr	r0, [pc, #56]	@ (8001ff8 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001fc0:	f006 f9a2 	bl	8008308 <iprintf>
		}
	}

	switch (GPIO_Pin) {
 8001fc4:	88fb      	ldrh	r3, [r7, #6]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d103      	bne.n	8001fd2 <HAL_GPIO_EXTI_Callback+0xbe>
	case LIS2DW12_INT_Pin:
		drdy = 1;
 8001fca:	4b0c      	ldr	r3, [pc, #48]	@ (8001ffc <HAL_GPIO_EXTI_Callback+0xe8>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	701a      	strb	r2, [r3, #0]
		break;
 8001fd0:	bf00      	nop
	}
}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	2000037e 	.word	0x2000037e
 8001fe0:	200002f4 	.word	0x200002f4
 8001fe4:	20000380 	.word	0x20000380
 8001fe8:	2000037f 	.word	0x2000037f
 8001fec:	0800c084 	.word	0x0800c084
 8001ff0:	2000037d 	.word	0x2000037d
 8001ff4:	2000037c 	.word	0x2000037c
 8001ff8:	0800c0b0 	.word	0x0800c0b0
 8001ffc:	20000394 	.word	0x20000394

08002000 <platform_write>:
 * @param  bufp      pointer to data to write in register reg
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
		uint16_t len) {
 8002000:	b580      	push	{r7, lr}
 8002002:	b088      	sub	sp, #32
 8002004:	af04      	add	r7, sp, #16
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	607a      	str	r2, [r7, #4]
 800200a:	461a      	mov	r2, r3
 800200c:	460b      	mov	r3, r1
 800200e:	72fb      	strb	r3, [r7, #11]
 8002010:	4613      	mov	r3, r2
 8002012:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Mem_Write(handle, LIS2DW12_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT,
 8002014:	7afb      	ldrb	r3, [r7, #11]
 8002016:	b29a      	uxth	r2, r3
 8002018:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800201c:	9302      	str	r3, [sp, #8]
 800201e:	893b      	ldrh	r3, [r7, #8]
 8002020:	9301      	str	r3, [sp, #4]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	2301      	movs	r3, #1
 8002028:	2133      	movs	r1, #51	@ 0x33
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f001 fe92 	bl	8003d54 <HAL_I2C_Mem_Write>
			(uint8_t*) bufp, len, 1000);
	return 0;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <platform_read>:
 * @param  bufp      pointer to buffer that store the data read
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
		uint16_t len) {
 800203a:	b580      	push	{r7, lr}
 800203c:	b088      	sub	sp, #32
 800203e:	af04      	add	r7, sp, #16
 8002040:	60f8      	str	r0, [r7, #12]
 8002042:	607a      	str	r2, [r7, #4]
 8002044:	461a      	mov	r2, r3
 8002046:	460b      	mov	r3, r1
 8002048:	72fb      	strb	r3, [r7, #11]
 800204a:	4613      	mov	r3, r2
 800204c:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Mem_Read(handle, LIS2DW12_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT,
 800204e:	7afb      	ldrb	r3, [r7, #11]
 8002050:	b29a      	uxth	r2, r3
 8002052:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002056:	9302      	str	r3, [sp, #8]
 8002058:	893b      	ldrh	r3, [r7, #8]
 800205a:	9301      	str	r3, [sp, #4]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	9300      	str	r3, [sp, #0]
 8002060:	2301      	movs	r3, #1
 8002062:	2133      	movs	r1, #51	@ 0x33
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	f001 ff6f 	bl	8003f48 <HAL_I2C_Mem_Read>
			bufp, len, 1000);
	return 0;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <lis2dw12_initialize>:
 * @param  No
 *
 * @return No
 *
 */
static void lis2dw12_initialize() {
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
	/* Check device ID */
	whoamI = 0;
 800207a:	4b1e      	ldr	r3, [pc, #120]	@ (80020f4 <lis2dw12_initialize+0x80>)
 800207c:	2200      	movs	r2, #0
 800207e:	701a      	strb	r2, [r3, #0]

	do {
		HAL_Delay(20);
 8002080:	2014      	movs	r0, #20
 8002082:	f000 fc27 	bl	80028d4 <HAL_Delay>
		lis2dw12_device_id_get(&dev_ctx, &whoamI);
 8002086:	491b      	ldr	r1, [pc, #108]	@ (80020f4 <lis2dw12_initialize+0x80>)
 8002088:	481b      	ldr	r0, [pc, #108]	@ (80020f8 <lis2dw12_initialize+0x84>)
 800208a:	f004 fe8a 	bl	8006da2 <lis2dw12_device_id_get>
	} while (whoamI != LIS2DW12_ID);
 800208e:	4b19      	ldr	r3, [pc, #100]	@ (80020f4 <lis2dw12_initialize+0x80>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b44      	cmp	r3, #68	@ 0x44
 8002094:	d1f4      	bne.n	8002080 <lis2dw12_initialize+0xc>

	/* Restore default configuration */
	lis2dw12_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8002096:	2101      	movs	r1, #1
 8002098:	4817      	ldr	r0, [pc, #92]	@ (80020f8 <lis2dw12_initialize+0x84>)
 800209a:	f004 fe93 	bl	8006dc4 <lis2dw12_reset_set>

	do {
		lis2dw12_reset_get(&dev_ctx, &rst);
 800209e:	4917      	ldr	r1, [pc, #92]	@ (80020fc <lis2dw12_initialize+0x88>)
 80020a0:	4815      	ldr	r0, [pc, #84]	@ (80020f8 <lis2dw12_initialize+0x84>)
 80020a2:	f004 feb5 	bl	8006e10 <lis2dw12_reset_get>
	} while (rst);
 80020a6:	4b15      	ldr	r3, [pc, #84]	@ (80020fc <lis2dw12_initialize+0x88>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f7      	bne.n	800209e <lis2dw12_initialize+0x2a>

	/* Enable Block Data Update */
	lis2dw12_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 80020ae:	2101      	movs	r1, #1
 80020b0:	4811      	ldr	r0, [pc, #68]	@ (80020f8 <lis2dw12_initialize+0x84>)
 80020b2:	f004 fde2 	bl	8006c7a <lis2dw12_block_data_update_set>
	/* Set full scale */
	lis2dw12_full_scale_set(&dev_ctx, ACCELEROMETER_FS);
 80020b6:	2101      	movs	r1, #1
 80020b8:	480f      	ldr	r0, [pc, #60]	@ (80020f8 <lis2dw12_initialize+0x84>)
 80020ba:	f004 fe04 	bl	8006cc6 <lis2dw12_full_scale_set>
	/* Configure power mode */
	lis2dw12_power_mode_set(&dev_ctx, LIS2DW12_HIGH_PERFORMANCE);
 80020be:	2104      	movs	r1, #4
 80020c0:	480d      	ldr	r0, [pc, #52]	@ (80020f8 <lis2dw12_initialize+0x84>)
 80020c2:	f004 fd47 	bl	8006b54 <lis2dw12_power_mode_set>
	/* Set Output Data Rate */
	lis2dw12_data_rate_set(&dev_ctx, ACCELEROMETER_ODR);
 80020c6:	2107      	movs	r1, #7
 80020c8:	480b      	ldr	r0, [pc, #44]	@ (80020f8 <lis2dw12_initialize+0x84>)
 80020ca:	f004 fd91 	bl	8006bf0 <lis2dw12_data_rate_set>
	/* Data-ready routed on INT1 pin */
	lis2dw12_ctrl4_int1_pad_ctrl_t int1_conf = { 0 };
 80020ce:	2300      	movs	r3, #0
 80020d0:	713b      	strb	r3, [r7, #4]
	int1_conf.int1_drdy = PROPERTY_ENABLE;
 80020d2:	793b      	ldrb	r3, [r7, #4]
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	713b      	strb	r3, [r7, #4]
	lis2dw12_pin_int1_route_set(&dev_ctx, &int1_conf);
 80020da:	1d3b      	adds	r3, r7, #4
 80020dc:	4619      	mov	r1, r3
 80020de:	4806      	ldr	r0, [pc, #24]	@ (80020f8 <lis2dw12_initialize+0x84>)
 80020e0:	f004 feaf 	bl	8006e42 <lis2dw12_pin_int1_route_set>
	/* Read data to avoid bug at boot/reset du to the interrupt */
	lis2dw12_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 80020e4:	4906      	ldr	r1, [pc, #24]	@ (8002100 <lis2dw12_initialize+0x8c>)
 80020e6:	4804      	ldr	r0, [pc, #16]	@ (80020f8 <lis2dw12_initialize+0x84>)
 80020e8:	f004 fe13 	bl	8006d12 <lis2dw12_acceleration_raw_get>
}
 80020ec:	bf00      	nop
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	2000038e 	.word	0x2000038e
 80020f8:	20000998 	.word	0x20000998
 80020fc:	2000038f 	.word	0x2000038f
 8002100:	20000388 	.word	0x20000388

08002104 <lis2dw12_convert_data_to_mg>:
 *                        depending on the full scale selected
 *
 * @return The converted value in milli-G' (mg)
 *
 */
static float lis2dw12_convert_data_to_mg(int16_t accel_raw_data) {
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	80fb      	strh	r3, [r7, #6]
	float accel_data_mg = 0.0;
 800210e:	f04f 0300 	mov.w	r3, #0
 8002112:	60fb      	str	r3, [r7, #12]
	switch (ACCELEROMETER_FS) {
	case LIS2DW12_2g:
		accel_data_mg = lis2dw12_from_fs2_to_mg(accel_raw_data);
		break;
	case LIS2DW12_4g:
		accel_data_mg = lis2dw12_from_fs4_to_mg(accel_raw_data);
 8002114:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002118:	4618      	mov	r0, r3
 800211a:	f004 fd05 	bl	8006b28 <lis2dw12_from_fs4_to_mg>
 800211e:	60f8      	str	r0, [r7, #12]
		break;
 8002120:	bf00      	nop
		break;
	default:
		accel_data_mg = 0.0;
		break;
	}
	return accel_data_mg;
 8002122:	68fb      	ldr	r3, [r7, #12]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <iks01a3_i2c_stuck_quirk>:
 * While stuck the sensor keep the SDA low.
 *
 * As a workaround we simply configure the SCL pin as a GPIO and send a burst
 * of pulses to bring the sensor back to an idle state.
 */
static void iks01a3_i2c_stuck_quirk(void) {
 800212c:	b580      	push	{r7, lr}
 800212e:	b088      	sub	sp, #32
 8002130:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002132:	f107 0308 	add.w	r3, r7, #8
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	605a      	str	r2, [r3, #4]
 800213c:	609a      	str	r2, [r3, #8]
 800213e:	60da      	str	r2, [r3, #12]
 8002140:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002142:	4b20      	ldr	r3, [pc, #128]	@ (80021c4 <iks01a3_i2c_stuck_quirk+0x98>)
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	4a1f      	ldr	r2, [pc, #124]	@ (80021c4 <iks01a3_i2c_stuck_quirk+0x98>)
 8002148:	f043 0302 	orr.w	r3, r3, #2
 800214c:	61d3      	str	r3, [r2, #28]
 800214e:	4b1d      	ldr	r3, [pc, #116]	@ (80021c4 <iks01a3_i2c_stuck_quirk+0x98>)
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	607b      	str	r3, [r7, #4]
 8002158:	687b      	ldr	r3, [r7, #4]

	/* Configure SCL as a GPIO */
	GPIO_InitStruct.Pin = SCL_PIN;
 800215a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800215e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002160:	2301      	movs	r3, #1
 8002162:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800216c:	2304      	movs	r3, #4
 800216e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SCL_PORT, &GPIO_InitStruct);
 8002170:	f107 0308 	add.w	r3, r7, #8
 8002174:	4619      	mov	r1, r3
 8002176:	4814      	ldr	r0, [pc, #80]	@ (80021c8 <iks01a3_i2c_stuck_quirk+0x9c>)
 8002178:	f001 face 	bl	8003718 <HAL_GPIO_Init>

	/* Send a burst of pulses on SCL */
	int pulses = 20;
 800217c:	2314      	movs	r3, #20
 800217e:	61fb      	str	r3, [r7, #28]
	do {
		HAL_Delay(1);
 8002180:	2001      	movs	r0, #1
 8002182:	f000 fba7 	bl	80028d4 <HAL_Delay>
		HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_RESET);
 8002186:	2200      	movs	r2, #0
 8002188:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800218c:	480e      	ldr	r0, [pc, #56]	@ (80021c8 <iks01a3_i2c_stuck_quirk+0x9c>)
 800218e:	f001 fc53 	bl	8003a38 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8002192:	2001      	movs	r0, #1
 8002194:	f000 fb9e 	bl	80028d4 <HAL_Delay>
		HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_SET);
 8002198:	2201      	movs	r2, #1
 800219a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800219e:	480a      	ldr	r0, [pc, #40]	@ (80021c8 <iks01a3_i2c_stuck_quirk+0x9c>)
 80021a0:	f001 fc4a 	bl	8003a38 <HAL_GPIO_WritePin>
	} while (pulses--);
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	1e5a      	subs	r2, r3, #1
 80021a8:	61fa      	str	r2, [r7, #28]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1e8      	bne.n	8002180 <iks01a3_i2c_stuck_quirk+0x54>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_DISABLE();
 80021ae:	4b05      	ldr	r3, [pc, #20]	@ (80021c4 <iks01a3_i2c_stuck_quirk+0x98>)
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	4a04      	ldr	r2, [pc, #16]	@ (80021c4 <iks01a3_i2c_stuck_quirk+0x98>)
 80021b4:	f023 0302 	bic.w	r3, r3, #2
 80021b8:	61d3      	str	r3, [r2, #28]
}
 80021ba:	bf00      	nop
 80021bc:	3720      	adds	r7, #32
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40023800 	.word	0x40023800
 80021c8:	40020400 	.word	0x40020400

080021cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021d0:	b672      	cpsid	i
}
 80021d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80021d4:	bf00      	nop
 80021d6:	e7fd      	b.n	80021d4 <Error_Handler+0x8>

080021d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80021de:	4b15      	ldr	r3, [pc, #84]	@ (8002234 <HAL_MspInit+0x5c>)
 80021e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e2:	4a14      	ldr	r2, [pc, #80]	@ (8002234 <HAL_MspInit+0x5c>)
 80021e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80021e8:	6253      	str	r3, [r2, #36]	@ 0x24
 80021ea:	4b12      	ldr	r3, [pc, #72]	@ (8002234 <HAL_MspInit+0x5c>)
 80021ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002234 <HAL_MspInit+0x5c>)
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	4a0e      	ldr	r2, [pc, #56]	@ (8002234 <HAL_MspInit+0x5c>)
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	6213      	str	r3, [r2, #32]
 8002202:	4b0c      	ldr	r3, [pc, #48]	@ (8002234 <HAL_MspInit+0x5c>)
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	60bb      	str	r3, [r7, #8]
 800220c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800220e:	4b09      	ldr	r3, [pc, #36]	@ (8002234 <HAL_MspInit+0x5c>)
 8002210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002212:	4a08      	ldr	r2, [pc, #32]	@ (8002234 <HAL_MspInit+0x5c>)
 8002214:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002218:	6253      	str	r3, [r2, #36]	@ 0x24
 800221a:	4b06      	ldr	r3, [pc, #24]	@ (8002234 <HAL_MspInit+0x5c>)
 800221c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800221e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002222:	607b      	str	r3, [r7, #4]
 8002224:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002226:	2007      	movs	r0, #7
 8002228:	f001 fa34 	bl	8003694 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800222c:	bf00      	nop
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40023800 	.word	0x40023800

08002238 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08a      	sub	sp, #40	@ 0x28
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002240:	f107 0314 	add.w	r3, r7, #20
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a19      	ldr	r2, [pc, #100]	@ (80022bc <HAL_ADC_MspInit+0x84>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d12b      	bne.n	80022b2 <HAL_ADC_MspInit+0x7a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800225a:	4b19      	ldr	r3, [pc, #100]	@ (80022c0 <HAL_ADC_MspInit+0x88>)
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	4a18      	ldr	r2, [pc, #96]	@ (80022c0 <HAL_ADC_MspInit+0x88>)
 8002260:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002264:	6213      	str	r3, [r2, #32]
 8002266:	4b16      	ldr	r3, [pc, #88]	@ (80022c0 <HAL_ADC_MspInit+0x88>)
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002272:	4b13      	ldr	r3, [pc, #76]	@ (80022c0 <HAL_ADC_MspInit+0x88>)
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	4a12      	ldr	r2, [pc, #72]	@ (80022c0 <HAL_ADC_MspInit+0x88>)
 8002278:	f043 0301 	orr.w	r3, r3, #1
 800227c:	61d3      	str	r3, [r2, #28]
 800227e:	4b10      	ldr	r3, [pc, #64]	@ (80022c0 <HAL_ADC_MspInit+0x88>)
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800228a:	2301      	movs	r3, #1
 800228c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800228e:	2303      	movs	r3, #3
 8002290:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002292:	2300      	movs	r3, #0
 8002294:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002296:	f107 0314 	add.w	r3, r7, #20
 800229a:	4619      	mov	r1, r3
 800229c:	4809      	ldr	r0, [pc, #36]	@ (80022c4 <HAL_ADC_MspInit+0x8c>)
 800229e:	f001 fa3b 	bl	8003718 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80022a2:	2200      	movs	r2, #0
 80022a4:	2100      	movs	r1, #0
 80022a6:	2012      	movs	r0, #18
 80022a8:	f001 f9ff 	bl	80036aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80022ac:	2012      	movs	r0, #18
 80022ae:	f001 fa18 	bl	80036e2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80022b2:	bf00      	nop
 80022b4:	3728      	adds	r7, #40	@ 0x28
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40012400 	.word	0x40012400
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40020000 	.word	0x40020000

080022c8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b08a      	sub	sp, #40	@ 0x28
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d0:	f107 0314 	add.w	r3, r7, #20
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	605a      	str	r2, [r3, #4]
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	60da      	str	r2, [r3, #12]
 80022de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a17      	ldr	r2, [pc, #92]	@ (8002344 <HAL_I2C_MspInit+0x7c>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d128      	bne.n	800233c <HAL_I2C_MspInit+0x74>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ea:	4b17      	ldr	r3, [pc, #92]	@ (8002348 <HAL_I2C_MspInit+0x80>)
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	4a16      	ldr	r2, [pc, #88]	@ (8002348 <HAL_I2C_MspInit+0x80>)
 80022f0:	f043 0302 	orr.w	r3, r3, #2
 80022f4:	61d3      	str	r3, [r2, #28]
 80022f6:	4b14      	ldr	r3, [pc, #80]	@ (8002348 <HAL_I2C_MspInit+0x80>)
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	613b      	str	r3, [r7, #16]
 8002300:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002302:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002308:	2312      	movs	r3, #18
 800230a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230c:	2300      	movs	r3, #0
 800230e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002310:	2303      	movs	r3, #3
 8002312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002314:	2304      	movs	r3, #4
 8002316:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002318:	f107 0314 	add.w	r3, r7, #20
 800231c:	4619      	mov	r1, r3
 800231e:	480b      	ldr	r0, [pc, #44]	@ (800234c <HAL_I2C_MspInit+0x84>)
 8002320:	f001 f9fa 	bl	8003718 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002324:	4b08      	ldr	r3, [pc, #32]	@ (8002348 <HAL_I2C_MspInit+0x80>)
 8002326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002328:	4a07      	ldr	r2, [pc, #28]	@ (8002348 <HAL_I2C_MspInit+0x80>)
 800232a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800232e:	6253      	str	r3, [r2, #36]	@ 0x24
 8002330:	4b05      	ldr	r3, [pc, #20]	@ (8002348 <HAL_I2C_MspInit+0x80>)
 8002332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002334:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800233c:	bf00      	nop
 800233e:	3728      	adds	r7, #40	@ 0x28
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40005400 	.word	0x40005400
 8002348:	40023800 	.word	0x40023800
 800234c:	40020400 	.word	0x40020400

08002350 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a1a      	ldr	r2, [pc, #104]	@ (80023c8 <HAL_TIM_Base_MspInit+0x78>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d114      	bne.n	800238c <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002362:	4b1a      	ldr	r3, [pc, #104]	@ (80023cc <HAL_TIM_Base_MspInit+0x7c>)
 8002364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002366:	4a19      	ldr	r2, [pc, #100]	@ (80023cc <HAL_TIM_Base_MspInit+0x7c>)
 8002368:	f043 0302 	orr.w	r3, r3, #2
 800236c:	6253      	str	r3, [r2, #36]	@ 0x24
 800236e:	4b17      	ldr	r3, [pc, #92]	@ (80023cc <HAL_TIM_Base_MspInit+0x7c>)
 8002370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800237a:	2200      	movs	r2, #0
 800237c:	2100      	movs	r1, #0
 800237e:	201d      	movs	r0, #29
 8002380:	f001 f993 	bl	80036aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002384:	201d      	movs	r0, #29
 8002386:	f001 f9ac 	bl	80036e2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
  }

}
 800238a:	e018      	b.n	80023be <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM6)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a0f      	ldr	r2, [pc, #60]	@ (80023d0 <HAL_TIM_Base_MspInit+0x80>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d113      	bne.n	80023be <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002396:	4b0d      	ldr	r3, [pc, #52]	@ (80023cc <HAL_TIM_Base_MspInit+0x7c>)
 8002398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239a:	4a0c      	ldr	r2, [pc, #48]	@ (80023cc <HAL_TIM_Base_MspInit+0x7c>)
 800239c:	f043 0310 	orr.w	r3, r3, #16
 80023a0:	6253      	str	r3, [r2, #36]	@ 0x24
 80023a2:	4b0a      	ldr	r3, [pc, #40]	@ (80023cc <HAL_TIM_Base_MspInit+0x7c>)
 80023a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a6:	f003 0310 	and.w	r3, r3, #16
 80023aa:	60bb      	str	r3, [r7, #8]
 80023ac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80023ae:	2200      	movs	r2, #0
 80023b0:	2100      	movs	r1, #0
 80023b2:	202b      	movs	r0, #43	@ 0x2b
 80023b4:	f001 f979 	bl	80036aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80023b8:	202b      	movs	r0, #43	@ 0x2b
 80023ba:	f001 f992 	bl	80036e2 <HAL_NVIC_EnableIRQ>
}
 80023be:	bf00      	nop
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40000400 	.word	0x40000400
 80023cc:	40023800 	.word	0x40023800
 80023d0:	40001000 	.word	0x40001000

080023d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08a      	sub	sp, #40	@ 0x28
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023dc:	f107 0314 	add.w	r3, r7, #20
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	60da      	str	r2, [r3, #12]
 80023ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a1f      	ldr	r2, [pc, #124]	@ (8002470 <HAL_TIM_MspPostInit+0x9c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d137      	bne.n	8002466 <HAL_TIM_MspPostInit+0x92>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002474 <HAL_TIM_MspPostInit+0xa0>)
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	4a1e      	ldr	r2, [pc, #120]	@ (8002474 <HAL_TIM_MspPostInit+0xa0>)
 80023fc:	f043 0304 	orr.w	r3, r3, #4
 8002400:	61d3      	str	r3, [r2, #28]
 8002402:	4b1c      	ldr	r3, [pc, #112]	@ (8002474 <HAL_TIM_MspPostInit+0xa0>)
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	f003 0304 	and.w	r3, r3, #4
 800240a:	613b      	str	r3, [r7, #16]
 800240c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800240e:	4b19      	ldr	r3, [pc, #100]	@ (8002474 <HAL_TIM_MspPostInit+0xa0>)
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	4a18      	ldr	r2, [pc, #96]	@ (8002474 <HAL_TIM_MspPostInit+0xa0>)
 8002414:	f043 0302 	orr.w	r3, r3, #2
 8002418:	61d3      	str	r3, [r2, #28]
 800241a:	4b16      	ldr	r3, [pc, #88]	@ (8002474 <HAL_TIM_MspPostInit+0xa0>)
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002426:	2380      	movs	r3, #128	@ 0x80
 8002428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242a:	2302      	movs	r3, #2
 800242c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242e:	2300      	movs	r3, #0
 8002430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002432:	2300      	movs	r3, #0
 8002434:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002436:	2302      	movs	r3, #2
 8002438:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800243a:	f107 0314 	add.w	r3, r7, #20
 800243e:	4619      	mov	r1, r3
 8002440:	480d      	ldr	r0, [pc, #52]	@ (8002478 <HAL_TIM_MspPostInit+0xa4>)
 8002442:	f001 f969 	bl	8003718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002446:	2310      	movs	r3, #16
 8002448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244a:	2302      	movs	r3, #2
 800244c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244e:	2300      	movs	r3, #0
 8002450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002452:	2300      	movs	r3, #0
 8002454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002456:	2302      	movs	r3, #2
 8002458:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800245a:	f107 0314 	add.w	r3, r7, #20
 800245e:	4619      	mov	r1, r3
 8002460:	4806      	ldr	r0, [pc, #24]	@ (800247c <HAL_TIM_MspPostInit+0xa8>)
 8002462:	f001 f959 	bl	8003718 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002466:	bf00      	nop
 8002468:	3728      	adds	r7, #40	@ 0x28
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40000400 	.word	0x40000400
 8002474:	40023800 	.word	0x40023800
 8002478:	40020800 	.word	0x40020800
 800247c:	40020400 	.word	0x40020400

08002480 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b08a      	sub	sp, #40	@ 0x28
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002488:	f107 0314 	add.w	r3, r7, #20
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	60da      	str	r2, [r3, #12]
 8002496:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a17      	ldr	r2, [pc, #92]	@ (80024fc <HAL_UART_MspInit+0x7c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d127      	bne.n	80024f2 <HAL_UART_MspInit+0x72>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024a2:	4b17      	ldr	r3, [pc, #92]	@ (8002500 <HAL_UART_MspInit+0x80>)
 80024a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a6:	4a16      	ldr	r2, [pc, #88]	@ (8002500 <HAL_UART_MspInit+0x80>)
 80024a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024ac:	6253      	str	r3, [r2, #36]	@ 0x24
 80024ae:	4b14      	ldr	r3, [pc, #80]	@ (8002500 <HAL_UART_MspInit+0x80>)
 80024b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b6:	613b      	str	r3, [r7, #16]
 80024b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ba:	4b11      	ldr	r3, [pc, #68]	@ (8002500 <HAL_UART_MspInit+0x80>)
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	4a10      	ldr	r2, [pc, #64]	@ (8002500 <HAL_UART_MspInit+0x80>)
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	61d3      	str	r3, [r2, #28]
 80024c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002500 <HAL_UART_MspInit+0x80>)
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80024d2:	230c      	movs	r3, #12
 80024d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d6:	2302      	movs	r3, #2
 80024d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024da:	2300      	movs	r3, #0
 80024dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024de:	2303      	movs	r3, #3
 80024e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024e2:	2307      	movs	r3, #7
 80024e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e6:	f107 0314 	add.w	r3, r7, #20
 80024ea:	4619      	mov	r1, r3
 80024ec:	4805      	ldr	r0, [pc, #20]	@ (8002504 <HAL_UART_MspInit+0x84>)
 80024ee:	f001 f913 	bl	8003718 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80024f2:	bf00      	nop
 80024f4:	3728      	adds	r7, #40	@ 0x28
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40004400 	.word	0x40004400
 8002500:	40023800 	.word	0x40023800
 8002504:	40020000 	.word	0x40020000

08002508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800250c:	bf00      	nop
 800250e:	e7fd      	b.n	800250c <NMI_Handler+0x4>

08002510 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002514:	bf00      	nop
 8002516:	e7fd      	b.n	8002514 <HardFault_Handler+0x4>

08002518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800251c:	bf00      	nop
 800251e:	e7fd      	b.n	800251c <MemManage_Handler+0x4>

08002520 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002524:	bf00      	nop
 8002526:	e7fd      	b.n	8002524 <BusFault_Handler+0x4>

08002528 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800252c:	bf00      	nop
 800252e:	e7fd      	b.n	800252c <UsageFault_Handler+0x4>

08002530 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002534:	bf00      	nop
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr

0800253c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002540:	bf00      	nop
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr

08002548 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800254c:	bf00      	nop
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr

08002554 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002558:	f000 f9a0 	bl	800289c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800255c:	bf00      	nop
 800255e:	bd80      	pop	{r7, pc}

08002560 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LIS2DW12_INT_Pin);
 8002564:	2001      	movs	r0, #1
 8002566:	f001 fa99 	bl	8003a9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800256a:	bf00      	nop
 800256c:	bd80      	pop	{r7, pc}
	...

08002570 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8002574:	4802      	ldr	r0, [pc, #8]	@ (8002580 <ADC1_IRQHandler+0x10>)
 8002576:	f000 fc3d 	bl	8002df4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	2000020c 	.word	0x2000020c

08002584 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BP3_OnOffMotor_Pin);
 8002588:	2040      	movs	r0, #64	@ 0x40
 800258a:	f001 fa87 	bl	8003a9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800258e:	bf00      	nop
 8002590:	bd80      	pop	{r7, pc}
	...

08002594 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002598:	4802      	ldr	r0, [pc, #8]	@ (80025a4 <TIM3_IRQHandler+0x10>)
 800259a:	f003 fb1d 	bl	8005bd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	200002b4 	.word	0x200002b4

080025a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BP2_onOffBuzzer_Pin);
 80025ac:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80025b0:	f001 fa74 	bl	8003a9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80025b4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80025b8:	f001 fa70 	bl	8003a9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80025bc:	bf00      	nop
 80025be:	bd80      	pop	{r7, pc}

080025c0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80025c4:	4802      	ldr	r0, [pc, #8]	@ (80025d0 <TIM6_IRQHandler+0x10>)
 80025c6:	f003 fb07 	bl	8005bd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	200002f4 	.word	0x200002f4

080025d4 <HAL_ADC_LevelOutOfWindowCallback>:

/* USER CODE BEGIN 1 */

void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc){
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]


}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr
	...

080025e8 <HAL_TIM_PeriodElapsedCallback>:

//RESOLU probleme callback dans deux fichiers a la fois

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a06      	ldr	r2, [pc, #24]	@ (8002610 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d105      	bne.n	8002606 <HAL_TIM_PeriodElapsedCallback+0x1e>
		debound_flag = 0;
 80025fa:	4b06      	ldr	r3, [pc, #24]	@ (8002614 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim6);
 8002600:	4805      	ldr	r0, [pc, #20]	@ (8002618 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002602:	f003 f90f 	bl	8005824 <HAL_TIM_Base_Stop_IT>
	}
}
 8002606:	bf00      	nop
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40001000 	.word	0x40001000
 8002614:	2000037e 	.word	0x2000037e
 8002618:	200002f4 	.word	0x200002f4

0800261c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  return 1;
 8002620:	2301      	movs	r3, #1
}
 8002622:	4618      	mov	r0, r3
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr

0800262a <_kill>:

int _kill(int pid, int sig)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b082      	sub	sp, #8
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002634:	f006 f824 	bl	8008680 <__errno>
 8002638:	4603      	mov	r3, r0
 800263a:	2216      	movs	r2, #22
 800263c:	601a      	str	r2, [r3, #0]
  return -1;
 800263e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <_exit>:

void _exit (int status)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b082      	sub	sp, #8
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002652:	f04f 31ff 	mov.w	r1, #4294967295
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7ff ffe7 	bl	800262a <_kill>
  while (1) {}    /* Make sure we hang here */
 800265c:	bf00      	nop
 800265e:	e7fd      	b.n	800265c <_exit+0x12>

08002660 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]
 8002670:	e00a      	b.n	8002688 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002672:	f3af 8000 	nop.w
 8002676:	4601      	mov	r1, r0
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	1c5a      	adds	r2, r3, #1
 800267c:	60ba      	str	r2, [r7, #8]
 800267e:	b2ca      	uxtb	r2, r1
 8002680:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	3301      	adds	r3, #1
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	429a      	cmp	r2, r3
 800268e:	dbf0      	blt.n	8002672 <_read+0x12>
  }

  return len;
 8002690:	687b      	ldr	r3, [r7, #4]
}
 8002692:	4618      	mov	r0, r3
 8002694:	3718      	adds	r7, #24
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b086      	sub	sp, #24
 800269e:	af00      	add	r7, sp, #0
 80026a0:	60f8      	str	r0, [r7, #12]
 80026a2:	60b9      	str	r1, [r7, #8]
 80026a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026a6:	2300      	movs	r3, #0
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	e009      	b.n	80026c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	1c5a      	adds	r2, r3, #1
 80026b0:	60ba      	str	r2, [r7, #8]
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff fc09 	bl	8001ecc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	3301      	adds	r3, #1
 80026be:	617b      	str	r3, [r7, #20]
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	dbf1      	blt.n	80026ac <_write+0x12>
  }
  return len;
 80026c8:	687b      	ldr	r3, [r7, #4]
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3718      	adds	r7, #24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <_close>:

int _close(int file)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026de:	4618      	mov	r0, r3
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr

080026e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026f8:	605a      	str	r2, [r3, #4]
  return 0;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr

08002706 <_isatty>:

int _isatty(int file)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800270e:	2301      	movs	r3, #1
}
 8002710:	4618      	mov	r0, r3
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr

0800271a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800271a:	b480      	push	{r7}
 800271c:	b085      	sub	sp, #20
 800271e:	af00      	add	r7, sp, #0
 8002720:	60f8      	str	r0, [r7, #12]
 8002722:	60b9      	str	r1, [r7, #8]
 8002724:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3714      	adds	r7, #20
 800272c:	46bd      	mov	sp, r7
 800272e:	bc80      	pop	{r7}
 8002730:	4770      	bx	lr
	...

08002734 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800273c:	4a14      	ldr	r2, [pc, #80]	@ (8002790 <_sbrk+0x5c>)
 800273e:	4b15      	ldr	r3, [pc, #84]	@ (8002794 <_sbrk+0x60>)
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002748:	4b13      	ldr	r3, [pc, #76]	@ (8002798 <_sbrk+0x64>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d102      	bne.n	8002756 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002750:	4b11      	ldr	r3, [pc, #68]	@ (8002798 <_sbrk+0x64>)
 8002752:	4a12      	ldr	r2, [pc, #72]	@ (800279c <_sbrk+0x68>)
 8002754:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002756:	4b10      	ldr	r3, [pc, #64]	@ (8002798 <_sbrk+0x64>)
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4413      	add	r3, r2
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	429a      	cmp	r2, r3
 8002762:	d207      	bcs.n	8002774 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002764:	f005 ff8c 	bl	8008680 <__errno>
 8002768:	4603      	mov	r3, r0
 800276a:	220c      	movs	r2, #12
 800276c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800276e:	f04f 33ff 	mov.w	r3, #4294967295
 8002772:	e009      	b.n	8002788 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002774:	4b08      	ldr	r3, [pc, #32]	@ (8002798 <_sbrk+0x64>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800277a:	4b07      	ldr	r3, [pc, #28]	@ (8002798 <_sbrk+0x64>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4413      	add	r3, r2
 8002782:	4a05      	ldr	r2, [pc, #20]	@ (8002798 <_sbrk+0x64>)
 8002784:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002786:	68fb      	ldr	r3, [r7, #12]
}
 8002788:	4618      	mov	r0, r3
 800278a:	3718      	adds	r7, #24
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	20014000 	.word	0x20014000
 8002794:	00000400 	.word	0x00000400
 8002798:	200009c0 	.word	0x200009c0
 800279c:	20001188 	.word	0x20001188

080027a0 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027a4:	bf00      	nop
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr

080027ac <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 80027ac:	f7ff fff8 	bl	80027a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027b0:	480b      	ldr	r0, [pc, #44]	@ (80027e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80027b2:	490c      	ldr	r1, [pc, #48]	@ (80027e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80027b4:	4a0c      	ldr	r2, [pc, #48]	@ (80027e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80027b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027b8:	e002      	b.n	80027c0 <LoopCopyDataInit>

080027ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027be:	3304      	adds	r3, #4

080027c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027c4:	d3f9      	bcc.n	80027ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027c6:	4a09      	ldr	r2, [pc, #36]	@ (80027ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80027c8:	4c09      	ldr	r4, [pc, #36]	@ (80027f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027cc:	e001      	b.n	80027d2 <LoopFillZerobss>

080027ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027d0:	3204      	adds	r2, #4

080027d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027d4:	d3fb      	bcc.n	80027ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027d6:	f005 ff59 	bl	800868c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027da:	f7fe ff75 	bl	80016c8 <main>
  bx lr
 80027de:	4770      	bx	lr
  ldr r0, =_sdata
 80027e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027e4:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80027e8:	08017b4c 	.word	0x08017b4c
  ldr r2, =_sbss
 80027ec:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80027f0:	20001188 	.word	0x20001188

080027f4 <COMP_ACQ_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027f4:	e7fe      	b.n	80027f4 <COMP_ACQ_IRQHandler>

080027f6 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027fc:	2300      	movs	r3, #0
 80027fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002800:	2003      	movs	r0, #3
 8002802:	f000 ff47 	bl	8003694 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002806:	2000      	movs	r0, #0
 8002808:	f000 f80e 	bl	8002828 <HAL_InitTick>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d002      	beq.n	8002818 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	71fb      	strb	r3, [r7, #7]
 8002816:	e001      	b.n	800281c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002818:	f7ff fcde 	bl	80021d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800281c:	79fb      	ldrb	r3, [r7, #7]
}
 800281e:	4618      	mov	r0, r3
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
	...

08002828 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002830:	2300      	movs	r3, #0
 8002832:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002834:	4b16      	ldr	r3, [pc, #88]	@ (8002890 <HAL_InitTick+0x68>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d022      	beq.n	8002882 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800283c:	4b15      	ldr	r3, [pc, #84]	@ (8002894 <HAL_InitTick+0x6c>)
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	4b13      	ldr	r3, [pc, #76]	@ (8002890 <HAL_InitTick+0x68>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002848:	fbb1 f3f3 	udiv	r3, r1, r3
 800284c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002850:	4618      	mov	r0, r3
 8002852:	f000 ff54 	bl	80036fe <HAL_SYSTICK_Config>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10f      	bne.n	800287c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b0f      	cmp	r3, #15
 8002860:	d809      	bhi.n	8002876 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002862:	2200      	movs	r2, #0
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	f04f 30ff 	mov.w	r0, #4294967295
 800286a:	f000 ff1e 	bl	80036aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800286e:	4a0a      	ldr	r2, [pc, #40]	@ (8002898 <HAL_InitTick+0x70>)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6013      	str	r3, [r2, #0]
 8002874:	e007      	b.n	8002886 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	73fb      	strb	r3, [r7, #15]
 800287a:	e004      	b.n	8002886 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	73fb      	strb	r3, [r7, #15]
 8002880:	e001      	b.n	8002886 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002886:	7bfb      	ldrb	r3, [r7, #15]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	20000020 	.word	0x20000020
 8002894:	20000018 	.word	0x20000018
 8002898:	2000001c 	.word	0x2000001c

0800289c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028a0:	4b05      	ldr	r3, [pc, #20]	@ (80028b8 <HAL_IncTick+0x1c>)
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	4b05      	ldr	r3, [pc, #20]	@ (80028bc <HAL_IncTick+0x20>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4413      	add	r3, r2
 80028aa:	4a03      	ldr	r2, [pc, #12]	@ (80028b8 <HAL_IncTick+0x1c>)
 80028ac:	6013      	str	r3, [r2, #0]
}
 80028ae:	bf00      	nop
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc80      	pop	{r7}
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	200009c4 	.word	0x200009c4
 80028bc:	20000020 	.word	0x20000020

080028c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  return uwTick;
 80028c4:	4b02      	ldr	r3, [pc, #8]	@ (80028d0 <HAL_GetTick+0x10>)
 80028c6:	681b      	ldr	r3, [r3, #0]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr
 80028d0:	200009c4 	.word	0x200009c4

080028d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028dc:	f7ff fff0 	bl	80028c0 <HAL_GetTick>
 80028e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ec:	d004      	beq.n	80028f8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80028ee:	4b09      	ldr	r3, [pc, #36]	@ (8002914 <HAL_Delay+0x40>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	4413      	add	r3, r2
 80028f6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028f8:	bf00      	nop
 80028fa:	f7ff ffe1 	bl	80028c0 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	429a      	cmp	r2, r3
 8002908:	d8f7      	bhi.n	80028fa <HAL_Delay+0x26>
  {
  }
}
 800290a:	bf00      	nop
 800290c:	bf00      	nop
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	20000020 	.word	0x20000020

08002918 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b08e      	sub	sp, #56	@ 0x38
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002920:	2300      	movs	r3, #0
 8002922:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t tmp_cr1 = 0;
 8002926:	2300      	movs	r3, #0
 8002928:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t tmp_cr2 = 0;
 800292a:	2300      	movs	r3, #0
 800292c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e127      	b.n	8002b88 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002942:	2b00      	cmp	r3, #0
 8002944:	d115      	bne.n	8002972 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	651a      	str	r2, [r3, #80]	@ 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002954:	4b8e      	ldr	r3, [pc, #568]	@ (8002b90 <HAL_ADC_Init+0x278>)
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	4a8d      	ldr	r2, [pc, #564]	@ (8002b90 <HAL_ADC_Init+0x278>)
 800295a:	f043 0301 	orr.w	r3, r3, #1
 800295e:	6213      	str	r3, [r2, #32]
 8002960:	4b8b      	ldr	r3, [pc, #556]	@ (8002b90 <HAL_ADC_Init+0x278>)
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	60bb      	str	r3, [r7, #8]
 800296a:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f7ff fc63 	bl	8002238 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002976:	f003 0310 	and.w	r3, r3, #16
 800297a:	2b00      	cmp	r3, #0
 800297c:	f040 80ff 	bne.w	8002b7e <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002984:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002988:	f023 0302 	bic.w	r3, r3, #2
 800298c:	f043 0202 	orr.w	r2, r3, #2
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8002994:	4b7f      	ldr	r3, [pc, #508]	@ (8002b94 <HAL_ADC_Init+0x27c>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	497c      	ldr	r1, [pc, #496]	@ (8002b94 <HAL_ADC_Init+0x27c>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80029ae:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029b6:	4619      	mov	r1, r3
 80029b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80029bc:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029be:	6a3b      	ldr	r3, [r7, #32]
 80029c0:	fa93 f3a3 	rbit	r3, r3
 80029c4:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	fab3 f383 	clz	r3, r3
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 80029d2:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80029d8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80029e0:	4619      	mov	r1, r3
 80029e2:	2302      	movs	r3, #2
 80029e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029e8:	fa93 f3a3 	rbit	r3, r3
 80029ec:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80029ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f0:	fab3 f383 	clz	r3, r3
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 80029fa:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80029fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029fe:	4313      	orrs	r3, r2
 8002a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a06:	2b10      	cmp	r3, #16
 8002a08:	d007      	beq.n	8002a1a <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8002a12:	4313      	orrs	r3, r2
 8002a14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a16:	4313      	orrs	r3, r2
 8002a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a24:	2b40      	cmp	r3, #64	@ 0x40
 8002a26:	d04f      	beq.n	8002ac8 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002a3a:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6912      	ldr	r2, [r2, #16]
 8002a40:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8002a44:	d003      	beq.n	8002a4e <HAL_ADC_Init+0x136>
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	6912      	ldr	r2, [r2, #16]
 8002a4a:	2a01      	cmp	r2, #1
 8002a4c:	d102      	bne.n	8002a54 <HAL_ADC_Init+0x13c>
 8002a4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a52:	e000      	b.n	8002a56 <HAL_ADC_Init+0x13e>
 8002a54:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8002a56:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002a58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d125      	bne.n	8002ab4 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d114      	bne.n	8002a9c <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a76:	3b01      	subs	r3, #1
 8002a78:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8002a7c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	fa92 f2a2 	rbit	r2, r2
 8002a84:	617a      	str	r2, [r7, #20]
  return result;
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	fab2 f282 	clz	r2, r2
 8002a8c:	b2d2      	uxtb	r2, r2
 8002a8e:	4093      	lsls	r3, r2
 8002a90:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002a94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a96:	4313      	orrs	r3, r2
 8002a98:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a9a:	e00b      	b.n	8002ab4 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aa0:	f043 0220 	orr.w	r2, r3, #32
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	64da      	str	r2, [r3, #76]	@ 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002aac:	f043 0201 	orr.w	r2, r3, #1
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	651a      	str	r2, [r3, #80]	@ 0x50
      else
      {
        /* do nothing */
      }
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	4b37      	ldr	r3, [pc, #220]	@ (8002b98 <HAL_ADC_Init+0x280>)
 8002abc:	4013      	ands	r3, r2
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	6812      	ldr	r2, [r2, #0]
 8002ac2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002ac4:	430b      	orrs	r3, r1
 8002ac6:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	4b33      	ldr	r3, [pc, #204]	@ (8002b9c <HAL_ADC_Init+0x284>)
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	6812      	ldr	r2, [r2, #0]
 8002ad6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ad8:	430b      	orrs	r3, r1
 8002ada:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ae4:	d003      	beq.n	8002aee <HAL_ADC_Init+0x1d6>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d119      	bne.n	8002b22 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af4:	f023 71f8 	bic.w	r1, r3, #32505856	@ 0x1f00000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002afc:	3b01      	subs	r3, #1
 8002afe:	f04f 72f8 	mov.w	r2, #32505856	@ 0x1f00000
 8002b02:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	fa92 f2a2 	rbit	r2, r2
 8002b0a:	60fa      	str	r2, [r7, #12]
  return result;
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	fab2 f282 	clz	r2, r2
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	fa03 f202 	lsl.w	r2, r3, r2
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b20:	e007      	b.n	8002b32 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 72f8 	bic.w	r2, r2, #32505856	@ 0x1f00000
 8002b30:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	4b19      	ldr	r3, [pc, #100]	@ (8002ba0 <HAL_ADC_Init+0x288>)
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d10b      	bne.n	8002b5a <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b4c:	f023 0303 	bic.w	r3, r3, #3
 8002b50:	f043 0201 	orr.w	r2, r3, #1
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002b58:	e014      	b.n	8002b84 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b5e:	f023 0312 	bic.w	r3, r3, #18
 8002b62:	f043 0210 	orr.w	r2, r3, #16
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	64da      	str	r2, [r3, #76]	@ 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b6e:	f043 0201 	orr.w	r2, r3, #1
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	651a      	str	r2, [r3, #80]	@ 0x50
      
      tmp_hal_status = HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002b7c:	e002      	b.n	8002b84 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002b84:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3738      	adds	r7, #56	@ 0x38
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40023800 	.word	0x40023800
 8002b94:	40012700 	.word	0x40012700
 8002b98:	fcfc16ff 	.word	0xfcfc16ff
 8002b9c:	c0fff189 	.word	0xc0fff189
 8002ba0:	bf80fffe 	.word	0xbf80fffe

08002ba4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bac:	2300      	movs	r3, #0
 8002bae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d101      	bne.n	8002bbe <HAL_ADC_Start+0x1a>
 8002bba:	2302      	movs	r3, #2
 8002bbc:	e04e      	b.n	8002c5c <HAL_ADC_Start+0xb8>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 fbf2 	bl	80033b0 <ADC_Enable>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002bd0:	7bfb      	ldrb	r3, [r7, #15]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d141      	bne.n	8002c5a <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bda:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002bde:	f023 0301 	bic.w	r3, r3, #1
 8002be2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d007      	beq.n	8002c08 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bfc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002c00:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c14:	d106      	bne.n	8002c24 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c1a:	f023 0206 	bic.w	r2, r3, #6
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c22:	e002      	b.n	8002c2a <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002c3a:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d107      	bne.n	8002c5a <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002c58:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d101      	bne.n	8002c7e <HAL_ADC_Stop+0x1a>
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	e01a      	b.n	8002cb4 <HAL_ADC_Stop+0x50>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 fbee 	bl	8003468 <ADC_ConversionStop_Disable>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d109      	bne.n	8002caa <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c9a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002c9e:	f023 0301 	bic.w	r3, r3, #1
 8002ca2:	f043 0201 	orr.w	r2, r3, #1
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8002cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cd8:	d113      	bne.n	8002d02 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002ce4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ce8:	d10b      	bne.n	8002d02 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cee:	f043 0220 	orr.w	r2, r3, #32
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e068      	b.n	8002dd4 <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002d02:	f7ff fddd 	bl	80028c0 <HAL_GetTick>
 8002d06:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002d08:	e021      	b.n	8002d4e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d10:	d01d      	beq.n	8002d4e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d007      	beq.n	8002d28 <HAL_ADC_PollForConversion+0x6c>
 8002d18:	f7ff fdd2 	bl	80028c0 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d212      	bcs.n	8002d4e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10b      	bne.n	8002d4e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d3a:	f043 0204 	orr.w	r2, r3, #4
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

          return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e042      	b.n	8002dd4 <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0d6      	beq.n	8002d0a <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d104      	bne.n	8002d6e <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f06f 0212 	mvn.w	r2, #18
 8002d6c:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d72:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d124      	bne.n	8002dd2 <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d11f      	bne.n	8002dd2 <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d98:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d006      	beq.n	8002dae <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d111      	bne.n	8002dd2 <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002db2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dbe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d105      	bne.n	8002dd2 <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dca:	f043 0201 	orr.w	r2, r3, #1
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr

08002df4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	f003 0320 	and.w	r3, r3, #32
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d04c      	beq.n	8002eb0 <HAL_ADC_IRQHandler+0xbc>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d047      	beq.n	8002eb0 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e24:	f003 0310 	and.w	r3, r3, #16
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d105      	bne.n	8002e38 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e30:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32L1, there is no independent flag of end of sequence.   */
      /*       The test of scan sequence on going is done either with scan    */
      /*       sequence disabled or with end of conversion flag set to        */
      /*       of end of sequence.                                            */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d12c      	bne.n	8002ea0 <HAL_ADC_IRQHandler+0xac>
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d127      	bne.n	8002ea0 <HAL_ADC_IRQHandler+0xac>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e56:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d006      	beq.n	8002e6c <HAL_ADC_IRQHandler+0x78>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d119      	bne.n	8002ea0 <HAL_ADC_IRQHandler+0xac>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 0220 	bic.w	r2, r2, #32
 8002e7a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	64da      	str	r2, [r3, #76]	@ 0x4c
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d105      	bne.n	8002ea0 <HAL_ADC_IRQHandler+0xac>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e98:	f043 0201 	orr.w	r2, r3, #1
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	64da      	str	r2, [r3, #76]	@ 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 f89e 	bl	8002fe2 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f06f 0212 	mvn.w	r2, #18
 8002eae:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d05a      	beq.n	8002f70 <HAL_ADC_IRQHandler+0x17c>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d055      	beq.n	8002f70 <HAL_ADC_IRQHandler+0x17c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ec8:	f003 0310 	and.w	r3, r3, #16
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d105      	bne.n	8002edc <HAL_ADC_IRQHandler+0xe8>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ed4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Determine whether any further conversion upcoming on group injected  */
      /* by external trigger, scan sequence on going or by automatic injected */
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d13a      	bne.n	8002f60 <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ef0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d006      	beq.n	8002f06 <HAL_ADC_IRQHandler+0x112>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d12c      	bne.n	8002f60 <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d125      	bne.n	8002f60 <HAL_ADC_IRQHandler+0x16c>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d11e      	bne.n	8002f60 <HAL_ADC_IRQHandler+0x16c>
          (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d119      	bne.n	8002f60 <HAL_ADC_IRQHandler+0x16c>
      {
        /* Disable ADC end of single conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f3a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f40:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	64da      	str	r2, [r3, #76]	@ 0x4c

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d105      	bne.n	8002f60 <HAL_ADC_IRQHandler+0x16c>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f58:	f043 0201 	orr.w	r2, r3, #1
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	64da      	str	r2, [r3, #76]	@ 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 fac2 	bl	80034ea <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f06f 020c 	mvn.w	r2, #12
 8002f6e:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d012      	beq.n	8002fa0 <HAL_ADC_IRQHandler+0x1ac>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00d      	beq.n	8002fa0 <HAL_ADC_IRQHandler+0x1ac>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f88:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	64da      	str	r2, [r3, #76]	@ 0x4c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f7ff fb1f 	bl	80025d4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f06f 0201 	mvn.w	r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check Overrun flag ========== */
  if((tmp_cr1 & ADC_IT_OVR) == ADC_IT_OVR)
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d017      	beq.n	8002fda <HAL_ADC_IRQHandler+0x1e6>
  {
    if((tmp_sr & ADC_FLAG_OVR) == ADC_FLAG_OVR)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f003 0320 	and.w	r3, r3, #32
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d012      	beq.n	8002fda <HAL_ADC_IRQHandler+0x1e6>
      /* Note: On STM32L1, ADC overrun can be set through other parameters    */
      /*       refer to description of parameter "EOCSelection" for more      */
      /*       details.                                                       */
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fb8:	f043 0202 	orr.w	r2, r3, #2
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f06f 0220 	mvn.w	r2, #32
 8002fc8:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f812 	bl	8002ff4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the Overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f06f 0220 	mvn.w	r2, #32
 8002fd8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002fda:	bf00      	nop
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b083      	sub	sp, #12
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002fea:	bf00      	nop
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bc80      	pop	{r7}
 8002ff2:	4770      	bx	lr

08002ff4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	bc80      	pop	{r7}
 8003004:	4770      	bx	lr
	...

08003008 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003012:	2300      	movs	r3, #0
 8003014:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8003016:	2300      	movs	r3, #0
 8003018:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8003020:	2b01      	cmp	r3, #1
 8003022:	d101      	bne.n	8003028 <HAL_ADC_ConfigChannel+0x20>
 8003024:	2302      	movs	r3, #2
 8003026:	e14f      	b.n	80032c8 <HAL_ADC_ConfigChannel+0x2c0>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b06      	cmp	r3, #6
 8003036:	d81c      	bhi.n	8003072 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	4613      	mov	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4413      	add	r3, r2
 8003048:	3b05      	subs	r3, #5
 800304a:	221f      	movs	r2, #31
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	43db      	mvns	r3, r3
 8003052:	4019      	ands	r1, r3
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	6818      	ldr	r0, [r3, #0]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	4613      	mov	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4413      	add	r3, r2
 8003062:	3b05      	subs	r3, #5
 8003064:	fa00 f203 	lsl.w	r2, r0, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003070:	e07e      	b.n	8003170 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	2b0c      	cmp	r3, #12
 8003078:	d81c      	bhi.n	80030b4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	3b23      	subs	r3, #35	@ 0x23
 800308c:	221f      	movs	r2, #31
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	43db      	mvns	r3, r3
 8003094:	4019      	ands	r1, r3
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	6818      	ldr	r0, [r3, #0]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	4613      	mov	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	3b23      	subs	r3, #35	@ 0x23
 80030a6:	fa00 f203 	lsl.w	r2, r0, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80030b2:	e05d      	b.n	8003170 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	2b12      	cmp	r3, #18
 80030ba:	d81c      	bhi.n	80030f6 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	4613      	mov	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4413      	add	r3, r2
 80030cc:	3b41      	subs	r3, #65	@ 0x41
 80030ce:	221f      	movs	r2, #31
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	43db      	mvns	r3, r3
 80030d6:	4019      	ands	r1, r3
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	6818      	ldr	r0, [r3, #0]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685a      	ldr	r2, [r3, #4]
 80030e0:	4613      	mov	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	4413      	add	r3, r2
 80030e6:	3b41      	subs	r3, #65	@ 0x41
 80030e8:	fa00 f203 	lsl.w	r2, r0, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	639a      	str	r2, [r3, #56]	@ 0x38
 80030f4:	e03c      	b.n	8003170 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	2b18      	cmp	r3, #24
 80030fc:	d81c      	bhi.n	8003138 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685a      	ldr	r2, [r3, #4]
 8003108:	4613      	mov	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	3b5f      	subs	r3, #95	@ 0x5f
 8003110:	221f      	movs	r2, #31
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	43db      	mvns	r3, r3
 8003118:	4019      	ands	r1, r3
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	6818      	ldr	r0, [r3, #0]
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	4613      	mov	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4413      	add	r3, r2
 8003128:	3b5f      	subs	r3, #95	@ 0x5f
 800312a:	fa00 f203 	lsl.w	r2, r0, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	635a      	str	r2, [r3, #52]	@ 0x34
 8003136:	e01b      	b.n	8003170 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	4613      	mov	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4413      	add	r3, r2
 8003148:	3b7d      	subs	r3, #125	@ 0x7d
 800314a:	221f      	movs	r2, #31
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	43db      	mvns	r3, r3
 8003152:	4019      	ands	r1, r3
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	6818      	ldr	r0, [r3, #0]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	4613      	mov	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4413      	add	r3, r2
 8003162:	3b7d      	subs	r3, #125	@ 0x7d
 8003164:	fa00 f203 	lsl.w	r2, r0, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2b09      	cmp	r3, #9
 8003176:	d81a      	bhi.n	80031ae <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6959      	ldr	r1, [r3, #20]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	4613      	mov	r3, r2
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	4413      	add	r3, r2
 8003188:	2207      	movs	r2, #7
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	43db      	mvns	r3, r3
 8003190:	4019      	ands	r1, r3
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	6898      	ldr	r0, [r3, #8]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	4613      	mov	r3, r2
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	4413      	add	r3, r2
 80031a0:	fa00 f203 	lsl.w	r2, r0, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	615a      	str	r2, [r3, #20]
 80031ac:	e05d      	b.n	800326a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2b13      	cmp	r3, #19
 80031b4:	d81c      	bhi.n	80031f0 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6919      	ldr	r1, [r3, #16]
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	4613      	mov	r3, r2
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	4413      	add	r3, r2
 80031c6:	3b1e      	subs	r3, #30
 80031c8:	2207      	movs	r2, #7
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	43db      	mvns	r3, r3
 80031d0:	4019      	ands	r1, r3
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	6898      	ldr	r0, [r3, #8]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	4613      	mov	r3, r2
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	4413      	add	r3, r2
 80031e0:	3b1e      	subs	r3, #30
 80031e2:	fa00 f203 	lsl.w	r2, r0, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	611a      	str	r2, [r3, #16]
 80031ee:	e03c      	b.n	800326a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2b1d      	cmp	r3, #29
 80031f6:	d81c      	bhi.n	8003232 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68d9      	ldr	r1, [r3, #12]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	4613      	mov	r3, r2
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	4413      	add	r3, r2
 8003208:	3b3c      	subs	r3, #60	@ 0x3c
 800320a:	2207      	movs	r2, #7
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	43db      	mvns	r3, r3
 8003212:	4019      	ands	r1, r3
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	6898      	ldr	r0, [r3, #8]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	4613      	mov	r3, r2
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	4413      	add	r3, r2
 8003222:	3b3c      	subs	r3, #60	@ 0x3c
 8003224:	fa00 f203 	lsl.w	r2, r0, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	60da      	str	r2, [r3, #12]
 8003230:	e01b      	b.n	800326a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	4613      	mov	r3, r2
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	4413      	add	r3, r2
 8003242:	3b5a      	subs	r3, #90	@ 0x5a
 8003244:	2207      	movs	r2, #7
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	43db      	mvns	r3, r3
 800324c:	4019      	ands	r1, r3
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	6898      	ldr	r0, [r3, #8]
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	4613      	mov	r3, r2
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	4413      	add	r3, r2
 800325c:	3b5a      	subs	r3, #90	@ 0x5a
 800325e:	fa00 f203 	lsl.w	r2, r0, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	430a      	orrs	r2, r1
 8003268:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2b10      	cmp	r3, #16
 8003270:	d003      	beq.n	800327a <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003276:	2b11      	cmp	r3, #17
 8003278:	d121      	bne.n	80032be <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 800327a:	4b16      	ldr	r3, [pc, #88]	@ (80032d4 <HAL_ADC_ConfigChannel+0x2cc>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d11b      	bne.n	80032be <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8003286:	4b13      	ldr	r3, [pc, #76]	@ (80032d4 <HAL_ADC_ConfigChannel+0x2cc>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	4a12      	ldr	r2, [pc, #72]	@ (80032d4 <HAL_ADC_ConfigChannel+0x2cc>)
 800328c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003290:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2b10      	cmp	r3, #16
 8003298:	d111      	bne.n	80032be <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800329a:	4b0f      	ldr	r3, [pc, #60]	@ (80032d8 <HAL_ADC_ConfigChannel+0x2d0>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a0f      	ldr	r2, [pc, #60]	@ (80032dc <HAL_ADC_ConfigChannel+0x2d4>)
 80032a0:	fba2 2303 	umull	r2, r3, r2, r3
 80032a4:	0c9a      	lsrs	r2, r3, #18
 80032a6:	4613      	mov	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80032b0:	e002      	b.n	80032b8 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	3b01      	subs	r3, #1
 80032b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1f9      	bne.n	80032b2 <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3714      	adds	r7, #20
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc80      	pop	{r7}
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	40012700 	.word	0x40012700
 80032d8:	20000018 	.word	0x20000018
 80032dc:	431bde83 	.word	0x431bde83

080032e0 <HAL_ADC_AnalogWDGConfig>:
  * @param  hadc ADC handle
  * @param  AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
  assert_param(IS_ADC_RANGE(ADC_RESOLUTION_12B, AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(ADC_RESOLUTION_12B, AnalogWDGConfig->LowThreshold));
  
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a27      	ldr	r2, [pc, #156]	@ (800338c <HAL_ADC_AnalogWDGConfig+0xac>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d003      	beq.n	80032fc <HAL_ADC_AnalogWDGConfig+0x1c>
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80032f8:	4a25      	ldr	r2, [pc, #148]	@ (8003390 <HAL_ADC_AnalogWDGConfig+0xb0>)
 80032fa:	4293      	cmp	r3, r2
  {
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8003302:	2b01      	cmp	r3, #1
 8003304:	d101      	bne.n	800330a <HAL_ADC_AnalogWDGConfig+0x2a>
 8003306:	2302      	movs	r3, #2
 8003308:	e03b      	b.n	8003382 <HAL_ADC_AnalogWDGConfig+0xa2>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Analog watchdog configuration */

  /* Configure ADC Analog watchdog interrupt */
  if(AnalogWDGConfig->ITMode == ENABLE)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	7a1b      	ldrb	r3, [r3, #8]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d108      	bne.n	800332c <HAL_ADC_AnalogWDGConfig+0x4c>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003328:	605a      	str	r2, [r3, #4]
 800332a:	e007      	b.n	800333c <HAL_ADC_AnalogWDGConfig+0x5c>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800333a:	605a      	str	r2, [r3, #4]
  /* Configuration of analog watchdog:                                        */
  /*  - Set the analog watchdog enable mode: regular and/or injected groups,  */
  /*    one or all channels.                                                  */
  /*  - Set the Analog watchdog channel (is not used if watchdog              */
  /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                             */
  hadc->Instance->CR1 &= ~( ADC_CR1_AWDSGL |
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6859      	ldr	r1, [r3, #4]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	4b13      	ldr	r3, [pc, #76]	@ (8003394 <HAL_ADC_AnalogWDGConfig+0xb4>)
 8003348:	400b      	ands	r3, r1
 800334a:	6053      	str	r3, [r2, #4]
                            ADC_CR1_JAWDEN |
                            ADC_CR1_AWDEN  |
                            ADC_CR1_AWDCH   );
  
  hadc->Instance->CR1 |= ( AnalogWDGConfig->WatchdogMode |
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6859      	ldr	r1, [r3, #4]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
                           AnalogWDGConfig->Channel       );
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
  hadc->Instance->CR1 |= ( AnalogWDGConfig->WatchdogMode |
 800335a:	431a      	orrs	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	430a      	orrs	r2, r1
 8003362:	605a      	str	r2, [r3, #4]
      
  /* Set the high threshold */
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	68d2      	ldr	r2, [r2, #12]
 800336c:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set the low threshold */
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	6912      	ldr	r2, [r2, #16]
 8003376:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	bc80      	pop	{r7}
 800338a:	4770      	bx	lr
 800338c:	00800200 	.word	0x00800200
 8003390:	00400200 	.word	0x00400200
 8003394:	ff3ffde0 	.word	0xff3ffde0

08003398 <HAL_ADC_GetState>:
  * @brief  return the ADC state
  * @param  hadc ADC handle
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bc80      	pop	{r7}
 80033ac:	4770      	bx	lr
	...

080033b0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80033b8:	2300      	movs	r3, #0
 80033ba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 80033bc:	2300      	movs	r3, #0
 80033be:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ca:	2b40      	cmp	r3, #64	@ 0x40
 80033cc:	d043      	beq.n	8003456 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f042 0201 	orr.w	r2, r2, #1
 80033dc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80033de:	4b20      	ldr	r3, [pc, #128]	@ (8003460 <ADC_Enable+0xb0>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a20      	ldr	r2, [pc, #128]	@ (8003464 <ADC_Enable+0xb4>)
 80033e4:	fba2 2303 	umull	r2, r3, r2, r3
 80033e8:	0c9a      	lsrs	r2, r3, #18
 80033ea:	4613      	mov	r3, r2
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	4413      	add	r3, r2
 80033f0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80033f2:	e002      	b.n	80033fa <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	3b01      	subs	r3, #1
 80033f8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1f9      	bne.n	80033f4 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8003400:	f7ff fa5e 	bl	80028c0 <HAL_GetTick>
 8003404:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003406:	e01f      	b.n	8003448 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8003408:	f7ff fa5a 	bl	80028c0 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d918      	bls.n	8003448 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003420:	2b40      	cmp	r3, #64	@ 0x40
 8003422:	d011      	beq.n	8003448 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003428:	f043 0210 	orr.w	r2, r3, #16
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003434:	f043 0201 	orr.w	r2, r3, #1
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

          return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e007      	b.n	8003458 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003452:	2b40      	cmp	r3, #64	@ 0x40
 8003454:	d1d8      	bne.n	8003408 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	20000018 	.word	0x20000018
 8003464:	431bde83 	.word	0x431bde83

08003468 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003470:	2300      	movs	r3, #0
 8003472:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800347e:	2b40      	cmp	r3, #64	@ 0x40
 8003480:	d12e      	bne.n	80034e0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0201 	bic.w	r2, r2, #1
 8003490:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003492:	f7ff fa15 	bl	80028c0 <HAL_GetTick>
 8003496:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003498:	e01b      	b.n	80034d2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 800349a:	f7ff fa11 	bl	80028c0 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d914      	bls.n	80034d2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034b2:	2b40      	cmp	r3, #64	@ 0x40
 80034b4:	d10d      	bne.n	80034d2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ba:	f043 0210 	orr.w	r2, r3, #16
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034c6:	f043 0201 	orr.w	r2, r3, #1
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	651a      	str	r2, [r3, #80]	@ 0x50

          return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e007      	b.n	80034e2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034dc:	2b40      	cmp	r3, #64	@ 0x40
 80034de:	d0dc      	beq.n	800349a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b083      	sub	sp, #12
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80034f2:	bf00      	nop
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bc80      	pop	{r7}
 80034fa:	4770      	bx	lr

080034fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800350c:	4b0c      	ldr	r3, [pc, #48]	@ (8003540 <__NVIC_SetPriorityGrouping+0x44>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003518:	4013      	ands	r3, r2
 800351a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003524:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003528:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800352c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800352e:	4a04      	ldr	r2, [pc, #16]	@ (8003540 <__NVIC_SetPriorityGrouping+0x44>)
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	60d3      	str	r3, [r2, #12]
}
 8003534:	bf00      	nop
 8003536:	3714      	adds	r7, #20
 8003538:	46bd      	mov	sp, r7
 800353a:	bc80      	pop	{r7}
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	e000ed00 	.word	0xe000ed00

08003544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003548:	4b04      	ldr	r3, [pc, #16]	@ (800355c <__NVIC_GetPriorityGrouping+0x18>)
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	0a1b      	lsrs	r3, r3, #8
 800354e:	f003 0307 	and.w	r3, r3, #7
}
 8003552:	4618      	mov	r0, r3
 8003554:	46bd      	mov	sp, r7
 8003556:	bc80      	pop	{r7}
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	e000ed00 	.word	0xe000ed00

08003560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	4603      	mov	r3, r0
 8003568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800356a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356e:	2b00      	cmp	r3, #0
 8003570:	db0b      	blt.n	800358a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003572:	79fb      	ldrb	r3, [r7, #7]
 8003574:	f003 021f 	and.w	r2, r3, #31
 8003578:	4906      	ldr	r1, [pc, #24]	@ (8003594 <__NVIC_EnableIRQ+0x34>)
 800357a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357e:	095b      	lsrs	r3, r3, #5
 8003580:	2001      	movs	r0, #1
 8003582:	fa00 f202 	lsl.w	r2, r0, r2
 8003586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800358a:	bf00      	nop
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	bc80      	pop	{r7}
 8003592:	4770      	bx	lr
 8003594:	e000e100 	.word	0xe000e100

08003598 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	4603      	mov	r3, r0
 80035a0:	6039      	str	r1, [r7, #0]
 80035a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	db0a      	blt.n	80035c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	490c      	ldr	r1, [pc, #48]	@ (80035e4 <__NVIC_SetPriority+0x4c>)
 80035b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b6:	0112      	lsls	r2, r2, #4
 80035b8:	b2d2      	uxtb	r2, r2
 80035ba:	440b      	add	r3, r1
 80035bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035c0:	e00a      	b.n	80035d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	4908      	ldr	r1, [pc, #32]	@ (80035e8 <__NVIC_SetPriority+0x50>)
 80035c8:	79fb      	ldrb	r3, [r7, #7]
 80035ca:	f003 030f 	and.w	r3, r3, #15
 80035ce:	3b04      	subs	r3, #4
 80035d0:	0112      	lsls	r2, r2, #4
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	440b      	add	r3, r1
 80035d6:	761a      	strb	r2, [r3, #24]
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	bc80      	pop	{r7}
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	e000e100 	.word	0xe000e100
 80035e8:	e000ed00 	.word	0xe000ed00

080035ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b089      	sub	sp, #36	@ 0x24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	f1c3 0307 	rsb	r3, r3, #7
 8003606:	2b04      	cmp	r3, #4
 8003608:	bf28      	it	cs
 800360a:	2304      	movcs	r3, #4
 800360c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	3304      	adds	r3, #4
 8003612:	2b06      	cmp	r3, #6
 8003614:	d902      	bls.n	800361c <NVIC_EncodePriority+0x30>
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	3b03      	subs	r3, #3
 800361a:	e000      	b.n	800361e <NVIC_EncodePriority+0x32>
 800361c:	2300      	movs	r3, #0
 800361e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003620:	f04f 32ff 	mov.w	r2, #4294967295
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	fa02 f303 	lsl.w	r3, r2, r3
 800362a:	43da      	mvns	r2, r3
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	401a      	ands	r2, r3
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003634:	f04f 31ff 	mov.w	r1, #4294967295
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	fa01 f303 	lsl.w	r3, r1, r3
 800363e:	43d9      	mvns	r1, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003644:	4313      	orrs	r3, r2
         );
}
 8003646:	4618      	mov	r0, r3
 8003648:	3724      	adds	r7, #36	@ 0x24
 800364a:	46bd      	mov	sp, r7
 800364c:	bc80      	pop	{r7}
 800364e:	4770      	bx	lr

08003650 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	3b01      	subs	r3, #1
 800365c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003660:	d301      	bcc.n	8003666 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003662:	2301      	movs	r3, #1
 8003664:	e00f      	b.n	8003686 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003666:	4a0a      	ldr	r2, [pc, #40]	@ (8003690 <SysTick_Config+0x40>)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3b01      	subs	r3, #1
 800366c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800366e:	210f      	movs	r1, #15
 8003670:	f04f 30ff 	mov.w	r0, #4294967295
 8003674:	f7ff ff90 	bl	8003598 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003678:	4b05      	ldr	r3, [pc, #20]	@ (8003690 <SysTick_Config+0x40>)
 800367a:	2200      	movs	r2, #0
 800367c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800367e:	4b04      	ldr	r3, [pc, #16]	@ (8003690 <SysTick_Config+0x40>)
 8003680:	2207      	movs	r2, #7
 8003682:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	e000e010 	.word	0xe000e010

08003694 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7ff ff2d 	bl	80034fc <__NVIC_SetPriorityGrouping>
}
 80036a2:	bf00      	nop
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b086      	sub	sp, #24
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	4603      	mov	r3, r0
 80036b2:	60b9      	str	r1, [r7, #8]
 80036b4:	607a      	str	r2, [r7, #4]
 80036b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80036b8:	2300      	movs	r3, #0
 80036ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036bc:	f7ff ff42 	bl	8003544 <__NVIC_GetPriorityGrouping>
 80036c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	68b9      	ldr	r1, [r7, #8]
 80036c6:	6978      	ldr	r0, [r7, #20]
 80036c8:	f7ff ff90 	bl	80035ec <NVIC_EncodePriority>
 80036cc:	4602      	mov	r2, r0
 80036ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036d2:	4611      	mov	r1, r2
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff ff5f 	bl	8003598 <__NVIC_SetPriority>
}
 80036da:	bf00      	nop
 80036dc:	3718      	adds	r7, #24
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b082      	sub	sp, #8
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	4603      	mov	r3, r0
 80036ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7ff ff35 	bl	8003560 <__NVIC_EnableIRQ>
}
 80036f6:	bf00      	nop
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b082      	sub	sp, #8
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7ff ffa2 	bl	8003650 <SysTick_Config>
 800370c:	4603      	mov	r3, r0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
	...

08003718 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003718:	b480      	push	{r7}
 800371a:	b087      	sub	sp, #28
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003722:	2300      	movs	r3, #0
 8003724:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003726:	2300      	movs	r3, #0
 8003728:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800372a:	2300      	movs	r3, #0
 800372c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800372e:	e160      	b.n	80039f2 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	2101      	movs	r1, #1
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	fa01 f303 	lsl.w	r3, r1, r3
 800373c:	4013      	ands	r3, r2
 800373e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2b00      	cmp	r3, #0
 8003744:	f000 8152 	beq.w	80039ec <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f003 0303 	and.w	r3, r3, #3
 8003750:	2b01      	cmp	r3, #1
 8003752:	d005      	beq.n	8003760 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800375c:	2b02      	cmp	r3, #2
 800375e:	d130      	bne.n	80037c2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	2203      	movs	r2, #3
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	43db      	mvns	r3, r3
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	4013      	ands	r3, r2
 8003776:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	68da      	ldr	r2, [r3, #12]
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	4313      	orrs	r3, r2
 8003788:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8003796:	2201      	movs	r2, #1
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	fa02 f303 	lsl.w	r3, r2, r3
 800379e:	43db      	mvns	r3, r3
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	4013      	ands	r3, r2
 80037a4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	091b      	lsrs	r3, r3, #4
 80037ac:	f003 0201 	and.w	r2, r3, #1
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	fa02 f303 	lsl.w	r3, r2, r3
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f003 0303 	and.w	r3, r3, #3
 80037ca:	2b03      	cmp	r3, #3
 80037cc:	d017      	beq.n	80037fe <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	2203      	movs	r2, #3
 80037da:	fa02 f303 	lsl.w	r3, r2, r3
 80037de:	43db      	mvns	r3, r3
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	4013      	ands	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	689a      	ldr	r2, [r3, #8]
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	2b02      	cmp	r3, #2
 8003808:	d123      	bne.n	8003852 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	08da      	lsrs	r2, r3, #3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	3208      	adds	r2, #8
 8003812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003816:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	220f      	movs	r2, #15
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	43db      	mvns	r3, r3
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	4013      	ands	r3, r2
 800382c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	691a      	ldr	r2, [r3, #16]
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	fa02 f303 	lsl.w	r3, r2, r3
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	4313      	orrs	r3, r2
 8003842:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	08da      	lsrs	r2, r3, #3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	3208      	adds	r2, #8
 800384c:	6939      	ldr	r1, [r7, #16]
 800384e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	2203      	movs	r2, #3
 800385e:	fa02 f303 	lsl.w	r3, r2, r3
 8003862:	43db      	mvns	r3, r3
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	4013      	ands	r3, r2
 8003868:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f003 0203 	and.w	r2, r3, #3
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	fa02 f303 	lsl.w	r3, r2, r3
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	4313      	orrs	r3, r2
 800387e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 80ac 	beq.w	80039ec <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003894:	4b5e      	ldr	r3, [pc, #376]	@ (8003a10 <HAL_GPIO_Init+0x2f8>)
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	4a5d      	ldr	r2, [pc, #372]	@ (8003a10 <HAL_GPIO_Init+0x2f8>)
 800389a:	f043 0301 	orr.w	r3, r3, #1
 800389e:	6213      	str	r3, [r2, #32]
 80038a0:	4b5b      	ldr	r3, [pc, #364]	@ (8003a10 <HAL_GPIO_Init+0x2f8>)
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	60bb      	str	r3, [r7, #8]
 80038aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80038ac:	4a59      	ldr	r2, [pc, #356]	@ (8003a14 <HAL_GPIO_Init+0x2fc>)
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	089b      	lsrs	r3, r3, #2
 80038b2:	3302      	adds	r3, #2
 80038b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038b8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f003 0303 	and.w	r3, r3, #3
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	220f      	movs	r2, #15
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	43db      	mvns	r3, r3
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	4013      	ands	r3, r2
 80038ce:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a51      	ldr	r2, [pc, #324]	@ (8003a18 <HAL_GPIO_Init+0x300>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d025      	beq.n	8003924 <HAL_GPIO_Init+0x20c>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a50      	ldr	r2, [pc, #320]	@ (8003a1c <HAL_GPIO_Init+0x304>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d01f      	beq.n	8003920 <HAL_GPIO_Init+0x208>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a4f      	ldr	r2, [pc, #316]	@ (8003a20 <HAL_GPIO_Init+0x308>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d019      	beq.n	800391c <HAL_GPIO_Init+0x204>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a4e      	ldr	r2, [pc, #312]	@ (8003a24 <HAL_GPIO_Init+0x30c>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d013      	beq.n	8003918 <HAL_GPIO_Init+0x200>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a4d      	ldr	r2, [pc, #308]	@ (8003a28 <HAL_GPIO_Init+0x310>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d00d      	beq.n	8003914 <HAL_GPIO_Init+0x1fc>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a4c      	ldr	r2, [pc, #304]	@ (8003a2c <HAL_GPIO_Init+0x314>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d007      	beq.n	8003910 <HAL_GPIO_Init+0x1f8>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a4b      	ldr	r2, [pc, #300]	@ (8003a30 <HAL_GPIO_Init+0x318>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d101      	bne.n	800390c <HAL_GPIO_Init+0x1f4>
 8003908:	2306      	movs	r3, #6
 800390a:	e00c      	b.n	8003926 <HAL_GPIO_Init+0x20e>
 800390c:	2307      	movs	r3, #7
 800390e:	e00a      	b.n	8003926 <HAL_GPIO_Init+0x20e>
 8003910:	2305      	movs	r3, #5
 8003912:	e008      	b.n	8003926 <HAL_GPIO_Init+0x20e>
 8003914:	2304      	movs	r3, #4
 8003916:	e006      	b.n	8003926 <HAL_GPIO_Init+0x20e>
 8003918:	2303      	movs	r3, #3
 800391a:	e004      	b.n	8003926 <HAL_GPIO_Init+0x20e>
 800391c:	2302      	movs	r3, #2
 800391e:	e002      	b.n	8003926 <HAL_GPIO_Init+0x20e>
 8003920:	2301      	movs	r3, #1
 8003922:	e000      	b.n	8003926 <HAL_GPIO_Init+0x20e>
 8003924:	2300      	movs	r3, #0
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	f002 0203 	and.w	r2, r2, #3
 800392c:	0092      	lsls	r2, r2, #2
 800392e:	4093      	lsls	r3, r2
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	4313      	orrs	r3, r2
 8003934:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003936:	4937      	ldr	r1, [pc, #220]	@ (8003a14 <HAL_GPIO_Init+0x2fc>)
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	089b      	lsrs	r3, r3, #2
 800393c:	3302      	adds	r3, #2
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003944:	4b3b      	ldr	r3, [pc, #236]	@ (8003a34 <HAL_GPIO_Init+0x31c>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	43db      	mvns	r3, r3
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	4013      	ands	r3, r2
 8003952:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d003      	beq.n	8003968 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	4313      	orrs	r3, r2
 8003966:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003968:	4a32      	ldr	r2, [pc, #200]	@ (8003a34 <HAL_GPIO_Init+0x31c>)
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800396e:	4b31      	ldr	r3, [pc, #196]	@ (8003a34 <HAL_GPIO_Init+0x31c>)
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	43db      	mvns	r3, r3
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	4013      	ands	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d003      	beq.n	8003992 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4313      	orrs	r3, r2
 8003990:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003992:	4a28      	ldr	r2, [pc, #160]	@ (8003a34 <HAL_GPIO_Init+0x31c>)
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003998:	4b26      	ldr	r3, [pc, #152]	@ (8003a34 <HAL_GPIO_Init+0x31c>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	43db      	mvns	r3, r3
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	4013      	ands	r3, r2
 80039a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d003      	beq.n	80039bc <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80039bc:	4a1d      	ldr	r2, [pc, #116]	@ (8003a34 <HAL_GPIO_Init+0x31c>)
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039c2:	4b1c      	ldr	r3, [pc, #112]	@ (8003a34 <HAL_GPIO_Init+0x31c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	43db      	mvns	r3, r3
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	4013      	ands	r3, r2
 80039d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d003      	beq.n	80039e6 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80039e6:	4a13      	ldr	r2, [pc, #76]	@ (8003a34 <HAL_GPIO_Init+0x31c>)
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	3301      	adds	r3, #1
 80039f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	fa22 f303 	lsr.w	r3, r2, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f47f ae97 	bne.w	8003730 <HAL_GPIO_Init+0x18>
  }
}
 8003a02:	bf00      	nop
 8003a04:	bf00      	nop
 8003a06:	371c      	adds	r7, #28
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bc80      	pop	{r7}
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	40023800 	.word	0x40023800
 8003a14:	40010000 	.word	0x40010000
 8003a18:	40020000 	.word	0x40020000
 8003a1c:	40020400 	.word	0x40020400
 8003a20:	40020800 	.word	0x40020800
 8003a24:	40020c00 	.word	0x40020c00
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	40021400 	.word	0x40021400
 8003a30:	40021800 	.word	0x40021800
 8003a34:	40010400 	.word	0x40010400

08003a38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	460b      	mov	r3, r1
 8003a42:	807b      	strh	r3, [r7, #2]
 8003a44:	4613      	mov	r3, r2
 8003a46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a48:	787b      	ldrb	r3, [r7, #1]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a4e:	887a      	ldrh	r2, [r7, #2]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8003a54:	e003      	b.n	8003a5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8003a56:	887b      	ldrh	r3, [r7, #2]
 8003a58:	041a      	lsls	r2, r3, #16
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	619a      	str	r2, [r3, #24]
}
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bc80      	pop	{r7}
 8003a66:	4770      	bx	lr

08003a68 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	460b      	mov	r3, r1
 8003a72:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a7a:	887a      	ldrh	r2, [r7, #2]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4013      	ands	r3, r2
 8003a80:	041a      	lsls	r2, r3, #16
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	43d9      	mvns	r1, r3
 8003a86:	887b      	ldrh	r3, [r7, #2]
 8003a88:	400b      	ands	r3, r1
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	619a      	str	r2, [r3, #24]
}
 8003a90:	bf00      	nop
 8003a92:	3714      	adds	r7, #20
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bc80      	pop	{r7}
 8003a98:	4770      	bx	lr
	...

08003a9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003aa6:	4b08      	ldr	r3, [pc, #32]	@ (8003ac8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003aa8:	695a      	ldr	r2, [r3, #20]
 8003aaa:	88fb      	ldrh	r3, [r7, #6]
 8003aac:	4013      	ands	r3, r2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d006      	beq.n	8003ac0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ab2:	4a05      	ldr	r2, [pc, #20]	@ (8003ac8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ab4:	88fb      	ldrh	r3, [r7, #6]
 8003ab6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ab8:	88fb      	ldrh	r3, [r7, #6]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fe fa2a 	bl	8001f14 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ac0:	bf00      	nop
 8003ac2:	3708      	adds	r7, #8
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40010400 	.word	0x40010400

08003acc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e12b      	b.n	8003d36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d106      	bne.n	8003af8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7fe fbe8 	bl	80022c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2224      	movs	r2, #36	@ 0x24
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 0201 	bic.w	r2, r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b30:	f001 fd5e 	bl	80055f0 <HAL_RCC_GetPCLK1Freq>
 8003b34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	4a81      	ldr	r2, [pc, #516]	@ (8003d40 <HAL_I2C_Init+0x274>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d807      	bhi.n	8003b50 <HAL_I2C_Init+0x84>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4a80      	ldr	r2, [pc, #512]	@ (8003d44 <HAL_I2C_Init+0x278>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	bf94      	ite	ls
 8003b48:	2301      	movls	r3, #1
 8003b4a:	2300      	movhi	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	e006      	b.n	8003b5e <HAL_I2C_Init+0x92>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4a7d      	ldr	r2, [pc, #500]	@ (8003d48 <HAL_I2C_Init+0x27c>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	bf94      	ite	ls
 8003b58:	2301      	movls	r3, #1
 8003b5a:	2300      	movhi	r3, #0
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e0e7      	b.n	8003d36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	4a78      	ldr	r2, [pc, #480]	@ (8003d4c <HAL_I2C_Init+0x280>)
 8003b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6e:	0c9b      	lsrs	r3, r3, #18
 8003b70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68ba      	ldr	r2, [r7, #8]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	4a6a      	ldr	r2, [pc, #424]	@ (8003d40 <HAL_I2C_Init+0x274>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d802      	bhi.n	8003ba0 <HAL_I2C_Init+0xd4>
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	e009      	b.n	8003bb4 <HAL_I2C_Init+0xe8>
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003ba6:	fb02 f303 	mul.w	r3, r2, r3
 8003baa:	4a69      	ldr	r2, [pc, #420]	@ (8003d50 <HAL_I2C_Init+0x284>)
 8003bac:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb0:	099b      	lsrs	r3, r3, #6
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	6812      	ldr	r2, [r2, #0]
 8003bb8:	430b      	orrs	r3, r1
 8003bba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003bc6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	495c      	ldr	r1, [pc, #368]	@ (8003d40 <HAL_I2C_Init+0x274>)
 8003bd0:	428b      	cmp	r3, r1
 8003bd2:	d819      	bhi.n	8003c08 <HAL_I2C_Init+0x13c>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	1e59      	subs	r1, r3, #1
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	fbb1 f3f3 	udiv	r3, r1, r3
 8003be2:	1c59      	adds	r1, r3, #1
 8003be4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003be8:	400b      	ands	r3, r1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00a      	beq.n	8003c04 <HAL_I2C_Init+0x138>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	1e59      	subs	r1, r3, #1
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c02:	e051      	b.n	8003ca8 <HAL_I2C_Init+0x1dc>
 8003c04:	2304      	movs	r3, #4
 8003c06:	e04f      	b.n	8003ca8 <HAL_I2C_Init+0x1dc>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d111      	bne.n	8003c34 <HAL_I2C_Init+0x168>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	1e58      	subs	r0, r3, #1
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6859      	ldr	r1, [r3, #4]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	440b      	add	r3, r1
 8003c1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c22:	3301      	adds	r3, #1
 8003c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	bf0c      	ite	eq
 8003c2c:	2301      	moveq	r3, #1
 8003c2e:	2300      	movne	r3, #0
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	e012      	b.n	8003c5a <HAL_I2C_Init+0x18e>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	1e58      	subs	r0, r3, #1
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6859      	ldr	r1, [r3, #4]
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	440b      	add	r3, r1
 8003c42:	0099      	lsls	r1, r3, #2
 8003c44:	440b      	add	r3, r1
 8003c46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	bf0c      	ite	eq
 8003c54:	2301      	moveq	r3, #1
 8003c56:	2300      	movne	r3, #0
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <HAL_I2C_Init+0x196>
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e022      	b.n	8003ca8 <HAL_I2C_Init+0x1dc>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10e      	bne.n	8003c88 <HAL_I2C_Init+0x1bc>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	1e58      	subs	r0, r3, #1
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6859      	ldr	r1, [r3, #4]
 8003c72:	460b      	mov	r3, r1
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	440b      	add	r3, r1
 8003c78:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c86:	e00f      	b.n	8003ca8 <HAL_I2C_Init+0x1dc>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	1e58      	subs	r0, r3, #1
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6859      	ldr	r1, [r3, #4]
 8003c90:	460b      	mov	r3, r1
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	440b      	add	r3, r1
 8003c96:	0099      	lsls	r1, r3, #2
 8003c98:	440b      	add	r3, r1
 8003c9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ca4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ca8:	6879      	ldr	r1, [r7, #4]
 8003caa:	6809      	ldr	r1, [r1, #0]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	69da      	ldr	r2, [r3, #28]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003cd6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6911      	ldr	r1, [r2, #16]
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	68d2      	ldr	r2, [r2, #12]
 8003ce2:	4311      	orrs	r1, r2
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6812      	ldr	r2, [r2, #0]
 8003ce8:	430b      	orrs	r3, r1
 8003cea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	695a      	ldr	r2, [r3, #20]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f042 0201 	orr.w	r2, r2, #1
 8003d16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2220      	movs	r2, #32
 8003d22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	000186a0 	.word	0x000186a0
 8003d44:	001e847f 	.word	0x001e847f
 8003d48:	003d08ff 	.word	0x003d08ff
 8003d4c:	431bde83 	.word	0x431bde83
 8003d50:	10624dd3 	.word	0x10624dd3

08003d54 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b088      	sub	sp, #32
 8003d58:	af02      	add	r7, sp, #8
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	4608      	mov	r0, r1
 8003d5e:	4611      	mov	r1, r2
 8003d60:	461a      	mov	r2, r3
 8003d62:	4603      	mov	r3, r0
 8003d64:	817b      	strh	r3, [r7, #10]
 8003d66:	460b      	mov	r3, r1
 8003d68:	813b      	strh	r3, [r7, #8]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d6e:	f7fe fda7 	bl	80028c0 <HAL_GetTick>
 8003d72:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b20      	cmp	r3, #32
 8003d7e:	f040 80d9 	bne.w	8003f34 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	9300      	str	r3, [sp, #0]
 8003d86:	2319      	movs	r3, #25
 8003d88:	2201      	movs	r2, #1
 8003d8a:	496d      	ldr	r1, [pc, #436]	@ (8003f40 <HAL_I2C_Mem_Write+0x1ec>)
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f000 fc8b 	bl	80046a8 <I2C_WaitOnFlagUntilTimeout>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003d98:	2302      	movs	r3, #2
 8003d9a:	e0cc      	b.n	8003f36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d101      	bne.n	8003daa <HAL_I2C_Mem_Write+0x56>
 8003da6:	2302      	movs	r3, #2
 8003da8:	e0c5      	b.n	8003f36 <HAL_I2C_Mem_Write+0x1e2>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d007      	beq.n	8003dd0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f042 0201 	orr.w	r2, r2, #1
 8003dce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003dde:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2221      	movs	r2, #33	@ 0x21
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2240      	movs	r2, #64	@ 0x40
 8003dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6a3a      	ldr	r2, [r7, #32]
 8003dfa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003e00:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4a4d      	ldr	r2, [pc, #308]	@ (8003f44 <HAL_I2C_Mem_Write+0x1f0>)
 8003e10:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e12:	88f8      	ldrh	r0, [r7, #6]
 8003e14:	893a      	ldrh	r2, [r7, #8]
 8003e16:	8979      	ldrh	r1, [r7, #10]
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	9301      	str	r3, [sp, #4]
 8003e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e1e:	9300      	str	r3, [sp, #0]
 8003e20:	4603      	mov	r3, r0
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f000 fac2 	bl	80043ac <I2C_RequestMemoryWrite>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d052      	beq.n	8003ed4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e081      	b.n	8003f36 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f000 fd50 	bl	80048dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00d      	beq.n	8003e5e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e46:	2b04      	cmp	r3, #4
 8003e48:	d107      	bne.n	8003e5a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e06b      	b.n	8003f36 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e62:	781a      	ldrb	r2, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6e:	1c5a      	adds	r2, r3, #1
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	3b01      	subs	r3, #1
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	f003 0304 	and.w	r3, r3, #4
 8003e98:	2b04      	cmp	r3, #4
 8003e9a:	d11b      	bne.n	8003ed4 <HAL_I2C_Mem_Write+0x180>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d017      	beq.n	8003ed4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea8:	781a      	ldrb	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb4:	1c5a      	adds	r2, r3, #1
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1aa      	bne.n	8003e32 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f000 fd43 	bl	800496c <I2C_WaitOnBTFFlagUntilTimeout>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00d      	beq.n	8003f08 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef0:	2b04      	cmp	r3, #4
 8003ef2:	d107      	bne.n	8003f04 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f02:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e016      	b.n	8003f36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003f30:	2300      	movs	r3, #0
 8003f32:	e000      	b.n	8003f36 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003f34:	2302      	movs	r3, #2
  }
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3718      	adds	r7, #24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	00100002 	.word	0x00100002
 8003f44:	ffff0000 	.word	0xffff0000

08003f48 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b08c      	sub	sp, #48	@ 0x30
 8003f4c:	af02      	add	r7, sp, #8
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	4608      	mov	r0, r1
 8003f52:	4611      	mov	r1, r2
 8003f54:	461a      	mov	r2, r3
 8003f56:	4603      	mov	r3, r0
 8003f58:	817b      	strh	r3, [r7, #10]
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	813b      	strh	r3, [r7, #8]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f62:	f7fe fcad 	bl	80028c0 <HAL_GetTick>
 8003f66:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b20      	cmp	r3, #32
 8003f72:	f040 8214 	bne.w	800439e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	2319      	movs	r3, #25
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	497b      	ldr	r1, [pc, #492]	@ (800416c <HAL_I2C_Mem_Read+0x224>)
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 fb91 	bl	80046a8 <I2C_WaitOnFlagUntilTimeout>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	e207      	b.n	80043a0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d101      	bne.n	8003f9e <HAL_I2C_Mem_Read+0x56>
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	e200      	b.n	80043a0 <HAL_I2C_Mem_Read+0x458>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d007      	beq.n	8003fc4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f042 0201 	orr.w	r2, r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fd2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2222      	movs	r2, #34	@ 0x22
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2240      	movs	r2, #64	@ 0x40
 8003fe0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003ff4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4a5b      	ldr	r2, [pc, #364]	@ (8004170 <HAL_I2C_Mem_Read+0x228>)
 8004004:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004006:	88f8      	ldrh	r0, [r7, #6]
 8004008:	893a      	ldrh	r2, [r7, #8]
 800400a:	8979      	ldrh	r1, [r7, #10]
 800400c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400e:	9301      	str	r3, [sp, #4]
 8004010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004012:	9300      	str	r3, [sp, #0]
 8004014:	4603      	mov	r3, r0
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f000 fa5e 	bl	80044d8 <I2C_RequestMemoryRead>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e1bc      	b.n	80043a0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800402a:	2b00      	cmp	r3, #0
 800402c:	d113      	bne.n	8004056 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800402e:	2300      	movs	r3, #0
 8004030:	623b      	str	r3, [r7, #32]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	623b      	str	r3, [r7, #32]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	623b      	str	r3, [r7, #32]
 8004042:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	e190      	b.n	8004378 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800405a:	2b01      	cmp	r3, #1
 800405c:	d11b      	bne.n	8004096 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800406c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800406e:	2300      	movs	r3, #0
 8004070:	61fb      	str	r3, [r7, #28]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	61fb      	str	r3, [r7, #28]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	61fb      	str	r3, [r7, #28]
 8004082:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	e170      	b.n	8004378 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800409a:	2b02      	cmp	r3, #2
 800409c:	d11b      	bne.n	80040d6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040ac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040be:	2300      	movs	r3, #0
 80040c0:	61bb      	str	r3, [r7, #24]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	61bb      	str	r3, [r7, #24]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	61bb      	str	r3, [r7, #24]
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	e150      	b.n	8004378 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040d6:	2300      	movs	r3, #0
 80040d8:	617b      	str	r3, [r7, #20]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	617b      	str	r3, [r7, #20]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	617b      	str	r3, [r7, #20]
 80040ea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80040ec:	e144      	b.n	8004378 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040f2:	2b03      	cmp	r3, #3
 80040f4:	f200 80f1 	bhi.w	80042da <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d123      	bne.n	8004148 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004100:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004102:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f000 fc79 	bl	80049fc <I2C_WaitOnRXNEFlagUntilTimeout>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e145      	b.n	80043a0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	691a      	ldr	r2, [r3, #16]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411e:	b2d2      	uxtb	r2, r2
 8004120:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004126:	1c5a      	adds	r2, r3, #1
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004130:	3b01      	subs	r3, #1
 8004132:	b29a      	uxth	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800413c:	b29b      	uxth	r3, r3
 800413e:	3b01      	subs	r3, #1
 8004140:	b29a      	uxth	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004146:	e117      	b.n	8004378 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800414c:	2b02      	cmp	r3, #2
 800414e:	d14e      	bne.n	80041ee <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004156:	2200      	movs	r2, #0
 8004158:	4906      	ldr	r1, [pc, #24]	@ (8004174 <HAL_I2C_Mem_Read+0x22c>)
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	f000 faa4 	bl	80046a8 <I2C_WaitOnFlagUntilTimeout>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d008      	beq.n	8004178 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e11a      	b.n	80043a0 <HAL_I2C_Mem_Read+0x458>
 800416a:	bf00      	nop
 800416c:	00100002 	.word	0x00100002
 8004170:	ffff0000 	.word	0xffff0000
 8004174:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004186:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	691a      	ldr	r2, [r3, #16]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004192:	b2d2      	uxtb	r2, r2
 8004194:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419a:	1c5a      	adds	r2, r3, #1
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041a4:	3b01      	subs	r3, #1
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	3b01      	subs	r3, #1
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	691a      	ldr	r2, [r3, #16]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c4:	b2d2      	uxtb	r2, r2
 80041c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041cc:	1c5a      	adds	r2, r3, #1
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041d6:	3b01      	subs	r3, #1
 80041d8:	b29a      	uxth	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	3b01      	subs	r3, #1
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80041ec:	e0c4      	b.n	8004378 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041f4:	2200      	movs	r2, #0
 80041f6:	496c      	ldr	r1, [pc, #432]	@ (80043a8 <HAL_I2C_Mem_Read+0x460>)
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f000 fa55 	bl	80046a8 <I2C_WaitOnFlagUntilTimeout>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e0cb      	b.n	80043a0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004216:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	691a      	ldr	r2, [r3, #16]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422a:	1c5a      	adds	r2, r3, #1
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004234:	3b01      	subs	r3, #1
 8004236:	b29a      	uxth	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004240:	b29b      	uxth	r3, r3
 8004242:	3b01      	subs	r3, #1
 8004244:	b29a      	uxth	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800424a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424c:	9300      	str	r3, [sp, #0]
 800424e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004250:	2200      	movs	r2, #0
 8004252:	4955      	ldr	r1, [pc, #340]	@ (80043a8 <HAL_I2C_Mem_Read+0x460>)
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f000 fa27 	bl	80046a8 <I2C_WaitOnFlagUntilTimeout>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e09d      	b.n	80043a0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004272:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	691a      	ldr	r2, [r3, #16]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427e:	b2d2      	uxtb	r2, r2
 8004280:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004286:	1c5a      	adds	r2, r3, #1
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004290:	3b01      	subs	r3, #1
 8004292:	b29a      	uxth	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800429c:	b29b      	uxth	r3, r3
 800429e:	3b01      	subs	r3, #1
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	691a      	ldr	r2, [r3, #16]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b0:	b2d2      	uxtb	r2, r2
 80042b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b8:	1c5a      	adds	r2, r3, #1
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042c2:	3b01      	subs	r3, #1
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	3b01      	subs	r3, #1
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80042d8:	e04e      	b.n	8004378 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042dc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f000 fb8c 	bl	80049fc <I2C_WaitOnRXNEFlagUntilTimeout>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e058      	b.n	80043a0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	691a      	ldr	r2, [r3, #16]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f8:	b2d2      	uxtb	r2, r2
 80042fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004300:	1c5a      	adds	r2, r3, #1
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800430a:	3b01      	subs	r3, #1
 800430c:	b29a      	uxth	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004316:	b29b      	uxth	r3, r3
 8004318:	3b01      	subs	r3, #1
 800431a:	b29a      	uxth	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	f003 0304 	and.w	r3, r3, #4
 800432a:	2b04      	cmp	r3, #4
 800432c:	d124      	bne.n	8004378 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004332:	2b03      	cmp	r3, #3
 8004334:	d107      	bne.n	8004346 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004344:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	691a      	ldr	r2, [r3, #16]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004350:	b2d2      	uxtb	r2, r2
 8004352:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004358:	1c5a      	adds	r2, r3, #1
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004362:	3b01      	subs	r3, #1
 8004364:	b29a      	uxth	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800436e:	b29b      	uxth	r3, r3
 8004370:	3b01      	subs	r3, #1
 8004372:	b29a      	uxth	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800437c:	2b00      	cmp	r3, #0
 800437e:	f47f aeb6 	bne.w	80040ee <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2220      	movs	r2, #32
 8004386:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800439a:	2300      	movs	r3, #0
 800439c:	e000      	b.n	80043a0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800439e:	2302      	movs	r3, #2
  }
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3728      	adds	r7, #40	@ 0x28
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	00010004 	.word	0x00010004

080043ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b088      	sub	sp, #32
 80043b0:	af02      	add	r7, sp, #8
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	4608      	mov	r0, r1
 80043b6:	4611      	mov	r1, r2
 80043b8:	461a      	mov	r2, r3
 80043ba:	4603      	mov	r3, r0
 80043bc:	817b      	strh	r3, [r7, #10]
 80043be:	460b      	mov	r3, r1
 80043c0:	813b      	strh	r3, [r7, #8]
 80043c2:	4613      	mov	r3, r2
 80043c4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	6a3b      	ldr	r3, [r7, #32]
 80043dc:	2200      	movs	r2, #0
 80043de:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f000 f960 	bl	80046a8 <I2C_WaitOnFlagUntilTimeout>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00d      	beq.n	800440a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043fc:	d103      	bne.n	8004406 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004404:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e05f      	b.n	80044ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800440a:	897b      	ldrh	r3, [r7, #10]
 800440c:	b2db      	uxtb	r3, r3
 800440e:	461a      	mov	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004418:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800441a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441c:	6a3a      	ldr	r2, [r7, #32]
 800441e:	492d      	ldr	r1, [pc, #180]	@ (80044d4 <I2C_RequestMemoryWrite+0x128>)
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f000 f9bb 	bl	800479c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e04c      	b.n	80044ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004430:	2300      	movs	r3, #0
 8004432:	617b      	str	r3, [r7, #20]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	617b      	str	r3, [r7, #20]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	617b      	str	r3, [r7, #20]
 8004444:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004446:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004448:	6a39      	ldr	r1, [r7, #32]
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f000 fa46 	bl	80048dc <I2C_WaitOnTXEFlagUntilTimeout>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00d      	beq.n	8004472 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800445a:	2b04      	cmp	r3, #4
 800445c:	d107      	bne.n	800446e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800446c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e02b      	b.n	80044ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004472:	88fb      	ldrh	r3, [r7, #6]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d105      	bne.n	8004484 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004478:	893b      	ldrh	r3, [r7, #8]
 800447a:	b2da      	uxtb	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	611a      	str	r2, [r3, #16]
 8004482:	e021      	b.n	80044c8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004484:	893b      	ldrh	r3, [r7, #8]
 8004486:	0a1b      	lsrs	r3, r3, #8
 8004488:	b29b      	uxth	r3, r3
 800448a:	b2da      	uxtb	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004492:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004494:	6a39      	ldr	r1, [r7, #32]
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f000 fa20 	bl	80048dc <I2C_WaitOnTXEFlagUntilTimeout>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00d      	beq.n	80044be <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a6:	2b04      	cmp	r3, #4
 80044a8:	d107      	bne.n	80044ba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e005      	b.n	80044ca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044be:	893b      	ldrh	r3, [r7, #8]
 80044c0:	b2da      	uxtb	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3718      	adds	r7, #24
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	00010002 	.word	0x00010002

080044d8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b088      	sub	sp, #32
 80044dc:	af02      	add	r7, sp, #8
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	4608      	mov	r0, r1
 80044e2:	4611      	mov	r1, r2
 80044e4:	461a      	mov	r2, r3
 80044e6:	4603      	mov	r3, r0
 80044e8:	817b      	strh	r3, [r7, #10]
 80044ea:	460b      	mov	r3, r1
 80044ec:	813b      	strh	r3, [r7, #8]
 80044ee:	4613      	mov	r3, r2
 80044f0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004500:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004510:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	6a3b      	ldr	r3, [r7, #32]
 8004518:	2200      	movs	r2, #0
 800451a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	f000 f8c2 	bl	80046a8 <I2C_WaitOnFlagUntilTimeout>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00d      	beq.n	8004546 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004534:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004538:	d103      	bne.n	8004542 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004540:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e0aa      	b.n	800469c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004546:	897b      	ldrh	r3, [r7, #10]
 8004548:	b2db      	uxtb	r3, r3
 800454a:	461a      	mov	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004554:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004558:	6a3a      	ldr	r2, [r7, #32]
 800455a:	4952      	ldr	r1, [pc, #328]	@ (80046a4 <I2C_RequestMemoryRead+0x1cc>)
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f000 f91d 	bl	800479c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d001      	beq.n	800456c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e097      	b.n	800469c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800456c:	2300      	movs	r3, #0
 800456e:	617b      	str	r3, [r7, #20]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	617b      	str	r3, [r7, #20]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	617b      	str	r3, [r7, #20]
 8004580:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004584:	6a39      	ldr	r1, [r7, #32]
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f000 f9a8 	bl	80048dc <I2C_WaitOnTXEFlagUntilTimeout>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00d      	beq.n	80045ae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004596:	2b04      	cmp	r3, #4
 8004598:	d107      	bne.n	80045aa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e076      	b.n	800469c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045ae:	88fb      	ldrh	r3, [r7, #6]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d105      	bne.n	80045c0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045b4:	893b      	ldrh	r3, [r7, #8]
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	611a      	str	r2, [r3, #16]
 80045be:	e021      	b.n	8004604 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045c0:	893b      	ldrh	r3, [r7, #8]
 80045c2:	0a1b      	lsrs	r3, r3, #8
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	b2da      	uxtb	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045d0:	6a39      	ldr	r1, [r7, #32]
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f000 f982 	bl	80048dc <I2C_WaitOnTXEFlagUntilTimeout>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00d      	beq.n	80045fa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	d107      	bne.n	80045f6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e050      	b.n	800469c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045fa:	893b      	ldrh	r3, [r7, #8]
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004604:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004606:	6a39      	ldr	r1, [r7, #32]
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f000 f967 	bl	80048dc <I2C_WaitOnTXEFlagUntilTimeout>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00d      	beq.n	8004630 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004618:	2b04      	cmp	r3, #4
 800461a:	d107      	bne.n	800462c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800462a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e035      	b.n	800469c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800463e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	6a3b      	ldr	r3, [r7, #32]
 8004646:	2200      	movs	r2, #0
 8004648:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f000 f82b 	bl	80046a8 <I2C_WaitOnFlagUntilTimeout>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00d      	beq.n	8004674 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004662:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004666:	d103      	bne.n	8004670 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800466e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e013      	b.n	800469c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004674:	897b      	ldrh	r3, [r7, #10]
 8004676:	b2db      	uxtb	r3, r3
 8004678:	f043 0301 	orr.w	r3, r3, #1
 800467c:	b2da      	uxtb	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004686:	6a3a      	ldr	r2, [r7, #32]
 8004688:	4906      	ldr	r1, [pc, #24]	@ (80046a4 <I2C_RequestMemoryRead+0x1cc>)
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f000 f886 	bl	800479c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e000      	b.n	800469c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3718      	adds	r7, #24
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	00010002 	.word	0x00010002

080046a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	603b      	str	r3, [r7, #0]
 80046b4:	4613      	mov	r3, r2
 80046b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046b8:	e048      	b.n	800474c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c0:	d044      	beq.n	800474c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046c2:	f7fe f8fd 	bl	80028c0 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d302      	bcc.n	80046d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d139      	bne.n	800474c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	0c1b      	lsrs	r3, r3, #16
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d10d      	bne.n	80046fe <I2C_WaitOnFlagUntilTimeout+0x56>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	695b      	ldr	r3, [r3, #20]
 80046e8:	43da      	mvns	r2, r3
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	4013      	ands	r3, r2
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	bf0c      	ite	eq
 80046f4:	2301      	moveq	r3, #1
 80046f6:	2300      	movne	r3, #0
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	461a      	mov	r2, r3
 80046fc:	e00c      	b.n	8004718 <I2C_WaitOnFlagUntilTimeout+0x70>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	43da      	mvns	r2, r3
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	4013      	ands	r3, r2
 800470a:	b29b      	uxth	r3, r3
 800470c:	2b00      	cmp	r3, #0
 800470e:	bf0c      	ite	eq
 8004710:	2301      	moveq	r3, #1
 8004712:	2300      	movne	r3, #0
 8004714:	b2db      	uxtb	r3, r3
 8004716:	461a      	mov	r2, r3
 8004718:	79fb      	ldrb	r3, [r7, #7]
 800471a:	429a      	cmp	r2, r3
 800471c:	d116      	bne.n	800474c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2220      	movs	r2, #32
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004738:	f043 0220 	orr.w	r2, r3, #32
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e023      	b.n	8004794 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	0c1b      	lsrs	r3, r3, #16
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b01      	cmp	r3, #1
 8004754:	d10d      	bne.n	8004772 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	695b      	ldr	r3, [r3, #20]
 800475c:	43da      	mvns	r2, r3
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	4013      	ands	r3, r2
 8004762:	b29b      	uxth	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	bf0c      	ite	eq
 8004768:	2301      	moveq	r3, #1
 800476a:	2300      	movne	r3, #0
 800476c:	b2db      	uxtb	r3, r3
 800476e:	461a      	mov	r2, r3
 8004770:	e00c      	b.n	800478c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	43da      	mvns	r2, r3
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	4013      	ands	r3, r2
 800477e:	b29b      	uxth	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	bf0c      	ite	eq
 8004784:	2301      	moveq	r3, #1
 8004786:	2300      	movne	r3, #0
 8004788:	b2db      	uxtb	r3, r3
 800478a:	461a      	mov	r2, r3
 800478c:	79fb      	ldrb	r3, [r7, #7]
 800478e:	429a      	cmp	r2, r3
 8004790:	d093      	beq.n	80046ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
 80047a8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047aa:	e071      	b.n	8004890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047ba:	d123      	bne.n	8004804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047ca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80047d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2220      	movs	r2, #32
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f0:	f043 0204 	orr.w	r2, r3, #4
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e067      	b.n	80048d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480a:	d041      	beq.n	8004890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800480c:	f7fe f858 	bl	80028c0 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	429a      	cmp	r2, r3
 800481a:	d302      	bcc.n	8004822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d136      	bne.n	8004890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	0c1b      	lsrs	r3, r3, #16
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b01      	cmp	r3, #1
 800482a:	d10c      	bne.n	8004846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	43da      	mvns	r2, r3
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	4013      	ands	r3, r2
 8004838:	b29b      	uxth	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	bf14      	ite	ne
 800483e:	2301      	movne	r3, #1
 8004840:	2300      	moveq	r3, #0
 8004842:	b2db      	uxtb	r3, r3
 8004844:	e00b      	b.n	800485e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	43da      	mvns	r2, r3
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	4013      	ands	r3, r2
 8004852:	b29b      	uxth	r3, r3
 8004854:	2b00      	cmp	r3, #0
 8004856:	bf14      	ite	ne
 8004858:	2301      	movne	r3, #1
 800485a:	2300      	moveq	r3, #0
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d016      	beq.n	8004890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2220      	movs	r2, #32
 800486c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800487c:	f043 0220 	orr.w	r2, r3, #32
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e021      	b.n	80048d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	0c1b      	lsrs	r3, r3, #16
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b01      	cmp	r3, #1
 8004898:	d10c      	bne.n	80048b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	43da      	mvns	r2, r3
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	4013      	ands	r3, r2
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	bf14      	ite	ne
 80048ac:	2301      	movne	r3, #1
 80048ae:	2300      	moveq	r3, #0
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	e00b      	b.n	80048cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	43da      	mvns	r2, r3
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	4013      	ands	r3, r2
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	bf14      	ite	ne
 80048c6:	2301      	movne	r3, #1
 80048c8:	2300      	moveq	r3, #0
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f47f af6d 	bne.w	80047ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048e8:	e034      	b.n	8004954 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f000 f8e3 	bl	8004ab6 <I2C_IsAcknowledgeFailed>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d001      	beq.n	80048fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e034      	b.n	8004964 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004900:	d028      	beq.n	8004954 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004902:	f7fd ffdd 	bl	80028c0 <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	429a      	cmp	r2, r3
 8004910:	d302      	bcc.n	8004918 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d11d      	bne.n	8004954 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004922:	2b80      	cmp	r3, #128	@ 0x80
 8004924:	d016      	beq.n	8004954 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2220      	movs	r2, #32
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004940:	f043 0220 	orr.w	r2, r3, #32
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e007      	b.n	8004964 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800495e:	2b80      	cmp	r3, #128	@ 0x80
 8004960:	d1c3      	bne.n	80048ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004978:	e034      	b.n	80049e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f000 f89b 	bl	8004ab6 <I2C_IsAcknowledgeFailed>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e034      	b.n	80049f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004990:	d028      	beq.n	80049e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004992:	f7fd ff95 	bl	80028c0 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	68ba      	ldr	r2, [r7, #8]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d302      	bcc.n	80049a8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d11d      	bne.n	80049e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	f003 0304 	and.w	r3, r3, #4
 80049b2:	2b04      	cmp	r3, #4
 80049b4:	d016      	beq.n	80049e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2220      	movs	r2, #32
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d0:	f043 0220 	orr.w	r2, r3, #32
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e007      	b.n	80049f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	f003 0304 	and.w	r3, r3, #4
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	d1c3      	bne.n	800497a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3710      	adds	r7, #16
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a08:	e049      	b.n	8004a9e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	f003 0310 	and.w	r3, r3, #16
 8004a14:	2b10      	cmp	r3, #16
 8004a16:	d119      	bne.n	8004a4c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f06f 0210 	mvn.w	r2, #16
 8004a20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e030      	b.n	8004aae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a4c:	f7fd ff38 	bl	80028c0 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d302      	bcc.n	8004a62 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d11d      	bne.n	8004a9e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a6c:	2b40      	cmp	r3, #64	@ 0x40
 8004a6e:	d016      	beq.n	8004a9e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2220      	movs	r2, #32
 8004a7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8a:	f043 0220 	orr.w	r2, r3, #32
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e007      	b.n	8004aae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aa8:	2b40      	cmp	r3, #64	@ 0x40
 8004aaa:	d1ae      	bne.n	8004a0a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b083      	sub	sp, #12
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ac8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004acc:	d11b      	bne.n	8004b06 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004ad6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af2:	f043 0204 	orr.w	r2, r3, #4
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e000      	b.n	8004b08 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bc80      	pop	{r7}
 8004b10:	4770      	bx	lr
	...

08004b14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b088      	sub	sp, #32
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e31d      	b.n	8005162 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b26:	4b94      	ldr	r3, [pc, #592]	@ (8004d78 <HAL_RCC_OscConfig+0x264>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f003 030c 	and.w	r3, r3, #12
 8004b2e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b30:	4b91      	ldr	r3, [pc, #580]	@ (8004d78 <HAL_RCC_OscConfig+0x264>)
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b38:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d07b      	beq.n	8004c3e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	2b08      	cmp	r3, #8
 8004b4a:	d006      	beq.n	8004b5a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	2b0c      	cmp	r3, #12
 8004b50:	d10f      	bne.n	8004b72 <HAL_RCC_OscConfig+0x5e>
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b58:	d10b      	bne.n	8004b72 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b5a:	4b87      	ldr	r3, [pc, #540]	@ (8004d78 <HAL_RCC_OscConfig+0x264>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d06a      	beq.n	8004c3c <HAL_RCC_OscConfig+0x128>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d166      	bne.n	8004c3c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e2f7      	b.n	8005162 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d106      	bne.n	8004b88 <HAL_RCC_OscConfig+0x74>
 8004b7a:	4b7f      	ldr	r3, [pc, #508]	@ (8004d78 <HAL_RCC_OscConfig+0x264>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a7e      	ldr	r2, [pc, #504]	@ (8004d78 <HAL_RCC_OscConfig+0x264>)
 8004b80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b84:	6013      	str	r3, [r2, #0]
 8004b86:	e02d      	b.n	8004be4 <HAL_RCC_OscConfig+0xd0>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d10c      	bne.n	8004baa <HAL_RCC_OscConfig+0x96>
 8004b90:	4b79      	ldr	r3, [pc, #484]	@ (8004d78 <HAL_RCC_OscConfig+0x264>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a78      	ldr	r2, [pc, #480]	@ (8004d78 <HAL_RCC_OscConfig+0x264>)
 8004b96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b9a:	6013      	str	r3, [r2, #0]
 8004b9c:	4b76      	ldr	r3, [pc, #472]	@ (8004d78 <HAL_RCC_OscConfig+0x264>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a75      	ldr	r2, [pc, #468]	@ (8004d78 <HAL_RCC_OscConfig+0x264>)
 8004ba2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ba6:	6013      	str	r3, [r2, #0]
 8004ba8:	e01c      	b.n	8004be4 <HAL_RCC_OscConfig+0xd0>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	2b05      	cmp	r3, #5
 8004bb0:	d10c      	bne.n	8004bcc <HAL_RCC_OscConfig+0xb8>
 8004bb2:	4b71      	ldr	r3, [pc, #452]	@ (8004d78 <HAL_RCC_OscConfig+0x264>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a70      	ldr	r2, [pc, #448]	@ (8004d78 <HAL_RCC_OscConfig+0x264>)
 8004bb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bbc:	6013      	str	r3, [r2, #0]
 8004bbe:	4b6e      	ldr	r3, [pc, #440]	@ (8004d78 <HAL_RCC_OscConfig+0x264>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a6d      	ldr	r2, [pc, #436]	@ (8004d78 <HAL_RCC_OscConfig+0x264>)
 8004bc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bc8:	6013      	str	r3, [r2, #0]
 8004bca:	e00b      	b.n	8004be4 <HAL_RCC_OscConfig+0xd0>
 8004bcc:	4b6a      	ldr	r3, [pc, #424]	@ (8004d78 <HAL_RCC_OscConfig+0x264>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a69      	ldr	r2, [pc, #420]	@ (8004d78 <HAL_RCC_OscConfig+0x264>)
 8004bd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bd6:	6013      	str	r3, [r2, #0]
 8004bd8:	4b67      	ldr	r3, [pc, #412]	@ (8004d78 <HAL_RCC_OscConfig+0x264>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a66      	ldr	r2, [pc, #408]	@ (8004d78 <HAL_RCC_OscConfig+0x264>)
 8004bde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004be2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d013      	beq.n	8004c14 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bec:	f7fd fe68 	bl	80028c0 <HAL_GetTick>
 8004bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004bf2:	e008      	b.n	8004c06 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bf4:	f7fd fe64 	bl	80028c0 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b64      	cmp	r3, #100	@ 0x64
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e2ad      	b.n	8005162 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c06:	4b5c      	ldr	r3, [pc, #368]	@ (8004d78 <HAL_RCC_OscConfig+0x264>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d0f0      	beq.n	8004bf4 <HAL_RCC_OscConfig+0xe0>
 8004c12:	e014      	b.n	8004c3e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c14:	f7fd fe54 	bl	80028c0 <HAL_GetTick>
 8004c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004c1a:	e008      	b.n	8004c2e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c1c:	f7fd fe50 	bl	80028c0 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b64      	cmp	r3, #100	@ 0x64
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e299      	b.n	8005162 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004c2e:	4b52      	ldr	r3, [pc, #328]	@ (8004d78 <HAL_RCC_OscConfig+0x264>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1f0      	bne.n	8004c1c <HAL_RCC_OscConfig+0x108>
 8004c3a:	e000      	b.n	8004c3e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d05a      	beq.n	8004d00 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	2b04      	cmp	r3, #4
 8004c4e:	d005      	beq.n	8004c5c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	2b0c      	cmp	r3, #12
 8004c54:	d119      	bne.n	8004c8a <HAL_RCC_OscConfig+0x176>
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d116      	bne.n	8004c8a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c5c:	4b46      	ldr	r3, [pc, #280]	@ (8004d78 <HAL_RCC_OscConfig+0x264>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d005      	beq.n	8004c74 <HAL_RCC_OscConfig+0x160>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d001      	beq.n	8004c74 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e276      	b.n	8005162 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c74:	4b40      	ldr	r3, [pc, #256]	@ (8004d78 <HAL_RCC_OscConfig+0x264>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	021b      	lsls	r3, r3, #8
 8004c82:	493d      	ldr	r1, [pc, #244]	@ (8004d78 <HAL_RCC_OscConfig+0x264>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c88:	e03a      	b.n	8004d00 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d020      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c92:	4b3a      	ldr	r3, [pc, #232]	@ (8004d7c <HAL_RCC_OscConfig+0x268>)
 8004c94:	2201      	movs	r2, #1
 8004c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c98:	f7fd fe12 	bl	80028c0 <HAL_GetTick>
 8004c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c9e:	e008      	b.n	8004cb2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ca0:	f7fd fe0e 	bl	80028c0 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e257      	b.n	8005162 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004cb2:	4b31      	ldr	r3, [pc, #196]	@ (8004d78 <HAL_RCC_OscConfig+0x264>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d0f0      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cbe:	4b2e      	ldr	r3, [pc, #184]	@ (8004d78 <HAL_RCC_OscConfig+0x264>)
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	021b      	lsls	r3, r3, #8
 8004ccc:	492a      	ldr	r1, [pc, #168]	@ (8004d78 <HAL_RCC_OscConfig+0x264>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	604b      	str	r3, [r1, #4]
 8004cd2:	e015      	b.n	8004d00 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cd4:	4b29      	ldr	r3, [pc, #164]	@ (8004d7c <HAL_RCC_OscConfig+0x268>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cda:	f7fd fdf1 	bl	80028c0 <HAL_GetTick>
 8004cde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ce0:	e008      	b.n	8004cf4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ce2:	f7fd fded 	bl	80028c0 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d901      	bls.n	8004cf4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e236      	b.n	8005162 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004cf4:	4b20      	ldr	r3, [pc, #128]	@ (8004d78 <HAL_RCC_OscConfig+0x264>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0302 	and.w	r3, r3, #2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1f0      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0310 	and.w	r3, r3, #16
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f000 80b8 	beq.w	8004e7e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d170      	bne.n	8004df6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d14:	4b18      	ldr	r3, [pc, #96]	@ (8004d78 <HAL_RCC_OscConfig+0x264>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d005      	beq.n	8004d2c <HAL_RCC_OscConfig+0x218>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d101      	bne.n	8004d2c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e21a      	b.n	8005162 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a1a      	ldr	r2, [r3, #32]
 8004d30:	4b11      	ldr	r3, [pc, #68]	@ (8004d78 <HAL_RCC_OscConfig+0x264>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d921      	bls.n	8004d80 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a1b      	ldr	r3, [r3, #32]
 8004d40:	4618      	mov	r0, r3
 8004d42:	f000 fc7d 	bl	8005640 <RCC_SetFlashLatencyFromMSIRange>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d001      	beq.n	8004d50 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e208      	b.n	8005162 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d50:	4b09      	ldr	r3, [pc, #36]	@ (8004d78 <HAL_RCC_OscConfig+0x264>)
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	4906      	ldr	r1, [pc, #24]	@ (8004d78 <HAL_RCC_OscConfig+0x264>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d62:	4b05      	ldr	r3, [pc, #20]	@ (8004d78 <HAL_RCC_OscConfig+0x264>)
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	061b      	lsls	r3, r3, #24
 8004d70:	4901      	ldr	r1, [pc, #4]	@ (8004d78 <HAL_RCC_OscConfig+0x264>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	604b      	str	r3, [r1, #4]
 8004d76:	e020      	b.n	8004dba <HAL_RCC_OscConfig+0x2a6>
 8004d78:	40023800 	.word	0x40023800
 8004d7c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d80:	4b99      	ldr	r3, [pc, #612]	@ (8004fe8 <HAL_RCC_OscConfig+0x4d4>)
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	4996      	ldr	r1, [pc, #600]	@ (8004fe8 <HAL_RCC_OscConfig+0x4d4>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d92:	4b95      	ldr	r3, [pc, #596]	@ (8004fe8 <HAL_RCC_OscConfig+0x4d4>)
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	061b      	lsls	r3, r3, #24
 8004da0:	4991      	ldr	r1, [pc, #580]	@ (8004fe8 <HAL_RCC_OscConfig+0x4d4>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f000 fc48 	bl	8005640 <RCC_SetFlashLatencyFromMSIRange>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e1d3      	b.n	8005162 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	0b5b      	lsrs	r3, r3, #13
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004dc6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004dca:	4a87      	ldr	r2, [pc, #540]	@ (8004fe8 <HAL_RCC_OscConfig+0x4d4>)
 8004dcc:	6892      	ldr	r2, [r2, #8]
 8004dce:	0912      	lsrs	r2, r2, #4
 8004dd0:	f002 020f 	and.w	r2, r2, #15
 8004dd4:	4985      	ldr	r1, [pc, #532]	@ (8004fec <HAL_RCC_OscConfig+0x4d8>)
 8004dd6:	5c8a      	ldrb	r2, [r1, r2]
 8004dd8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004dda:	4a85      	ldr	r2, [pc, #532]	@ (8004ff0 <HAL_RCC_OscConfig+0x4dc>)
 8004ddc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004dde:	4b85      	ldr	r3, [pc, #532]	@ (8004ff4 <HAL_RCC_OscConfig+0x4e0>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7fd fd20 	bl	8002828 <HAL_InitTick>
 8004de8:	4603      	mov	r3, r0
 8004dea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004dec:	7bfb      	ldrb	r3, [r7, #15]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d045      	beq.n	8004e7e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8004df2:	7bfb      	ldrb	r3, [r7, #15]
 8004df4:	e1b5      	b.n	8005162 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d029      	beq.n	8004e52 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004dfe:	4b7e      	ldr	r3, [pc, #504]	@ (8004ff8 <HAL_RCC_OscConfig+0x4e4>)
 8004e00:	2201      	movs	r2, #1
 8004e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e04:	f7fd fd5c 	bl	80028c0 <HAL_GetTick>
 8004e08:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004e0a:	e008      	b.n	8004e1e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e0c:	f7fd fd58 	bl	80028c0 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e1a1      	b.n	8005162 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004e1e:	4b72      	ldr	r3, [pc, #456]	@ (8004fe8 <HAL_RCC_OscConfig+0x4d4>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d0f0      	beq.n	8004e0c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e2a:	4b6f      	ldr	r3, [pc, #444]	@ (8004fe8 <HAL_RCC_OscConfig+0x4d4>)
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	496c      	ldr	r1, [pc, #432]	@ (8004fe8 <HAL_RCC_OscConfig+0x4d4>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e3c:	4b6a      	ldr	r3, [pc, #424]	@ (8004fe8 <HAL_RCC_OscConfig+0x4d4>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	69db      	ldr	r3, [r3, #28]
 8004e48:	061b      	lsls	r3, r3, #24
 8004e4a:	4967      	ldr	r1, [pc, #412]	@ (8004fe8 <HAL_RCC_OscConfig+0x4d4>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	604b      	str	r3, [r1, #4]
 8004e50:	e015      	b.n	8004e7e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004e52:	4b69      	ldr	r3, [pc, #420]	@ (8004ff8 <HAL_RCC_OscConfig+0x4e4>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e58:	f7fd fd32 	bl	80028c0 <HAL_GetTick>
 8004e5c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004e5e:	e008      	b.n	8004e72 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e60:	f7fd fd2e 	bl	80028c0 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e177      	b.n	8005162 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004e72:	4b5d      	ldr	r3, [pc, #372]	@ (8004fe8 <HAL_RCC_OscConfig+0x4d4>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1f0      	bne.n	8004e60 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0308 	and.w	r3, r3, #8
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d030      	beq.n	8004eec <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d016      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e92:	4b5a      	ldr	r3, [pc, #360]	@ (8004ffc <HAL_RCC_OscConfig+0x4e8>)
 8004e94:	2201      	movs	r2, #1
 8004e96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e98:	f7fd fd12 	bl	80028c0 <HAL_GetTick>
 8004e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ea0:	f7fd fd0e 	bl	80028c0 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e157      	b.n	8005162 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004eb2:	4b4d      	ldr	r3, [pc, #308]	@ (8004fe8 <HAL_RCC_OscConfig+0x4d4>)
 8004eb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d0f0      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x38c>
 8004ebe:	e015      	b.n	8004eec <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ec0:	4b4e      	ldr	r3, [pc, #312]	@ (8004ffc <HAL_RCC_OscConfig+0x4e8>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ec6:	f7fd fcfb 	bl	80028c0 <HAL_GetTick>
 8004eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004ecc:	e008      	b.n	8004ee0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ece:	f7fd fcf7 	bl	80028c0 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d901      	bls.n	8004ee0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e140      	b.n	8005162 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004ee0:	4b41      	ldr	r3, [pc, #260]	@ (8004fe8 <HAL_RCC_OscConfig+0x4d4>)
 8004ee2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1f0      	bne.n	8004ece <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f000 80b5 	beq.w	8005064 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004efa:	2300      	movs	r3, #0
 8004efc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004efe:	4b3a      	ldr	r3, [pc, #232]	@ (8004fe8 <HAL_RCC_OscConfig+0x4d4>)
 8004f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10d      	bne.n	8004f26 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f0a:	4b37      	ldr	r3, [pc, #220]	@ (8004fe8 <HAL_RCC_OscConfig+0x4d4>)
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0e:	4a36      	ldr	r2, [pc, #216]	@ (8004fe8 <HAL_RCC_OscConfig+0x4d4>)
 8004f10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f14:	6253      	str	r3, [r2, #36]	@ 0x24
 8004f16:	4b34      	ldr	r3, [pc, #208]	@ (8004fe8 <HAL_RCC_OscConfig+0x4d4>)
 8004f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f1e:	60bb      	str	r3, [r7, #8]
 8004f20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f22:	2301      	movs	r3, #1
 8004f24:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f26:	4b36      	ldr	r3, [pc, #216]	@ (8005000 <HAL_RCC_OscConfig+0x4ec>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d118      	bne.n	8004f64 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f32:	4b33      	ldr	r3, [pc, #204]	@ (8005000 <HAL_RCC_OscConfig+0x4ec>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a32      	ldr	r2, [pc, #200]	@ (8005000 <HAL_RCC_OscConfig+0x4ec>)
 8004f38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f3e:	f7fd fcbf 	bl	80028c0 <HAL_GetTick>
 8004f42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f44:	e008      	b.n	8004f58 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f46:	f7fd fcbb 	bl	80028c0 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	2b64      	cmp	r3, #100	@ 0x64
 8004f52:	d901      	bls.n	8004f58 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e104      	b.n	8005162 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f58:	4b29      	ldr	r3, [pc, #164]	@ (8005000 <HAL_RCC_OscConfig+0x4ec>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d0f0      	beq.n	8004f46 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d106      	bne.n	8004f7a <HAL_RCC_OscConfig+0x466>
 8004f6c:	4b1e      	ldr	r3, [pc, #120]	@ (8004fe8 <HAL_RCC_OscConfig+0x4d4>)
 8004f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f70:	4a1d      	ldr	r2, [pc, #116]	@ (8004fe8 <HAL_RCC_OscConfig+0x4d4>)
 8004f72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f76:	6353      	str	r3, [r2, #52]	@ 0x34
 8004f78:	e02d      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4c2>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10c      	bne.n	8004f9c <HAL_RCC_OscConfig+0x488>
 8004f82:	4b19      	ldr	r3, [pc, #100]	@ (8004fe8 <HAL_RCC_OscConfig+0x4d4>)
 8004f84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f86:	4a18      	ldr	r2, [pc, #96]	@ (8004fe8 <HAL_RCC_OscConfig+0x4d4>)
 8004f88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f8c:	6353      	str	r3, [r2, #52]	@ 0x34
 8004f8e:	4b16      	ldr	r3, [pc, #88]	@ (8004fe8 <HAL_RCC_OscConfig+0x4d4>)
 8004f90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f92:	4a15      	ldr	r2, [pc, #84]	@ (8004fe8 <HAL_RCC_OscConfig+0x4d4>)
 8004f94:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f98:	6353      	str	r3, [r2, #52]	@ 0x34
 8004f9a:	e01c      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4c2>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	2b05      	cmp	r3, #5
 8004fa2:	d10c      	bne.n	8004fbe <HAL_RCC_OscConfig+0x4aa>
 8004fa4:	4b10      	ldr	r3, [pc, #64]	@ (8004fe8 <HAL_RCC_OscConfig+0x4d4>)
 8004fa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fa8:	4a0f      	ldr	r2, [pc, #60]	@ (8004fe8 <HAL_RCC_OscConfig+0x4d4>)
 8004faa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004fae:	6353      	str	r3, [r2, #52]	@ 0x34
 8004fb0:	4b0d      	ldr	r3, [pc, #52]	@ (8004fe8 <HAL_RCC_OscConfig+0x4d4>)
 8004fb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fb4:	4a0c      	ldr	r2, [pc, #48]	@ (8004fe8 <HAL_RCC_OscConfig+0x4d4>)
 8004fb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fba:	6353      	str	r3, [r2, #52]	@ 0x34
 8004fbc:	e00b      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4c2>
 8004fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8004fe8 <HAL_RCC_OscConfig+0x4d4>)
 8004fc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fc2:	4a09      	ldr	r2, [pc, #36]	@ (8004fe8 <HAL_RCC_OscConfig+0x4d4>)
 8004fc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fc8:	6353      	str	r3, [r2, #52]	@ 0x34
 8004fca:	4b07      	ldr	r3, [pc, #28]	@ (8004fe8 <HAL_RCC_OscConfig+0x4d4>)
 8004fcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fce:	4a06      	ldr	r2, [pc, #24]	@ (8004fe8 <HAL_RCC_OscConfig+0x4d4>)
 8004fd0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004fd4:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d024      	beq.n	8005028 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fde:	f7fd fc6f 	bl	80028c0 <HAL_GetTick>
 8004fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fe4:	e019      	b.n	800501a <HAL_RCC_OscConfig+0x506>
 8004fe6:	bf00      	nop
 8004fe8:	40023800 	.word	0x40023800
 8004fec:	080176e0 	.word	0x080176e0
 8004ff0:	20000018 	.word	0x20000018
 8004ff4:	2000001c 	.word	0x2000001c
 8004ff8:	42470020 	.word	0x42470020
 8004ffc:	42470680 	.word	0x42470680
 8005000:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005004:	f7fd fc5c 	bl	80028c0 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005012:	4293      	cmp	r3, r2
 8005014:	d901      	bls.n	800501a <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e0a3      	b.n	8005162 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800501a:	4b54      	ldr	r3, [pc, #336]	@ (800516c <HAL_RCC_OscConfig+0x658>)
 800501c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800501e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005022:	2b00      	cmp	r3, #0
 8005024:	d0ee      	beq.n	8005004 <HAL_RCC_OscConfig+0x4f0>
 8005026:	e014      	b.n	8005052 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005028:	f7fd fc4a 	bl	80028c0 <HAL_GetTick>
 800502c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800502e:	e00a      	b.n	8005046 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005030:	f7fd fc46 	bl	80028c0 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800503e:	4293      	cmp	r3, r2
 8005040:	d901      	bls.n	8005046 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e08d      	b.n	8005162 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005046:	4b49      	ldr	r3, [pc, #292]	@ (800516c <HAL_RCC_OscConfig+0x658>)
 8005048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800504a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1ee      	bne.n	8005030 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005052:	7ffb      	ldrb	r3, [r7, #31]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d105      	bne.n	8005064 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005058:	4b44      	ldr	r3, [pc, #272]	@ (800516c <HAL_RCC_OscConfig+0x658>)
 800505a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800505c:	4a43      	ldr	r2, [pc, #268]	@ (800516c <HAL_RCC_OscConfig+0x658>)
 800505e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005062:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005068:	2b00      	cmp	r3, #0
 800506a:	d079      	beq.n	8005160 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	2b0c      	cmp	r3, #12
 8005070:	d056      	beq.n	8005120 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005076:	2b02      	cmp	r3, #2
 8005078:	d13b      	bne.n	80050f2 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800507a:	4b3d      	ldr	r3, [pc, #244]	@ (8005170 <HAL_RCC_OscConfig+0x65c>)
 800507c:	2200      	movs	r2, #0
 800507e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005080:	f7fd fc1e 	bl	80028c0 <HAL_GetTick>
 8005084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005086:	e008      	b.n	800509a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005088:	f7fd fc1a 	bl	80028c0 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b02      	cmp	r3, #2
 8005094:	d901      	bls.n	800509a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e063      	b.n	8005162 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800509a:	4b34      	ldr	r3, [pc, #208]	@ (800516c <HAL_RCC_OscConfig+0x658>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1f0      	bne.n	8005088 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050a6:	4b31      	ldr	r3, [pc, #196]	@ (800516c <HAL_RCC_OscConfig+0x658>)
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b6:	4319      	orrs	r1, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050bc:	430b      	orrs	r3, r1
 80050be:	492b      	ldr	r1, [pc, #172]	@ (800516c <HAL_RCC_OscConfig+0x658>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050c4:	4b2a      	ldr	r3, [pc, #168]	@ (8005170 <HAL_RCC_OscConfig+0x65c>)
 80050c6:	2201      	movs	r2, #1
 80050c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ca:	f7fd fbf9 	bl	80028c0 <HAL_GetTick>
 80050ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80050d0:	e008      	b.n	80050e4 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050d2:	f7fd fbf5 	bl	80028c0 <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d901      	bls.n	80050e4 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e03e      	b.n	8005162 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80050e4:	4b21      	ldr	r3, [pc, #132]	@ (800516c <HAL_RCC_OscConfig+0x658>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d0f0      	beq.n	80050d2 <HAL_RCC_OscConfig+0x5be>
 80050f0:	e036      	b.n	8005160 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050f2:	4b1f      	ldr	r3, [pc, #124]	@ (8005170 <HAL_RCC_OscConfig+0x65c>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050f8:	f7fd fbe2 	bl	80028c0 <HAL_GetTick>
 80050fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050fe:	e008      	b.n	8005112 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005100:	f7fd fbde 	bl	80028c0 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	2b02      	cmp	r3, #2
 800510c:	d901      	bls.n	8005112 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e027      	b.n	8005162 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005112:	4b16      	ldr	r3, [pc, #88]	@ (800516c <HAL_RCC_OscConfig+0x658>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1f0      	bne.n	8005100 <HAL_RCC_OscConfig+0x5ec>
 800511e:	e01f      	b.n	8005160 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005124:	2b01      	cmp	r3, #1
 8005126:	d101      	bne.n	800512c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e01a      	b.n	8005162 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800512c:	4b0f      	ldr	r3, [pc, #60]	@ (800516c <HAL_RCC_OscConfig+0x658>)
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800513c:	429a      	cmp	r2, r3
 800513e:	d10d      	bne.n	800515c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800514a:	429a      	cmp	r2, r3
 800514c:	d106      	bne.n	800515c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005158:	429a      	cmp	r2, r3
 800515a:	d001      	beq.n	8005160 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e000      	b.n	8005162 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3720      	adds	r7, #32
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	40023800 	.word	0x40023800
 8005170:	42470060 	.word	0x42470060

08005174 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d101      	bne.n	8005188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e11a      	b.n	80053be <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005188:	4b8f      	ldr	r3, [pc, #572]	@ (80053c8 <HAL_RCC_ClockConfig+0x254>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	683a      	ldr	r2, [r7, #0]
 8005192:	429a      	cmp	r2, r3
 8005194:	d919      	bls.n	80051ca <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d105      	bne.n	80051a8 <HAL_RCC_ClockConfig+0x34>
 800519c:	4b8a      	ldr	r3, [pc, #552]	@ (80053c8 <HAL_RCC_ClockConfig+0x254>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a89      	ldr	r2, [pc, #548]	@ (80053c8 <HAL_RCC_ClockConfig+0x254>)
 80051a2:	f043 0304 	orr.w	r3, r3, #4
 80051a6:	6013      	str	r3, [r2, #0]
 80051a8:	4b87      	ldr	r3, [pc, #540]	@ (80053c8 <HAL_RCC_ClockConfig+0x254>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f023 0201 	bic.w	r2, r3, #1
 80051b0:	4985      	ldr	r1, [pc, #532]	@ (80053c8 <HAL_RCC_ClockConfig+0x254>)
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051b8:	4b83      	ldr	r3, [pc, #524]	@ (80053c8 <HAL_RCC_ClockConfig+0x254>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0301 	and.w	r3, r3, #1
 80051c0:	683a      	ldr	r2, [r7, #0]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d001      	beq.n	80051ca <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e0f9      	b.n	80053be <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0302 	and.w	r3, r3, #2
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d008      	beq.n	80051e8 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051d6:	4b7d      	ldr	r3, [pc, #500]	@ (80053cc <HAL_RCC_ClockConfig+0x258>)
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	497a      	ldr	r1, [pc, #488]	@ (80053cc <HAL_RCC_ClockConfig+0x258>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0301 	and.w	r3, r3, #1
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f000 808e 	beq.w	8005312 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d107      	bne.n	800520e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80051fe:	4b73      	ldr	r3, [pc, #460]	@ (80053cc <HAL_RCC_ClockConfig+0x258>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d121      	bne.n	800524e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e0d7      	b.n	80053be <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	2b03      	cmp	r3, #3
 8005214:	d107      	bne.n	8005226 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005216:	4b6d      	ldr	r3, [pc, #436]	@ (80053cc <HAL_RCC_ClockConfig+0x258>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d115      	bne.n	800524e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e0cb      	b.n	80053be <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d107      	bne.n	800523e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800522e:	4b67      	ldr	r3, [pc, #412]	@ (80053cc <HAL_RCC_ClockConfig+0x258>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d109      	bne.n	800524e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e0bf      	b.n	80053be <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800523e:	4b63      	ldr	r3, [pc, #396]	@ (80053cc <HAL_RCC_ClockConfig+0x258>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005246:	2b00      	cmp	r3, #0
 8005248:	d101      	bne.n	800524e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e0b7      	b.n	80053be <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800524e:	4b5f      	ldr	r3, [pc, #380]	@ (80053cc <HAL_RCC_ClockConfig+0x258>)
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f023 0203 	bic.w	r2, r3, #3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	495c      	ldr	r1, [pc, #368]	@ (80053cc <HAL_RCC_ClockConfig+0x258>)
 800525c:	4313      	orrs	r3, r2
 800525e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005260:	f7fd fb2e 	bl	80028c0 <HAL_GetTick>
 8005264:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	2b02      	cmp	r3, #2
 800526c:	d112      	bne.n	8005294 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800526e:	e00a      	b.n	8005286 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005270:	f7fd fb26 	bl	80028c0 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800527e:	4293      	cmp	r3, r2
 8005280:	d901      	bls.n	8005286 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e09b      	b.n	80053be <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005286:	4b51      	ldr	r3, [pc, #324]	@ (80053cc <HAL_RCC_ClockConfig+0x258>)
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f003 030c 	and.w	r3, r3, #12
 800528e:	2b08      	cmp	r3, #8
 8005290:	d1ee      	bne.n	8005270 <HAL_RCC_ClockConfig+0xfc>
 8005292:	e03e      	b.n	8005312 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	2b03      	cmp	r3, #3
 800529a:	d112      	bne.n	80052c2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800529c:	e00a      	b.n	80052b4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800529e:	f7fd fb0f 	bl	80028c0 <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d901      	bls.n	80052b4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e084      	b.n	80053be <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052b4:	4b45      	ldr	r3, [pc, #276]	@ (80053cc <HAL_RCC_ClockConfig+0x258>)
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f003 030c 	and.w	r3, r3, #12
 80052bc:	2b0c      	cmp	r3, #12
 80052be:	d1ee      	bne.n	800529e <HAL_RCC_ClockConfig+0x12a>
 80052c0:	e027      	b.n	8005312 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d11d      	bne.n	8005306 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80052ca:	e00a      	b.n	80052e2 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052cc:	f7fd faf8 	bl	80028c0 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052da:	4293      	cmp	r3, r2
 80052dc:	d901      	bls.n	80052e2 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e06d      	b.n	80053be <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80052e2:	4b3a      	ldr	r3, [pc, #232]	@ (80053cc <HAL_RCC_ClockConfig+0x258>)
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f003 030c 	and.w	r3, r3, #12
 80052ea:	2b04      	cmp	r3, #4
 80052ec:	d1ee      	bne.n	80052cc <HAL_RCC_ClockConfig+0x158>
 80052ee:	e010      	b.n	8005312 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052f0:	f7fd fae6 	bl	80028c0 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052fe:	4293      	cmp	r3, r2
 8005300:	d901      	bls.n	8005306 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e05b      	b.n	80053be <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005306:	4b31      	ldr	r3, [pc, #196]	@ (80053cc <HAL_RCC_ClockConfig+0x258>)
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f003 030c 	and.w	r3, r3, #12
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1ee      	bne.n	80052f0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005312:	4b2d      	ldr	r3, [pc, #180]	@ (80053c8 <HAL_RCC_ClockConfig+0x254>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	683a      	ldr	r2, [r7, #0]
 800531c:	429a      	cmp	r2, r3
 800531e:	d219      	bcs.n	8005354 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d105      	bne.n	8005332 <HAL_RCC_ClockConfig+0x1be>
 8005326:	4b28      	ldr	r3, [pc, #160]	@ (80053c8 <HAL_RCC_ClockConfig+0x254>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a27      	ldr	r2, [pc, #156]	@ (80053c8 <HAL_RCC_ClockConfig+0x254>)
 800532c:	f043 0304 	orr.w	r3, r3, #4
 8005330:	6013      	str	r3, [r2, #0]
 8005332:	4b25      	ldr	r3, [pc, #148]	@ (80053c8 <HAL_RCC_ClockConfig+0x254>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f023 0201 	bic.w	r2, r3, #1
 800533a:	4923      	ldr	r1, [pc, #140]	@ (80053c8 <HAL_RCC_ClockConfig+0x254>)
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	4313      	orrs	r3, r2
 8005340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005342:	4b21      	ldr	r3, [pc, #132]	@ (80053c8 <HAL_RCC_ClockConfig+0x254>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0301 	and.w	r3, r3, #1
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	429a      	cmp	r2, r3
 800534e:	d001      	beq.n	8005354 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e034      	b.n	80053be <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0304 	and.w	r3, r3, #4
 800535c:	2b00      	cmp	r3, #0
 800535e:	d008      	beq.n	8005372 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005360:	4b1a      	ldr	r3, [pc, #104]	@ (80053cc <HAL_RCC_ClockConfig+0x258>)
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	4917      	ldr	r1, [pc, #92]	@ (80053cc <HAL_RCC_ClockConfig+0x258>)
 800536e:	4313      	orrs	r3, r2
 8005370:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0308 	and.w	r3, r3, #8
 800537a:	2b00      	cmp	r3, #0
 800537c:	d009      	beq.n	8005392 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800537e:	4b13      	ldr	r3, [pc, #76]	@ (80053cc <HAL_RCC_ClockConfig+0x258>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	00db      	lsls	r3, r3, #3
 800538c:	490f      	ldr	r1, [pc, #60]	@ (80053cc <HAL_RCC_ClockConfig+0x258>)
 800538e:	4313      	orrs	r3, r2
 8005390:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005392:	f000 f823 	bl	80053dc <HAL_RCC_GetSysClockFreq>
 8005396:	4602      	mov	r2, r0
 8005398:	4b0c      	ldr	r3, [pc, #48]	@ (80053cc <HAL_RCC_ClockConfig+0x258>)
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	091b      	lsrs	r3, r3, #4
 800539e:	f003 030f 	and.w	r3, r3, #15
 80053a2:	490b      	ldr	r1, [pc, #44]	@ (80053d0 <HAL_RCC_ClockConfig+0x25c>)
 80053a4:	5ccb      	ldrb	r3, [r1, r3]
 80053a6:	fa22 f303 	lsr.w	r3, r2, r3
 80053aa:	4a0a      	ldr	r2, [pc, #40]	@ (80053d4 <HAL_RCC_ClockConfig+0x260>)
 80053ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80053ae:	4b0a      	ldr	r3, [pc, #40]	@ (80053d8 <HAL_RCC_ClockConfig+0x264>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7fd fa38 	bl	8002828 <HAL_InitTick>
 80053b8:	4603      	mov	r3, r0
 80053ba:	72fb      	strb	r3, [r7, #11]

  return status;
 80053bc:	7afb      	ldrb	r3, [r7, #11]
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	40023c00 	.word	0x40023c00
 80053cc:	40023800 	.word	0x40023800
 80053d0:	080176e0 	.word	0x080176e0
 80053d4:	20000018 	.word	0x20000018
 80053d8:	2000001c 	.word	0x2000001c

080053dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053e0:	b092      	sub	sp, #72	@ 0x48
 80053e2:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80053e4:	4b79      	ldr	r3, [pc, #484]	@ (80055cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80053ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053ec:	f003 030c 	and.w	r3, r3, #12
 80053f0:	2b0c      	cmp	r3, #12
 80053f2:	d00d      	beq.n	8005410 <HAL_RCC_GetSysClockFreq+0x34>
 80053f4:	2b0c      	cmp	r3, #12
 80053f6:	f200 80d5 	bhi.w	80055a4 <HAL_RCC_GetSysClockFreq+0x1c8>
 80053fa:	2b04      	cmp	r3, #4
 80053fc:	d002      	beq.n	8005404 <HAL_RCC_GetSysClockFreq+0x28>
 80053fe:	2b08      	cmp	r3, #8
 8005400:	d003      	beq.n	800540a <HAL_RCC_GetSysClockFreq+0x2e>
 8005402:	e0cf      	b.n	80055a4 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005404:	4b72      	ldr	r3, [pc, #456]	@ (80055d0 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8005406:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8005408:	e0da      	b.n	80055c0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800540a:	4b72      	ldr	r3, [pc, #456]	@ (80055d4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800540c:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800540e:	e0d7      	b.n	80055c0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005410:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005412:	0c9b      	lsrs	r3, r3, #18
 8005414:	f003 020f 	and.w	r2, r3, #15
 8005418:	4b6f      	ldr	r3, [pc, #444]	@ (80055d8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800541a:	5c9b      	ldrb	r3, [r3, r2]
 800541c:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800541e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005420:	0d9b      	lsrs	r3, r3, #22
 8005422:	f003 0303 	and.w	r3, r3, #3
 8005426:	3301      	adds	r3, #1
 8005428:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800542a:	4b68      	ldr	r3, [pc, #416]	@ (80055cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d05d      	beq.n	80054f2 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005438:	2200      	movs	r2, #0
 800543a:	4618      	mov	r0, r3
 800543c:	4611      	mov	r1, r2
 800543e:	4604      	mov	r4, r0
 8005440:	460d      	mov	r5, r1
 8005442:	4622      	mov	r2, r4
 8005444:	462b      	mov	r3, r5
 8005446:	f04f 0000 	mov.w	r0, #0
 800544a:	f04f 0100 	mov.w	r1, #0
 800544e:	0159      	lsls	r1, r3, #5
 8005450:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005454:	0150      	lsls	r0, r2, #5
 8005456:	4602      	mov	r2, r0
 8005458:	460b      	mov	r3, r1
 800545a:	4621      	mov	r1, r4
 800545c:	1a51      	subs	r1, r2, r1
 800545e:	6139      	str	r1, [r7, #16]
 8005460:	4629      	mov	r1, r5
 8005462:	eb63 0301 	sbc.w	r3, r3, r1
 8005466:	617b      	str	r3, [r7, #20]
 8005468:	f04f 0200 	mov.w	r2, #0
 800546c:	f04f 0300 	mov.w	r3, #0
 8005470:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005474:	4659      	mov	r1, fp
 8005476:	018b      	lsls	r3, r1, #6
 8005478:	4651      	mov	r1, sl
 800547a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800547e:	4651      	mov	r1, sl
 8005480:	018a      	lsls	r2, r1, #6
 8005482:	46d4      	mov	ip, sl
 8005484:	ebb2 080c 	subs.w	r8, r2, ip
 8005488:	4659      	mov	r1, fp
 800548a:	eb63 0901 	sbc.w	r9, r3, r1
 800548e:	f04f 0200 	mov.w	r2, #0
 8005492:	f04f 0300 	mov.w	r3, #0
 8005496:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800549a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800549e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054a2:	4690      	mov	r8, r2
 80054a4:	4699      	mov	r9, r3
 80054a6:	4623      	mov	r3, r4
 80054a8:	eb18 0303 	adds.w	r3, r8, r3
 80054ac:	60bb      	str	r3, [r7, #8]
 80054ae:	462b      	mov	r3, r5
 80054b0:	eb49 0303 	adc.w	r3, r9, r3
 80054b4:	60fb      	str	r3, [r7, #12]
 80054b6:	f04f 0200 	mov.w	r2, #0
 80054ba:	f04f 0300 	mov.w	r3, #0
 80054be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80054c2:	4629      	mov	r1, r5
 80054c4:	024b      	lsls	r3, r1, #9
 80054c6:	4620      	mov	r0, r4
 80054c8:	4629      	mov	r1, r5
 80054ca:	4604      	mov	r4, r0
 80054cc:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80054d0:	4601      	mov	r1, r0
 80054d2:	024a      	lsls	r2, r1, #9
 80054d4:	4610      	mov	r0, r2
 80054d6:	4619      	mov	r1, r3
 80054d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054da:	2200      	movs	r2, #0
 80054dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80054e4:	f7fb fe7c 	bl	80011e0 <__aeabi_uldivmod>
 80054e8:	4602      	mov	r2, r0
 80054ea:	460b      	mov	r3, r1
 80054ec:	4613      	mov	r3, r2
 80054ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80054f0:	e055      	b.n	800559e <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80054f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054f4:	2200      	movs	r2, #0
 80054f6:	623b      	str	r3, [r7, #32]
 80054f8:	627a      	str	r2, [r7, #36]	@ 0x24
 80054fa:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80054fe:	4642      	mov	r2, r8
 8005500:	464b      	mov	r3, r9
 8005502:	f04f 0000 	mov.w	r0, #0
 8005506:	f04f 0100 	mov.w	r1, #0
 800550a:	0159      	lsls	r1, r3, #5
 800550c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005510:	0150      	lsls	r0, r2, #5
 8005512:	4602      	mov	r2, r0
 8005514:	460b      	mov	r3, r1
 8005516:	46c4      	mov	ip, r8
 8005518:	ebb2 0a0c 	subs.w	sl, r2, ip
 800551c:	4640      	mov	r0, r8
 800551e:	4649      	mov	r1, r9
 8005520:	468c      	mov	ip, r1
 8005522:	eb63 0b0c 	sbc.w	fp, r3, ip
 8005526:	f04f 0200 	mov.w	r2, #0
 800552a:	f04f 0300 	mov.w	r3, #0
 800552e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005532:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005536:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800553a:	ebb2 040a 	subs.w	r4, r2, sl
 800553e:	eb63 050b 	sbc.w	r5, r3, fp
 8005542:	f04f 0200 	mov.w	r2, #0
 8005546:	f04f 0300 	mov.w	r3, #0
 800554a:	00eb      	lsls	r3, r5, #3
 800554c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005550:	00e2      	lsls	r2, r4, #3
 8005552:	4614      	mov	r4, r2
 8005554:	461d      	mov	r5, r3
 8005556:	4603      	mov	r3, r0
 8005558:	18e3      	adds	r3, r4, r3
 800555a:	603b      	str	r3, [r7, #0]
 800555c:	460b      	mov	r3, r1
 800555e:	eb45 0303 	adc.w	r3, r5, r3
 8005562:	607b      	str	r3, [r7, #4]
 8005564:	f04f 0200 	mov.w	r2, #0
 8005568:	f04f 0300 	mov.w	r3, #0
 800556c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005570:	4629      	mov	r1, r5
 8005572:	028b      	lsls	r3, r1, #10
 8005574:	4620      	mov	r0, r4
 8005576:	4629      	mov	r1, r5
 8005578:	4604      	mov	r4, r0
 800557a:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800557e:	4601      	mov	r1, r0
 8005580:	028a      	lsls	r2, r1, #10
 8005582:	4610      	mov	r0, r2
 8005584:	4619      	mov	r1, r3
 8005586:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005588:	2200      	movs	r2, #0
 800558a:	61bb      	str	r3, [r7, #24]
 800558c:	61fa      	str	r2, [r7, #28]
 800558e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005592:	f7fb fe25 	bl	80011e0 <__aeabi_uldivmod>
 8005596:	4602      	mov	r2, r0
 8005598:	460b      	mov	r3, r1
 800559a:	4613      	mov	r3, r2
 800559c:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 800559e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055a0:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80055a2:	e00d      	b.n	80055c0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80055a4:	4b09      	ldr	r3, [pc, #36]	@ (80055cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	0b5b      	lsrs	r3, r3, #13
 80055aa:	f003 0307 	and.w	r3, r3, #7
 80055ae:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80055b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b2:	3301      	adds	r3, #1
 80055b4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80055b8:	fa02 f303 	lsl.w	r3, r2, r3
 80055bc:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80055be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3748      	adds	r7, #72	@ 0x48
 80055c6:	46bd      	mov	sp, r7
 80055c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055cc:	40023800 	.word	0x40023800
 80055d0:	00f42400 	.word	0x00f42400
 80055d4:	007a1200 	.word	0x007a1200
 80055d8:	080176d4 	.word	0x080176d4

080055dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055dc:	b480      	push	{r7}
 80055de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055e0:	4b02      	ldr	r3, [pc, #8]	@ (80055ec <HAL_RCC_GetHCLKFreq+0x10>)
 80055e2:	681b      	ldr	r3, [r3, #0]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bc80      	pop	{r7}
 80055ea:	4770      	bx	lr
 80055ec:	20000018 	.word	0x20000018

080055f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80055f4:	f7ff fff2 	bl	80055dc <HAL_RCC_GetHCLKFreq>
 80055f8:	4602      	mov	r2, r0
 80055fa:	4b05      	ldr	r3, [pc, #20]	@ (8005610 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	0a1b      	lsrs	r3, r3, #8
 8005600:	f003 0307 	and.w	r3, r3, #7
 8005604:	4903      	ldr	r1, [pc, #12]	@ (8005614 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005606:	5ccb      	ldrb	r3, [r1, r3]
 8005608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800560c:	4618      	mov	r0, r3
 800560e:	bd80      	pop	{r7, pc}
 8005610:	40023800 	.word	0x40023800
 8005614:	080176f0 	.word	0x080176f0

08005618 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800561c:	f7ff ffde 	bl	80055dc <HAL_RCC_GetHCLKFreq>
 8005620:	4602      	mov	r2, r0
 8005622:	4b05      	ldr	r3, [pc, #20]	@ (8005638 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	0adb      	lsrs	r3, r3, #11
 8005628:	f003 0307 	and.w	r3, r3, #7
 800562c:	4903      	ldr	r1, [pc, #12]	@ (800563c <HAL_RCC_GetPCLK2Freq+0x24>)
 800562e:	5ccb      	ldrb	r3, [r1, r3]
 8005630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005634:	4618      	mov	r0, r3
 8005636:	bd80      	pop	{r7, pc}
 8005638:	40023800 	.word	0x40023800
 800563c:	080176f0 	.word	0x080176f0

08005640 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8005640:	b480      	push	{r7}
 8005642:	b087      	sub	sp, #28
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005648:	2300      	movs	r3, #0
 800564a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800564c:	4b29      	ldr	r3, [pc, #164]	@ (80056f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d12c      	bne.n	80056b2 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005658:	4b26      	ldr	r3, [pc, #152]	@ (80056f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800565a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800565c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d005      	beq.n	8005670 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005664:	4b24      	ldr	r3, [pc, #144]	@ (80056f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 800566c:	617b      	str	r3, [r7, #20]
 800566e:	e016      	b.n	800569e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005670:	4b20      	ldr	r3, [pc, #128]	@ (80056f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005674:	4a1f      	ldr	r2, [pc, #124]	@ (80056f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005676:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800567a:	6253      	str	r3, [r2, #36]	@ 0x24
 800567c:	4b1d      	ldr	r3, [pc, #116]	@ (80056f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800567e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005684:	60fb      	str	r3, [r7, #12]
 8005686:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005688:	4b1b      	ldr	r3, [pc, #108]	@ (80056f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8005690:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8005692:	4b18      	ldr	r3, [pc, #96]	@ (80056f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005696:	4a17      	ldr	r2, [pc, #92]	@ (80056f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005698:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800569c:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 80056a4:	d105      	bne.n	80056b2 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80056ac:	d101      	bne.n	80056b2 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80056ae:	2301      	movs	r3, #1
 80056b0:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d105      	bne.n	80056c4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80056b8:	4b10      	ldr	r3, [pc, #64]	@ (80056fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a0f      	ldr	r2, [pc, #60]	@ (80056fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80056be:	f043 0304 	orr.w	r3, r3, #4
 80056c2:	6013      	str	r3, [r2, #0]
 80056c4:	4b0d      	ldr	r3, [pc, #52]	@ (80056fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f023 0201 	bic.w	r2, r3, #1
 80056cc:	490b      	ldr	r1, [pc, #44]	@ (80056fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80056d4:	4b09      	ldr	r3, [pc, #36]	@ (80056fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0301 	and.w	r3, r3, #1
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d001      	beq.n	80056e6 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e000      	b.n	80056e8 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	371c      	adds	r7, #28
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bc80      	pop	{r7}
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	40023800 	.word	0x40023800
 80056f8:	40007000 	.word	0x40007000
 80056fc:	40023c00 	.word	0x40023c00

08005700 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e031      	b.n	8005776 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005718:	b2db      	uxtb	r3, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	d106      	bne.n	800572c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f7fc fe12 	bl	8002350 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2202      	movs	r2, #2
 8005730:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	3304      	adds	r3, #4
 800573c:	4619      	mov	r1, r3
 800573e:	4610      	mov	r0, r2
 8005740:	f000 fcc4 	bl	80060cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3708      	adds	r7, #8
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
	...

08005780 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800578e:	b2db      	uxtb	r3, r3
 8005790:	2b01      	cmp	r3, #1
 8005792:	d001      	beq.n	8005798 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e03a      	b.n	800580e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2202      	movs	r2, #2
 800579c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68da      	ldr	r2, [r3, #12]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f042 0201 	orr.w	r2, r2, #1
 80057ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057b8:	d00e      	beq.n	80057d8 <HAL_TIM_Base_Start_IT+0x58>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a16      	ldr	r2, [pc, #88]	@ (8005818 <HAL_TIM_Base_Start_IT+0x98>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d009      	beq.n	80057d8 <HAL_TIM_Base_Start_IT+0x58>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a14      	ldr	r2, [pc, #80]	@ (800581c <HAL_TIM_Base_Start_IT+0x9c>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d004      	beq.n	80057d8 <HAL_TIM_Base_Start_IT+0x58>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a13      	ldr	r2, [pc, #76]	@ (8005820 <HAL_TIM_Base_Start_IT+0xa0>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d111      	bne.n	80057fc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f003 0307 	and.w	r3, r3, #7
 80057e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2b06      	cmp	r3, #6
 80057e8:	d010      	beq.n	800580c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f042 0201 	orr.w	r2, r2, #1
 80057f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057fa:	e007      	b.n	800580c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f042 0201 	orr.w	r2, r2, #1
 800580a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3714      	adds	r7, #20
 8005812:	46bd      	mov	sp, r7
 8005814:	bc80      	pop	{r7}
 8005816:	4770      	bx	lr
 8005818:	40000400 	.word	0x40000400
 800581c:	40000800 	.word	0x40000800
 8005820:	40010800 	.word	0x40010800

08005824 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68da      	ldr	r2, [r3, #12]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f022 0201 	bic.w	r2, r2, #1
 800583a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6a1a      	ldr	r2, [r3, #32]
 8005842:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005846:	4013      	ands	r3, r2
 8005848:	2b00      	cmp	r3, #0
 800584a:	d107      	bne.n	800585c <HAL_TIM_Base_Stop_IT+0x38>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f022 0201 	bic.w	r2, r2, #1
 800585a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Return function status */
  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	370c      	adds	r7, #12
 800586a:	46bd      	mov	sp, r7
 800586c:	bc80      	pop	{r7}
 800586e:	4770      	bx	lr

08005870 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e031      	b.n	80058e6 <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d106      	bne.n	800589c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f829 	bl	80058ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2202      	movs	r2, #2
 80058a0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	3304      	adds	r3, #4
 80058ac:	4619      	mov	r1, r3
 80058ae:	4610      	mov	r0, r2
 80058b0:	f000 fc0c 	bl	80060cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3708      	adds	r7, #8
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b083      	sub	sp, #12
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80058f6:	bf00      	nop
 80058f8:	370c      	adds	r7, #12
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bc80      	pop	{r7}
 80058fe:	4770      	bx	lr

08005900 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800590a:	2300      	movs	r3, #0
 800590c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d109      	bne.n	8005928 <HAL_TIM_PWM_Start_IT+0x28>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800591a:	b2db      	uxtb	r3, r3
 800591c:	2b01      	cmp	r3, #1
 800591e:	bf14      	ite	ne
 8005920:	2301      	movne	r3, #1
 8005922:	2300      	moveq	r3, #0
 8005924:	b2db      	uxtb	r3, r3
 8005926:	e022      	b.n	800596e <HAL_TIM_PWM_Start_IT+0x6e>
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	2b04      	cmp	r3, #4
 800592c:	d109      	bne.n	8005942 <HAL_TIM_PWM_Start_IT+0x42>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8005934:	b2db      	uxtb	r3, r3
 8005936:	2b01      	cmp	r3, #1
 8005938:	bf14      	ite	ne
 800593a:	2301      	movne	r3, #1
 800593c:	2300      	moveq	r3, #0
 800593e:	b2db      	uxtb	r3, r3
 8005940:	e015      	b.n	800596e <HAL_TIM_PWM_Start_IT+0x6e>
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	2b08      	cmp	r3, #8
 8005946:	d109      	bne.n	800595c <HAL_TIM_PWM_Start_IT+0x5c>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b01      	cmp	r3, #1
 8005952:	bf14      	ite	ne
 8005954:	2301      	movne	r3, #1
 8005956:	2300      	moveq	r3, #0
 8005958:	b2db      	uxtb	r3, r3
 800595a:	e008      	b.n	800596e <HAL_TIM_PWM_Start_IT+0x6e>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005962:	b2db      	uxtb	r3, r3
 8005964:	2b01      	cmp	r3, #1
 8005966:	bf14      	ite	ne
 8005968:	2301      	movne	r3, #1
 800596a:	2300      	moveq	r3, #0
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d001      	beq.n	8005976 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e09c      	b.n	8005ab0 <HAL_TIM_PWM_Start_IT+0x1b0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d104      	bne.n	8005986 <HAL_TIM_PWM_Start_IT+0x86>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2202      	movs	r2, #2
 8005980:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8005984:	e013      	b.n	80059ae <HAL_TIM_PWM_Start_IT+0xae>
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	2b04      	cmp	r3, #4
 800598a:	d104      	bne.n	8005996 <HAL_TIM_PWM_Start_IT+0x96>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2202      	movs	r2, #2
 8005990:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8005994:	e00b      	b.n	80059ae <HAL_TIM_PWM_Start_IT+0xae>
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	2b08      	cmp	r3, #8
 800599a:	d104      	bne.n	80059a6 <HAL_TIM_PWM_Start_IT+0xa6>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2202      	movs	r2, #2
 80059a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80059a4:	e003      	b.n	80059ae <HAL_TIM_PWM_Start_IT+0xae>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2202      	movs	r2, #2
 80059aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  switch (Channel)
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	2b0c      	cmp	r3, #12
 80059b2:	d841      	bhi.n	8005a38 <HAL_TIM_PWM_Start_IT+0x138>
 80059b4:	a201      	add	r2, pc, #4	@ (adr r2, 80059bc <HAL_TIM_PWM_Start_IT+0xbc>)
 80059b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ba:	bf00      	nop
 80059bc:	080059f1 	.word	0x080059f1
 80059c0:	08005a39 	.word	0x08005a39
 80059c4:	08005a39 	.word	0x08005a39
 80059c8:	08005a39 	.word	0x08005a39
 80059cc:	08005a03 	.word	0x08005a03
 80059d0:	08005a39 	.word	0x08005a39
 80059d4:	08005a39 	.word	0x08005a39
 80059d8:	08005a39 	.word	0x08005a39
 80059dc:	08005a15 	.word	0x08005a15
 80059e0:	08005a39 	.word	0x08005a39
 80059e4:	08005a39 	.word	0x08005a39
 80059e8:	08005a39 	.word	0x08005a39
 80059ec:	08005a27 	.word	0x08005a27
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68da      	ldr	r2, [r3, #12]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f042 0202 	orr.w	r2, r2, #2
 80059fe:	60da      	str	r2, [r3, #12]
      break;
 8005a00:	e01d      	b.n	8005a3e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68da      	ldr	r2, [r3, #12]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f042 0204 	orr.w	r2, r2, #4
 8005a10:	60da      	str	r2, [r3, #12]
      break;
 8005a12:	e014      	b.n	8005a3e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68da      	ldr	r2, [r3, #12]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f042 0208 	orr.w	r2, r2, #8
 8005a22:	60da      	str	r2, [r3, #12]
      break;
 8005a24:	e00b      	b.n	8005a3e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68da      	ldr	r2, [r3, #12]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f042 0210 	orr.w	r2, r2, #16
 8005a34:	60da      	str	r2, [r3, #12]
      break;
 8005a36:	e002      	b.n	8005a3e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	73fb      	strb	r3, [r7, #15]
      break;
 8005a3c:	bf00      	nop
  }

  if (status == HAL_OK)
 8005a3e:	7bfb      	ldrb	r3, [r7, #15]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d134      	bne.n	8005aae <HAL_TIM_PWM_Start_IT+0x1ae>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	6839      	ldr	r1, [r7, #0]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f000 fd3e 	bl	80064ce <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a5a:	d00e      	beq.n	8005a7a <HAL_TIM_PWM_Start_IT+0x17a>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a15      	ldr	r2, [pc, #84]	@ (8005ab8 <HAL_TIM_PWM_Start_IT+0x1b8>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d009      	beq.n	8005a7a <HAL_TIM_PWM_Start_IT+0x17a>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a14      	ldr	r2, [pc, #80]	@ (8005abc <HAL_TIM_PWM_Start_IT+0x1bc>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d004      	beq.n	8005a7a <HAL_TIM_PWM_Start_IT+0x17a>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a12      	ldr	r2, [pc, #72]	@ (8005ac0 <HAL_TIM_PWM_Start_IT+0x1c0>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d111      	bne.n	8005a9e <HAL_TIM_PWM_Start_IT+0x19e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f003 0307 	and.w	r3, r3, #7
 8005a84:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	2b06      	cmp	r3, #6
 8005a8a:	d010      	beq.n	8005aae <HAL_TIM_PWM_Start_IT+0x1ae>
      {
        __HAL_TIM_ENABLE(htim);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f042 0201 	orr.w	r2, r2, #1
 8005a9a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a9c:	e007      	b.n	8005aae <HAL_TIM_PWM_Start_IT+0x1ae>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f042 0201 	orr.w	r2, r2, #1
 8005aac:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	40000400 	.word	0x40000400
 8005abc:	40000800 	.word	0x40000800
 8005ac0:	40010800 	.word	0x40010800

08005ac4 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	2b0c      	cmp	r3, #12
 8005ad6:	d841      	bhi.n	8005b5c <HAL_TIM_PWM_Stop_IT+0x98>
 8005ad8:	a201      	add	r2, pc, #4	@ (adr r2, 8005ae0 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8005ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ade:	bf00      	nop
 8005ae0:	08005b15 	.word	0x08005b15
 8005ae4:	08005b5d 	.word	0x08005b5d
 8005ae8:	08005b5d 	.word	0x08005b5d
 8005aec:	08005b5d 	.word	0x08005b5d
 8005af0:	08005b27 	.word	0x08005b27
 8005af4:	08005b5d 	.word	0x08005b5d
 8005af8:	08005b5d 	.word	0x08005b5d
 8005afc:	08005b5d 	.word	0x08005b5d
 8005b00:	08005b39 	.word	0x08005b39
 8005b04:	08005b5d 	.word	0x08005b5d
 8005b08:	08005b5d 	.word	0x08005b5d
 8005b0c:	08005b5d 	.word	0x08005b5d
 8005b10:	08005b4b 	.word	0x08005b4b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68da      	ldr	r2, [r3, #12]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 0202 	bic.w	r2, r2, #2
 8005b22:	60da      	str	r2, [r3, #12]
      break;
 8005b24:	e01d      	b.n	8005b62 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68da      	ldr	r2, [r3, #12]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f022 0204 	bic.w	r2, r2, #4
 8005b34:	60da      	str	r2, [r3, #12]
      break;
 8005b36:	e014      	b.n	8005b62 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68da      	ldr	r2, [r3, #12]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f022 0208 	bic.w	r2, r2, #8
 8005b46:	60da      	str	r2, [r3, #12]
      break;
 8005b48:	e00b      	b.n	8005b62 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68da      	ldr	r2, [r3, #12]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f022 0210 	bic.w	r2, r2, #16
 8005b58:	60da      	str	r2, [r3, #12]
      break;
 8005b5a:	e002      	b.n	8005b62 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b60:	bf00      	nop
  }

  if (status == HAL_OK)
 8005b62:	7bfb      	ldrb	r3, [r7, #15]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d132      	bne.n	8005bce <HAL_TIM_PWM_Stop_IT+0x10a>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	6839      	ldr	r1, [r7, #0]
 8005b70:	4618      	mov	r0, r3
 8005b72:	f000 fcac 	bl	80064ce <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	6a1a      	ldr	r2, [r3, #32]
 8005b7c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005b80:	4013      	ands	r3, r2
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d107      	bne.n	8005b96 <HAL_TIM_PWM_Stop_IT+0xd2>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f022 0201 	bic.w	r2, r2, #1
 8005b94:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d104      	bne.n	8005ba6 <HAL_TIM_PWM_Stop_IT+0xe2>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8005ba4:	e013      	b.n	8005bce <HAL_TIM_PWM_Stop_IT+0x10a>
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	2b04      	cmp	r3, #4
 8005baa:	d104      	bne.n	8005bb6 <HAL_TIM_PWM_Stop_IT+0xf2>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8005bb4:	e00b      	b.n	8005bce <HAL_TIM_PWM_Stop_IT+0x10a>
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	2b08      	cmp	r3, #8
 8005bba:	d104      	bne.n	8005bc6 <HAL_TIM_PWM_Stop_IT+0x102>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005bc4:	e003      	b.n	8005bce <HAL_TIM_PWM_Stop_IT+0x10a>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

  /* Return function status */
  return status;
 8005bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	f003 0302 	and.w	r3, r3, #2
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d020      	beq.n	8005c3c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f003 0302 	and.w	r3, r3, #2
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d01b      	beq.n	8005c3c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f06f 0202 	mvn.w	r2, #2
 8005c0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	f003 0303 	and.w	r3, r3, #3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d003      	beq.n	8005c2a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 fa36 	bl	8006094 <HAL_TIM_IC_CaptureCallback>
 8005c28:	e005      	b.n	8005c36 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 fa29 	bl	8006082 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 fa38 	bl	80060a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	f003 0304 	and.w	r3, r3, #4
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d020      	beq.n	8005c88 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f003 0304 	and.w	r3, r3, #4
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d01b      	beq.n	8005c88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f06f 0204 	mvn.w	r2, #4
 8005c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2202      	movs	r2, #2
 8005c5e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d003      	beq.n	8005c76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 fa10 	bl	8006094 <HAL_TIM_IC_CaptureCallback>
 8005c74:	e005      	b.n	8005c82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 fa03 	bl	8006082 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 fa12 	bl	80060a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	f003 0308 	and.w	r3, r3, #8
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d020      	beq.n	8005cd4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f003 0308 	and.w	r3, r3, #8
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d01b      	beq.n	8005cd4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f06f 0208 	mvn.w	r2, #8
 8005ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2204      	movs	r2, #4
 8005caa:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	69db      	ldr	r3, [r3, #28]
 8005cb2:	f003 0303 	and.w	r3, r3, #3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d003      	beq.n	8005cc2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f9ea 	bl	8006094 <HAL_TIM_IC_CaptureCallback>
 8005cc0:	e005      	b.n	8005cce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 f9dd 	bl	8006082 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 f9ec 	bl	80060a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	f003 0310 	and.w	r3, r3, #16
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d020      	beq.n	8005d20 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f003 0310 	and.w	r3, r3, #16
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d01b      	beq.n	8005d20 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f06f 0210 	mvn.w	r2, #16
 8005cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2208      	movs	r2, #8
 8005cf6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d003      	beq.n	8005d0e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f9c4 	bl	8006094 <HAL_TIM_IC_CaptureCallback>
 8005d0c:	e005      	b.n	8005d1a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 f9b7 	bl	8006082 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 f9c6 	bl	80060a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00c      	beq.n	8005d44 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f003 0301 	and.w	r3, r3, #1
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d007      	beq.n	8005d44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f06f 0201 	mvn.w	r2, #1
 8005d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f7fc fc52 	bl	80025e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00c      	beq.n	8005d68 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d007      	beq.n	8005d68 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 f9a8 	bl	80060b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d68:	bf00      	nop
 8005d6a:	3710      	adds	r7, #16
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b086      	sub	sp, #24
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d101      	bne.n	8005d8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d8a:	2302      	movs	r3, #2
 8005d8c:	e0ae      	b.n	8005eec <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  switch (Channel)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2b0c      	cmp	r3, #12
 8005d9a:	f200 809f 	bhi.w	8005edc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8005da4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da4:	08005dd9 	.word	0x08005dd9
 8005da8:	08005edd 	.word	0x08005edd
 8005dac:	08005edd 	.word	0x08005edd
 8005db0:	08005edd 	.word	0x08005edd
 8005db4:	08005e19 	.word	0x08005e19
 8005db8:	08005edd 	.word	0x08005edd
 8005dbc:	08005edd 	.word	0x08005edd
 8005dc0:	08005edd 	.word	0x08005edd
 8005dc4:	08005e5b 	.word	0x08005e5b
 8005dc8:	08005edd 	.word	0x08005edd
 8005dcc:	08005edd 	.word	0x08005edd
 8005dd0:	08005edd 	.word	0x08005edd
 8005dd4:	08005e9b 	.word	0x08005e9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68b9      	ldr	r1, [r7, #8]
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 f9ea 	bl	80061b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	699a      	ldr	r2, [r3, #24]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f042 0208 	orr.w	r2, r2, #8
 8005df2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	699a      	ldr	r2, [r3, #24]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f022 0204 	bic.w	r2, r2, #4
 8005e02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6999      	ldr	r1, [r3, #24]
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	68da      	ldr	r2, [r3, #12]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	430a      	orrs	r2, r1
 8005e14:	619a      	str	r2, [r3, #24]
      break;
 8005e16:	e064      	b.n	8005ee2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68b9      	ldr	r1, [r7, #8]
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f000 fa06 	bl	8006230 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	699a      	ldr	r2, [r3, #24]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	699a      	ldr	r2, [r3, #24]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	6999      	ldr	r1, [r3, #24]
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	021a      	lsls	r2, r3, #8
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	430a      	orrs	r2, r1
 8005e56:	619a      	str	r2, [r3, #24]
      break;
 8005e58:	e043      	b.n	8005ee2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68b9      	ldr	r1, [r7, #8]
 8005e60:	4618      	mov	r0, r3
 8005e62:	f000 fa23 	bl	80062ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	69da      	ldr	r2, [r3, #28]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f042 0208 	orr.w	r2, r2, #8
 8005e74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	69da      	ldr	r2, [r3, #28]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f022 0204 	bic.w	r2, r2, #4
 8005e84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	69d9      	ldr	r1, [r3, #28]
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	68da      	ldr	r2, [r3, #12]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	430a      	orrs	r2, r1
 8005e96:	61da      	str	r2, [r3, #28]
      break;
 8005e98:	e023      	b.n	8005ee2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68b9      	ldr	r1, [r7, #8]
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f000 fa40 	bl	8006326 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	69da      	ldr	r2, [r3, #28]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005eb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	69da      	ldr	r2, [r3, #28]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ec4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	69d9      	ldr	r1, [r3, #28]
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	021a      	lsls	r2, r3, #8
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	61da      	str	r2, [r3, #28]
      break;
 8005eda:	e002      	b.n	8005ee2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	75fb      	strb	r3, [r7, #23]
      break;
 8005ee0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 8005eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3718      	adds	r7, #24
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d101      	bne.n	8005f10 <HAL_TIM_ConfigClockSource+0x1c>
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	e0b4      	b.n	800607a <HAL_TIM_ConfigClockSource+0x186>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005f2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f48:	d03e      	beq.n	8005fc8 <HAL_TIM_ConfigClockSource+0xd4>
 8005f4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f4e:	f200 8087 	bhi.w	8006060 <HAL_TIM_ConfigClockSource+0x16c>
 8005f52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f56:	f000 8086 	beq.w	8006066 <HAL_TIM_ConfigClockSource+0x172>
 8005f5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f5e:	d87f      	bhi.n	8006060 <HAL_TIM_ConfigClockSource+0x16c>
 8005f60:	2b70      	cmp	r3, #112	@ 0x70
 8005f62:	d01a      	beq.n	8005f9a <HAL_TIM_ConfigClockSource+0xa6>
 8005f64:	2b70      	cmp	r3, #112	@ 0x70
 8005f66:	d87b      	bhi.n	8006060 <HAL_TIM_ConfigClockSource+0x16c>
 8005f68:	2b60      	cmp	r3, #96	@ 0x60
 8005f6a:	d050      	beq.n	800600e <HAL_TIM_ConfigClockSource+0x11a>
 8005f6c:	2b60      	cmp	r3, #96	@ 0x60
 8005f6e:	d877      	bhi.n	8006060 <HAL_TIM_ConfigClockSource+0x16c>
 8005f70:	2b50      	cmp	r3, #80	@ 0x50
 8005f72:	d03c      	beq.n	8005fee <HAL_TIM_ConfigClockSource+0xfa>
 8005f74:	2b50      	cmp	r3, #80	@ 0x50
 8005f76:	d873      	bhi.n	8006060 <HAL_TIM_ConfigClockSource+0x16c>
 8005f78:	2b40      	cmp	r3, #64	@ 0x40
 8005f7a:	d058      	beq.n	800602e <HAL_TIM_ConfigClockSource+0x13a>
 8005f7c:	2b40      	cmp	r3, #64	@ 0x40
 8005f7e:	d86f      	bhi.n	8006060 <HAL_TIM_ConfigClockSource+0x16c>
 8005f80:	2b30      	cmp	r3, #48	@ 0x30
 8005f82:	d064      	beq.n	800604e <HAL_TIM_ConfigClockSource+0x15a>
 8005f84:	2b30      	cmp	r3, #48	@ 0x30
 8005f86:	d86b      	bhi.n	8006060 <HAL_TIM_ConfigClockSource+0x16c>
 8005f88:	2b20      	cmp	r3, #32
 8005f8a:	d060      	beq.n	800604e <HAL_TIM_ConfigClockSource+0x15a>
 8005f8c:	2b20      	cmp	r3, #32
 8005f8e:	d867      	bhi.n	8006060 <HAL_TIM_ConfigClockSource+0x16c>
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d05c      	beq.n	800604e <HAL_TIM_ConfigClockSource+0x15a>
 8005f94:	2b10      	cmp	r3, #16
 8005f96:	d05a      	beq.n	800604e <HAL_TIM_ConfigClockSource+0x15a>
 8005f98:	e062      	b.n	8006060 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005faa:	f000 fa71 	bl	8006490 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005fbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	609a      	str	r2, [r3, #8]
      break;
 8005fc6:	e04f      	b.n	8006068 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fd8:	f000 fa5a 	bl	8006490 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	689a      	ldr	r2, [r3, #8]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fea:	609a      	str	r2, [r3, #8]
      break;
 8005fec:	e03c      	b.n	8006068 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	f000 f9d1 	bl	80063a2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2150      	movs	r1, #80	@ 0x50
 8006006:	4618      	mov	r0, r3
 8006008:	f000 fa28 	bl	800645c <TIM_ITRx_SetConfig>
      break;
 800600c:	e02c      	b.n	8006068 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800601a:	461a      	mov	r2, r3
 800601c:	f000 f9ef 	bl	80063fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2160      	movs	r1, #96	@ 0x60
 8006026:	4618      	mov	r0, r3
 8006028:	f000 fa18 	bl	800645c <TIM_ITRx_SetConfig>
      break;
 800602c:	e01c      	b.n	8006068 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800603a:	461a      	mov	r2, r3
 800603c:	f000 f9b1 	bl	80063a2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2140      	movs	r1, #64	@ 0x40
 8006046:	4618      	mov	r0, r3
 8006048:	f000 fa08 	bl	800645c <TIM_ITRx_SetConfig>
      break;
 800604c:	e00c      	b.n	8006068 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4619      	mov	r1, r3
 8006058:	4610      	mov	r0, r2
 800605a:	f000 f9ff 	bl	800645c <TIM_ITRx_SetConfig>
      break;
 800605e:	e003      	b.n	8006068 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	73fb      	strb	r3, [r7, #15]
      break;
 8006064:	e000      	b.n	8006068 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006066:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 8006078:	7bfb      	ldrb	r3, [r7, #15]
}
 800607a:	4618      	mov	r0, r3
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006082:	b480      	push	{r7}
 8006084:	b083      	sub	sp, #12
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800608a:	bf00      	nop
 800608c:	370c      	adds	r7, #12
 800608e:	46bd      	mov	sp, r7
 8006090:	bc80      	pop	{r7}
 8006092:	4770      	bx	lr

08006094 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800609c:	bf00      	nop
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bc80      	pop	{r7}
 80060a4:	4770      	bx	lr

080060a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060a6:	b480      	push	{r7}
 80060a8:	b083      	sub	sp, #12
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060ae:	bf00      	nop
 80060b0:	370c      	adds	r7, #12
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bc80      	pop	{r7}
 80060b6:	4770      	bx	lr

080060b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bc80      	pop	{r7}
 80060c8:	4770      	bx	lr
	...

080060cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060e2:	d00f      	beq.n	8006104 <TIM_Base_SetConfig+0x38>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a2e      	ldr	r2, [pc, #184]	@ (80061a0 <TIM_Base_SetConfig+0xd4>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d00b      	beq.n	8006104 <TIM_Base_SetConfig+0x38>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a2d      	ldr	r2, [pc, #180]	@ (80061a4 <TIM_Base_SetConfig+0xd8>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d007      	beq.n	8006104 <TIM_Base_SetConfig+0x38>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a2c      	ldr	r2, [pc, #176]	@ (80061a8 <TIM_Base_SetConfig+0xdc>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d003      	beq.n	8006104 <TIM_Base_SetConfig+0x38>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a2b      	ldr	r2, [pc, #172]	@ (80061ac <TIM_Base_SetConfig+0xe0>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d108      	bne.n	8006116 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800610a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	4313      	orrs	r3, r2
 8006114:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800611c:	d017      	beq.n	800614e <TIM_Base_SetConfig+0x82>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a1f      	ldr	r2, [pc, #124]	@ (80061a0 <TIM_Base_SetConfig+0xd4>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d013      	beq.n	800614e <TIM_Base_SetConfig+0x82>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a1e      	ldr	r2, [pc, #120]	@ (80061a4 <TIM_Base_SetConfig+0xd8>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d00f      	beq.n	800614e <TIM_Base_SetConfig+0x82>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a1d      	ldr	r2, [pc, #116]	@ (80061a8 <TIM_Base_SetConfig+0xdc>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d00b      	beq.n	800614e <TIM_Base_SetConfig+0x82>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a1c      	ldr	r2, [pc, #112]	@ (80061ac <TIM_Base_SetConfig+0xe0>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d007      	beq.n	800614e <TIM_Base_SetConfig+0x82>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a1b      	ldr	r2, [pc, #108]	@ (80061b0 <TIM_Base_SetConfig+0xe4>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d003      	beq.n	800614e <TIM_Base_SetConfig+0x82>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a1a      	ldr	r2, [pc, #104]	@ (80061b4 <TIM_Base_SetConfig+0xe8>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d108      	bne.n	8006160 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006154:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	4313      	orrs	r3, r2
 800615e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	4313      	orrs	r3, r2
 800616c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	689a      	ldr	r2, [r3, #8]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f043 0204 	orr.w	r2, r3, #4
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2201      	movs	r2, #1
 800618e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	601a      	str	r2, [r3, #0]
}
 8006196:	bf00      	nop
 8006198:	3714      	adds	r7, #20
 800619a:	46bd      	mov	sp, r7
 800619c:	bc80      	pop	{r7}
 800619e:	4770      	bx	lr
 80061a0:	40000400 	.word	0x40000400
 80061a4:	40000800 	.word	0x40000800
 80061a8:	40000c00 	.word	0x40000c00
 80061ac:	40010800 	.word	0x40010800
 80061b0:	40010c00 	.word	0x40010c00
 80061b4:	40011000 	.word	0x40011000

080061b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b087      	sub	sp, #28
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a1b      	ldr	r3, [r3, #32]
 80061c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a1b      	ldr	r3, [r3, #32]
 80061cc:	f023 0201 	bic.w	r2, r3, #1
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f023 0303 	bic.w	r3, r3, #3
 80061ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	f023 0302 	bic.w	r3, r3, #2
 8006200:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	4313      	orrs	r3, r2
 800620a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	693a      	ldr	r2, [r7, #16]
 8006210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	685a      	ldr	r2, [r3, #4]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	621a      	str	r2, [r3, #32]
}
 8006226:	bf00      	nop
 8006228:	371c      	adds	r7, #28
 800622a:	46bd      	mov	sp, r7
 800622c:	bc80      	pop	{r7}
 800622e:	4770      	bx	lr

08006230 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006230:	b480      	push	{r7}
 8006232:	b087      	sub	sp, #28
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6a1b      	ldr	r3, [r3, #32]
 8006244:	f023 0210 	bic.w	r2, r3, #16
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800625e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006266:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	021b      	lsls	r3, r3, #8
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	4313      	orrs	r3, r2
 8006272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	f023 0320 	bic.w	r3, r3, #32
 800627a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	011b      	lsls	r3, r3, #4
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	4313      	orrs	r3, r2
 8006286:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	685a      	ldr	r2, [r3, #4]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	697a      	ldr	r2, [r7, #20]
 80062a0:	621a      	str	r2, [r3, #32]
}
 80062a2:	bf00      	nop
 80062a4:	371c      	adds	r7, #28
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bc80      	pop	{r7}
 80062aa:	4770      	bx	lr

080062ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b087      	sub	sp, #28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a1b      	ldr	r3, [r3, #32]
 80062c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	69db      	ldr	r3, [r3, #28]
 80062d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f023 0303 	bic.w	r3, r3, #3
 80062e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80062f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	021b      	lsls	r3, r3, #8
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	4313      	orrs	r3, r2
 8006300:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	693a      	ldr	r2, [r7, #16]
 8006306:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	685a      	ldr	r2, [r3, #4]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	697a      	ldr	r2, [r7, #20]
 800631a:	621a      	str	r2, [r3, #32]
}
 800631c:	bf00      	nop
 800631e:	371c      	adds	r7, #28
 8006320:	46bd      	mov	sp, r7
 8006322:	bc80      	pop	{r7}
 8006324:	4770      	bx	lr

08006326 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006326:	b480      	push	{r7}
 8006328:	b087      	sub	sp, #28
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
 800632e:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a1b      	ldr	r3, [r3, #32]
 8006334:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	69db      	ldr	r3, [r3, #28]
 800634c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006354:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800635c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	021b      	lsls	r3, r3, #8
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	4313      	orrs	r3, r2
 8006368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006370:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	031b      	lsls	r3, r3, #12
 8006378:	697a      	ldr	r2, [r7, #20]
 800637a:	4313      	orrs	r3, r2
 800637c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	685a      	ldr	r2, [r3, #4]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	697a      	ldr	r2, [r7, #20]
 8006396:	621a      	str	r2, [r3, #32]
}
 8006398:	bf00      	nop
 800639a:	371c      	adds	r7, #28
 800639c:	46bd      	mov	sp, r7
 800639e:	bc80      	pop	{r7}
 80063a0:	4770      	bx	lr

080063a2 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b087      	sub	sp, #28
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	60f8      	str	r0, [r7, #12]
 80063aa:	60b9      	str	r1, [r7, #8]
 80063ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6a1b      	ldr	r3, [r3, #32]
 80063b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6a1b      	ldr	r3, [r3, #32]
 80063b8:	f023 0201 	bic.w	r2, r3, #1
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	699b      	ldr	r3, [r3, #24]
 80063c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80063cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	011b      	lsls	r3, r3, #4
 80063d2:	693a      	ldr	r2, [r7, #16]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	f023 030a 	bic.w	r3, r3, #10
 80063de:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063e0:	697a      	ldr	r2, [r7, #20]
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	693a      	ldr	r2, [r7, #16]
 80063ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	621a      	str	r2, [r3, #32]
}
 80063f4:	bf00      	nop
 80063f6:	371c      	adds	r7, #28
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bc80      	pop	{r7}
 80063fc:	4770      	bx	lr

080063fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063fe:	b480      	push	{r7}
 8006400:	b087      	sub	sp, #28
 8006402:	af00      	add	r7, sp, #0
 8006404:	60f8      	str	r0, [r7, #12]
 8006406:	60b9      	str	r1, [r7, #8]
 8006408:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6a1b      	ldr	r3, [r3, #32]
 8006414:	f023 0210 	bic.w	r2, r3, #16
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006428:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	031b      	lsls	r3, r3, #12
 800642e:	693a      	ldr	r2, [r7, #16]
 8006430:	4313      	orrs	r3, r2
 8006432:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800643a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	011b      	lsls	r3, r3, #4
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	4313      	orrs	r3, r2
 8006444:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	693a      	ldr	r2, [r7, #16]
 800644a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	697a      	ldr	r2, [r7, #20]
 8006450:	621a      	str	r2, [r3, #32]
}
 8006452:	bf00      	nop
 8006454:	371c      	adds	r7, #28
 8006456:	46bd      	mov	sp, r7
 8006458:	bc80      	pop	{r7}
 800645a:	4770      	bx	lr

0800645c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006472:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006474:	683a      	ldr	r2, [r7, #0]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	4313      	orrs	r3, r2
 800647a:	f043 0307 	orr.w	r3, r3, #7
 800647e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	609a      	str	r2, [r3, #8]
}
 8006486:	bf00      	nop
 8006488:	3714      	adds	r7, #20
 800648a:	46bd      	mov	sp, r7
 800648c:	bc80      	pop	{r7}
 800648e:	4770      	bx	lr

08006490 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006490:	b480      	push	{r7}
 8006492:	b087      	sub	sp, #28
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	607a      	str	r2, [r7, #4]
 800649c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80064aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	021a      	lsls	r2, r3, #8
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	431a      	orrs	r2, r3
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	697a      	ldr	r2, [r7, #20]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	697a      	ldr	r2, [r7, #20]
 80064c2:	609a      	str	r2, [r3, #8]
}
 80064c4:	bf00      	nop
 80064c6:	371c      	adds	r7, #28
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bc80      	pop	{r7}
 80064cc:	4770      	bx	lr

080064ce <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064ce:	b480      	push	{r7}
 80064d0:	b087      	sub	sp, #28
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	60f8      	str	r0, [r7, #12]
 80064d6:	60b9      	str	r1, [r7, #8]
 80064d8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	f003 031f 	and.w	r3, r3, #31
 80064e0:	2201      	movs	r2, #1
 80064e2:	fa02 f303 	lsl.w	r3, r2, r3
 80064e6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6a1a      	ldr	r2, [r3, #32]
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	43db      	mvns	r3, r3
 80064f0:	401a      	ands	r2, r3
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6a1a      	ldr	r2, [r3, #32]
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	f003 031f 	and.w	r3, r3, #31
 8006500:	6879      	ldr	r1, [r7, #4]
 8006502:	fa01 f303 	lsl.w	r3, r1, r3
 8006506:	431a      	orrs	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	621a      	str	r2, [r3, #32]
}
 800650c:	bf00      	nop
 800650e:	371c      	adds	r7, #28
 8006510:	46bd      	mov	sp, r7
 8006512:	bc80      	pop	{r7}
 8006514:	4770      	bx	lr
	...

08006518 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006528:	2b01      	cmp	r3, #1
 800652a:	d101      	bne.n	8006530 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800652c:	2302      	movs	r3, #2
 800652e:	e046      	b.n	80065be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2202      	movs	r2, #2
 800653c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006556:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	4313      	orrs	r3, r2
 8006560:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006572:	d00e      	beq.n	8006592 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a13      	ldr	r2, [pc, #76]	@ (80065c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d009      	beq.n	8006592 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a12      	ldr	r2, [pc, #72]	@ (80065cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d004      	beq.n	8006592 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a10      	ldr	r2, [pc, #64]	@ (80065d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d10c      	bne.n	80065ac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006598:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3714      	adds	r7, #20
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bc80      	pop	{r7}
 80065c6:	4770      	bx	lr
 80065c8:	40000400 	.word	0x40000400
 80065cc:	40000800 	.word	0x40000800
 80065d0:	40010800 	.word	0x40010800

080065d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d101      	bne.n	80065e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e042      	b.n	800666c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d106      	bne.n	8006600 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7fb ff40 	bl	8002480 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2224      	movs	r2, #36	@ 0x24
 8006604:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68da      	ldr	r2, [r3, #12]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006616:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 f971 	bl	8006900 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	691a      	ldr	r2, [r3, #16]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800662c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	695a      	ldr	r2, [r3, #20]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800663c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68da      	ldr	r2, [r3, #12]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800664c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2220      	movs	r2, #32
 8006658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2220      	movs	r2, #32
 8006660:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3708      	adds	r7, #8
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b08a      	sub	sp, #40	@ 0x28
 8006678:	af02      	add	r7, sp, #8
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	603b      	str	r3, [r7, #0]
 8006680:	4613      	mov	r3, r2
 8006682:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006684:	2300      	movs	r3, #0
 8006686:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800668e:	b2db      	uxtb	r3, r3
 8006690:	2b20      	cmp	r3, #32
 8006692:	d175      	bne.n	8006780 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d002      	beq.n	80066a0 <HAL_UART_Transmit+0x2c>
 800669a:	88fb      	ldrh	r3, [r7, #6]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d101      	bne.n	80066a4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e06e      	b.n	8006782 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2200      	movs	r2, #0
 80066a8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2221      	movs	r2, #33	@ 0x21
 80066ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066b2:	f7fc f905 	bl	80028c0 <HAL_GetTick>
 80066b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	88fa      	ldrh	r2, [r7, #6]
 80066bc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	88fa      	ldrh	r2, [r7, #6]
 80066c2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066cc:	d108      	bne.n	80066e0 <HAL_UART_Transmit+0x6c>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d104      	bne.n	80066e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80066d6:	2300      	movs	r3, #0
 80066d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	61bb      	str	r3, [r7, #24]
 80066de:	e003      	b.n	80066e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066e4:	2300      	movs	r3, #0
 80066e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80066e8:	e02e      	b.n	8006748 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	9300      	str	r3, [sp, #0]
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	2200      	movs	r2, #0
 80066f2:	2180      	movs	r1, #128	@ 0x80
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f000 f848 	bl	800678a <UART_WaitOnFlagUntilTimeout>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d005      	beq.n	800670c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2220      	movs	r2, #32
 8006704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006708:	2303      	movs	r3, #3
 800670a:	e03a      	b.n	8006782 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d10b      	bne.n	800672a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	881b      	ldrh	r3, [r3, #0]
 8006716:	461a      	mov	r2, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006720:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	3302      	adds	r3, #2
 8006726:	61bb      	str	r3, [r7, #24]
 8006728:	e007      	b.n	800673a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	781a      	ldrb	r2, [r3, #0]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	3301      	adds	r3, #1
 8006738:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800673e:	b29b      	uxth	r3, r3
 8006740:	3b01      	subs	r3, #1
 8006742:	b29a      	uxth	r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800674c:	b29b      	uxth	r3, r3
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1cb      	bne.n	80066ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	2200      	movs	r2, #0
 800675a:	2140      	movs	r1, #64	@ 0x40
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f000 f814 	bl	800678a <UART_WaitOnFlagUntilTimeout>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d005      	beq.n	8006774 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2220      	movs	r2, #32
 800676c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006770:	2303      	movs	r3, #3
 8006772:	e006      	b.n	8006782 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2220      	movs	r2, #32
 8006778:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800677c:	2300      	movs	r3, #0
 800677e:	e000      	b.n	8006782 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006780:	2302      	movs	r3, #2
  }
}
 8006782:	4618      	mov	r0, r3
 8006784:	3720      	adds	r7, #32
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b086      	sub	sp, #24
 800678e:	af00      	add	r7, sp, #0
 8006790:	60f8      	str	r0, [r7, #12]
 8006792:	60b9      	str	r1, [r7, #8]
 8006794:	603b      	str	r3, [r7, #0]
 8006796:	4613      	mov	r3, r2
 8006798:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800679a:	e03b      	b.n	8006814 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800679c:	6a3b      	ldr	r3, [r7, #32]
 800679e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a2:	d037      	beq.n	8006814 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067a4:	f7fc f88c 	bl	80028c0 <HAL_GetTick>
 80067a8:	4602      	mov	r2, r0
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	6a3a      	ldr	r2, [r7, #32]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d302      	bcc.n	80067ba <UART_WaitOnFlagUntilTimeout+0x30>
 80067b4:	6a3b      	ldr	r3, [r7, #32]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d101      	bne.n	80067be <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e03a      	b.n	8006834 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	f003 0304 	and.w	r3, r3, #4
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d023      	beq.n	8006814 <UART_WaitOnFlagUntilTimeout+0x8a>
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	2b80      	cmp	r3, #128	@ 0x80
 80067d0:	d020      	beq.n	8006814 <UART_WaitOnFlagUntilTimeout+0x8a>
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	2b40      	cmp	r3, #64	@ 0x40
 80067d6:	d01d      	beq.n	8006814 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 0308 	and.w	r3, r3, #8
 80067e2:	2b08      	cmp	r3, #8
 80067e4:	d116      	bne.n	8006814 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80067e6:	2300      	movs	r3, #0
 80067e8:	617b      	str	r3, [r7, #20]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	617b      	str	r3, [r7, #20]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	617b      	str	r3, [r7, #20]
 80067fa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f000 f81d 	bl	800683c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2208      	movs	r2, #8
 8006806:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e00f      	b.n	8006834 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	4013      	ands	r3, r2
 800681e:	68ba      	ldr	r2, [r7, #8]
 8006820:	429a      	cmp	r2, r3
 8006822:	bf0c      	ite	eq
 8006824:	2301      	moveq	r3, #1
 8006826:	2300      	movne	r3, #0
 8006828:	b2db      	uxtb	r3, r3
 800682a:	461a      	mov	r2, r3
 800682c:	79fb      	ldrb	r3, [r7, #7]
 800682e:	429a      	cmp	r2, r3
 8006830:	d0b4      	beq.n	800679c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3718      	adds	r7, #24
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800683c:	b480      	push	{r7}
 800683e:	b095      	sub	sp, #84	@ 0x54
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	330c      	adds	r3, #12
 800684a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800684e:	e853 3f00 	ldrex	r3, [r3]
 8006852:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006856:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800685a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	330c      	adds	r3, #12
 8006862:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006864:	643a      	str	r2, [r7, #64]	@ 0x40
 8006866:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006868:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800686a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800686c:	e841 2300 	strex	r3, r2, [r1]
 8006870:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006874:	2b00      	cmp	r3, #0
 8006876:	d1e5      	bne.n	8006844 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	3314      	adds	r3, #20
 800687e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006880:	6a3b      	ldr	r3, [r7, #32]
 8006882:	e853 3f00 	ldrex	r3, [r3]
 8006886:	61fb      	str	r3, [r7, #28]
   return(result);
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	f023 0301 	bic.w	r3, r3, #1
 800688e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	3314      	adds	r3, #20
 8006896:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006898:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800689a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800689e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068a0:	e841 2300 	strex	r3, r2, [r1]
 80068a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80068a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d1e5      	bne.n	8006878 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d119      	bne.n	80068e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	330c      	adds	r3, #12
 80068ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	e853 3f00 	ldrex	r3, [r3]
 80068c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	f023 0310 	bic.w	r3, r3, #16
 80068ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	330c      	adds	r3, #12
 80068d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068d4:	61ba      	str	r2, [r7, #24]
 80068d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d8:	6979      	ldr	r1, [r7, #20]
 80068da:	69ba      	ldr	r2, [r7, #24]
 80068dc:	e841 2300 	strex	r3, r2, [r1]
 80068e0:	613b      	str	r3, [r7, #16]
   return(result);
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d1e5      	bne.n	80068b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2220      	movs	r2, #32
 80068ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80068f6:	bf00      	nop
 80068f8:	3754      	adds	r7, #84	@ 0x54
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bc80      	pop	{r7}
 80068fe:	4770      	bx	lr

08006900 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	68da      	ldr	r2, [r3, #12]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	430a      	orrs	r2, r1
 800691c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	689a      	ldr	r2, [r3, #8]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	431a      	orrs	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	695b      	ldr	r3, [r3, #20]
 800692c:	431a      	orrs	r2, r3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	69db      	ldr	r3, [r3, #28]
 8006932:	4313      	orrs	r3, r2
 8006934:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8006940:	f023 030c 	bic.w	r3, r3, #12
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	6812      	ldr	r2, [r2, #0]
 8006948:	68b9      	ldr	r1, [r7, #8]
 800694a:	430b      	orrs	r3, r1
 800694c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	695b      	ldr	r3, [r3, #20]
 8006954:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	699a      	ldr	r2, [r3, #24]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	430a      	orrs	r2, r1
 8006962:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a55      	ldr	r2, [pc, #340]	@ (8006ac0 <UART_SetConfig+0x1c0>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d103      	bne.n	8006976 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800696e:	f7fe fe53 	bl	8005618 <HAL_RCC_GetPCLK2Freq>
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	e002      	b.n	800697c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006976:	f7fe fe3b 	bl	80055f0 <HAL_RCC_GetPCLK1Freq>
 800697a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	69db      	ldr	r3, [r3, #28]
 8006980:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006984:	d14c      	bne.n	8006a20 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	4613      	mov	r3, r2
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	4413      	add	r3, r2
 800698e:	009a      	lsls	r2, r3, #2
 8006990:	441a      	add	r2, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	005b      	lsls	r3, r3, #1
 8006998:	fbb2 f3f3 	udiv	r3, r2, r3
 800699c:	4a49      	ldr	r2, [pc, #292]	@ (8006ac4 <UART_SetConfig+0x1c4>)
 800699e:	fba2 2303 	umull	r2, r3, r2, r3
 80069a2:	095b      	lsrs	r3, r3, #5
 80069a4:	0119      	lsls	r1, r3, #4
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	4613      	mov	r3, r2
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	4413      	add	r3, r2
 80069ae:	009a      	lsls	r2, r3, #2
 80069b0:	441a      	add	r2, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	005b      	lsls	r3, r3, #1
 80069b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80069bc:	4b41      	ldr	r3, [pc, #260]	@ (8006ac4 <UART_SetConfig+0x1c4>)
 80069be:	fba3 0302 	umull	r0, r3, r3, r2
 80069c2:	095b      	lsrs	r3, r3, #5
 80069c4:	2064      	movs	r0, #100	@ 0x64
 80069c6:	fb00 f303 	mul.w	r3, r0, r3
 80069ca:	1ad3      	subs	r3, r2, r3
 80069cc:	00db      	lsls	r3, r3, #3
 80069ce:	3332      	adds	r3, #50	@ 0x32
 80069d0:	4a3c      	ldr	r2, [pc, #240]	@ (8006ac4 <UART_SetConfig+0x1c4>)
 80069d2:	fba2 2303 	umull	r2, r3, r2, r3
 80069d6:	095b      	lsrs	r3, r3, #5
 80069d8:	005b      	lsls	r3, r3, #1
 80069da:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80069de:	4419      	add	r1, r3
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	4613      	mov	r3, r2
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	4413      	add	r3, r2
 80069e8:	009a      	lsls	r2, r3, #2
 80069ea:	441a      	add	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	005b      	lsls	r3, r3, #1
 80069f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80069f6:	4b33      	ldr	r3, [pc, #204]	@ (8006ac4 <UART_SetConfig+0x1c4>)
 80069f8:	fba3 0302 	umull	r0, r3, r3, r2
 80069fc:	095b      	lsrs	r3, r3, #5
 80069fe:	2064      	movs	r0, #100	@ 0x64
 8006a00:	fb00 f303 	mul.w	r3, r0, r3
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	00db      	lsls	r3, r3, #3
 8006a08:	3332      	adds	r3, #50	@ 0x32
 8006a0a:	4a2e      	ldr	r2, [pc, #184]	@ (8006ac4 <UART_SetConfig+0x1c4>)
 8006a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a10:	095b      	lsrs	r3, r3, #5
 8006a12:	f003 0207 	and.w	r2, r3, #7
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	440a      	add	r2, r1
 8006a1c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a1e:	e04a      	b.n	8006ab6 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	4613      	mov	r3, r2
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4413      	add	r3, r2
 8006a28:	009a      	lsls	r2, r3, #2
 8006a2a:	441a      	add	r2, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a36:	4a23      	ldr	r2, [pc, #140]	@ (8006ac4 <UART_SetConfig+0x1c4>)
 8006a38:	fba2 2303 	umull	r2, r3, r2, r3
 8006a3c:	095b      	lsrs	r3, r3, #5
 8006a3e:	0119      	lsls	r1, r3, #4
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	4613      	mov	r3, r2
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	4413      	add	r3, r2
 8006a48:	009a      	lsls	r2, r3, #2
 8006a4a:	441a      	add	r2, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a56:	4b1b      	ldr	r3, [pc, #108]	@ (8006ac4 <UART_SetConfig+0x1c4>)
 8006a58:	fba3 0302 	umull	r0, r3, r3, r2
 8006a5c:	095b      	lsrs	r3, r3, #5
 8006a5e:	2064      	movs	r0, #100	@ 0x64
 8006a60:	fb00 f303 	mul.w	r3, r0, r3
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	011b      	lsls	r3, r3, #4
 8006a68:	3332      	adds	r3, #50	@ 0x32
 8006a6a:	4a16      	ldr	r2, [pc, #88]	@ (8006ac4 <UART_SetConfig+0x1c4>)
 8006a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a70:	095b      	lsrs	r3, r3, #5
 8006a72:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006a76:	4419      	add	r1, r3
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	4613      	mov	r3, r2
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	4413      	add	r3, r2
 8006a80:	009a      	lsls	r2, r3, #2
 8006a82:	441a      	add	r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ac4 <UART_SetConfig+0x1c4>)
 8006a90:	fba3 0302 	umull	r0, r3, r3, r2
 8006a94:	095b      	lsrs	r3, r3, #5
 8006a96:	2064      	movs	r0, #100	@ 0x64
 8006a98:	fb00 f303 	mul.w	r3, r0, r3
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	011b      	lsls	r3, r3, #4
 8006aa0:	3332      	adds	r3, #50	@ 0x32
 8006aa2:	4a08      	ldr	r2, [pc, #32]	@ (8006ac4 <UART_SetConfig+0x1c4>)
 8006aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8006aa8:	095b      	lsrs	r3, r3, #5
 8006aaa:	f003 020f 	and.w	r2, r3, #15
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	440a      	add	r2, r1
 8006ab4:	609a      	str	r2, [r3, #8]
}
 8006ab6:	bf00      	nop
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	40013800 	.word	0x40013800
 8006ac4:	51eb851f 	.word	0x51eb851f

08006ac8 <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8006ac8:	b590      	push	{r4, r7, lr}
 8006aca:	b087      	sub	sp, #28
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	607a      	str	r2, [r7, #4]
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	72fb      	strb	r3, [r7, #11]
 8006ad8:	4613      	mov	r3, r2
 8006ada:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	685c      	ldr	r4, [r3, #4]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	68d8      	ldr	r0, [r3, #12]
 8006ae4:	893b      	ldrh	r3, [r7, #8]
 8006ae6:	7af9      	ldrb	r1, [r7, #11]
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	47a0      	blx	r4
 8006aec:	6178      	str	r0, [r7, #20]

  return ret;
 8006aee:	697b      	ldr	r3, [r7, #20]
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	371c      	adds	r7, #28
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd90      	pop	{r4, r7, pc}

08006af8 <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8006af8:	b590      	push	{r4, r7, lr}
 8006afa:	b087      	sub	sp, #28
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	607a      	str	r2, [r7, #4]
 8006b02:	461a      	mov	r2, r3
 8006b04:	460b      	mov	r3, r1
 8006b06:	72fb      	strb	r3, [r7, #11]
 8006b08:	4613      	mov	r3, r2
 8006b0a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681c      	ldr	r4, [r3, #0]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	68d8      	ldr	r0, [r3, #12]
 8006b14:	893b      	ldrh	r3, [r7, #8]
 8006b16:	7af9      	ldrb	r1, [r7, #11]
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	47a0      	blx	r4
 8006b1c:	6178      	str	r0, [r7, #20]

  return ret;
 8006b1e:	697b      	ldr	r3, [r7, #20]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	371c      	adds	r7, #28
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd90      	pop	{r4, r7, pc}

08006b28 <lis2dw12_from_fs4_to_mg>:
{
  return ((float_t)lsb) * 0.061f;
}

float_t lis2dw12_from_fs4_to_mg(int16_t lsb)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	4603      	mov	r3, r0
 8006b30:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 0.122f;
 8006b32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7fa f8f2 	bl	8000d20 <__aeabi_i2f>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	4904      	ldr	r1, [pc, #16]	@ (8006b50 <lis2dw12_from_fs4_to_mg+0x28>)
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7fa f941 	bl	8000dc8 <__aeabi_fmul>
 8006b46:	4603      	mov	r3, r0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3708      	adds	r7, #8
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	3df9db23 	.word	0x3df9db23

08006b54 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b086      	sub	sp, #24
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8006b60:	f107 0210 	add.w	r2, r7, #16
 8006b64:	2301      	movs	r3, #1
 8006b66:	2120      	movs	r1, #32
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f7ff ffad 	bl	8006ac8 <lis2dw12_read_reg>
 8006b6e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d118      	bne.n	8006ba8 <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8006b76:	78fb      	ldrb	r3, [r7, #3]
 8006b78:	089b      	lsrs	r3, r3, #2
 8006b7a:	f003 0303 	and.w	r3, r3, #3
 8006b7e:	b2da      	uxtb	r2, r3
 8006b80:	7c3b      	ldrb	r3, [r7, #16]
 8006b82:	f362 0383 	bfi	r3, r2, #2, #2
 8006b86:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8006b88:	78fb      	ldrb	r3, [r7, #3]
 8006b8a:	f003 0303 	and.w	r3, r3, #3
 8006b8e:	b2da      	uxtb	r2, r3
 8006b90:	7c3b      	ldrb	r3, [r7, #16]
 8006b92:	f362 0301 	bfi	r3, r2, #0, #2
 8006b96:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8006b98:	f107 0210 	add.w	r2, r7, #16
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	2120      	movs	r1, #32
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f7ff ffa9 	bl	8006af8 <lis2dw12_write_reg>
 8006ba6:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d107      	bne.n	8006bbe <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8006bae:	f107 020c 	add.w	r2, r7, #12
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	2125      	movs	r1, #37	@ 0x25
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f7ff ff86 	bl	8006ac8 <lis2dw12_read_reg>
 8006bbc:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d110      	bne.n	8006be6 <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8006bc4:	78fb      	ldrb	r3, [r7, #3]
 8006bc6:	091b      	lsrs	r3, r3, #4
 8006bc8:	f003 0301 	and.w	r3, r3, #1
 8006bcc:	b2da      	uxtb	r2, r3
 8006bce:	7b3b      	ldrb	r3, [r7, #12]
 8006bd0:	f362 0382 	bfi	r3, r2, #2, #1
 8006bd4:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8006bd6:	f107 020c 	add.w	r2, r7, #12
 8006bda:	2301      	movs	r3, #1
 8006bdc:	2125      	movs	r1, #37	@ 0x25
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f7ff ff8a 	bl	8006af8 <lis2dw12_write_reg>
 8006be4:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8006be6:	697b      	ldr	r3, [r7, #20]
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3718      	adds	r7, #24
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b086      	sub	sp, #24
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8006bfc:	f107 0210 	add.w	r2, r7, #16
 8006c00:	2301      	movs	r3, #1
 8006c02:	2120      	movs	r1, #32
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f7ff ff5f 	bl	8006ac8 <lis2dw12_read_reg>
 8006c0a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d10f      	bne.n	8006c32 <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 8006c12:	78fb      	ldrb	r3, [r7, #3]
 8006c14:	f003 030f 	and.w	r3, r3, #15
 8006c18:	b2da      	uxtb	r2, r3
 8006c1a:	7c3b      	ldrb	r3, [r7, #16]
 8006c1c:	f362 1307 	bfi	r3, r2, #4, #4
 8006c20:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8006c22:	f107 0210 	add.w	r2, r7, #16
 8006c26:	2301      	movs	r3, #1
 8006c28:	2120      	movs	r1, #32
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f7ff ff64 	bl	8006af8 <lis2dw12_write_reg>
 8006c30:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d107      	bne.n	8006c48 <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8006c38:	f107 020c 	add.w	r2, r7, #12
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	2122      	movs	r1, #34	@ 0x22
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f7ff ff41 	bl	8006ac8 <lis2dw12_read_reg>
 8006c46:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d110      	bne.n	8006c70 <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8006c4e:	78fb      	ldrb	r3, [r7, #3]
 8006c50:	091b      	lsrs	r3, r3, #4
 8006c52:	f003 0303 	and.w	r3, r3, #3
 8006c56:	b2da      	uxtb	r2, r3
 8006c58:	7b3b      	ldrb	r3, [r7, #12]
 8006c5a:	f362 0301 	bfi	r3, r2, #0, #2
 8006c5e:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8006c60:	f107 020c 	add.w	r2, r7, #12
 8006c64:	2301      	movs	r3, #1
 8006c66:	2122      	movs	r1, #34	@ 0x22
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f7ff ff45 	bl	8006af8 <lis2dw12_write_reg>
 8006c6e:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8006c70:	697b      	ldr	r3, [r7, #20]
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3718      	adds	r7, #24
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006c7a:	b580      	push	{r7, lr}
 8006c7c:	b084      	sub	sp, #16
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
 8006c82:	460b      	mov	r3, r1
 8006c84:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8006c86:	f107 0208 	add.w	r2, r7, #8
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	2121      	movs	r1, #33	@ 0x21
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f7ff ff1a 	bl	8006ac8 <lis2dw12_read_reg>
 8006c94:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d10f      	bne.n	8006cbc <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8006c9c:	78fb      	ldrb	r3, [r7, #3]
 8006c9e:	f003 0301 	and.w	r3, r3, #1
 8006ca2:	b2da      	uxtb	r2, r3
 8006ca4:	7a3b      	ldrb	r3, [r7, #8]
 8006ca6:	f362 03c3 	bfi	r3, r2, #3, #1
 8006caa:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8006cac:	f107 0208 	add.w	r2, r7, #8
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	2121      	movs	r1, #33	@ 0x21
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f7ff ff1f 	bl	8006af8 <lis2dw12_write_reg>
 8006cba:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b084      	sub	sp, #16
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
 8006cce:	460b      	mov	r3, r1
 8006cd0:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8006cd2:	f107 0208 	add.w	r2, r7, #8
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	2125      	movs	r1, #37	@ 0x25
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f7ff fef4 	bl	8006ac8 <lis2dw12_read_reg>
 8006ce0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d10f      	bne.n	8006d08 <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 8006ce8:	78fb      	ldrb	r3, [r7, #3]
 8006cea:	f003 0303 	and.w	r3, r3, #3
 8006cee:	b2da      	uxtb	r2, r3
 8006cf0:	7a3b      	ldrb	r3, [r7, #8]
 8006cf2:	f362 1305 	bfi	r3, r2, #4, #2
 8006cf6:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8006cf8:	f107 0208 	add.w	r2, r7, #8
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	2125      	movs	r1, #37	@ 0x25
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f7ff fef9 	bl	8006af8 <lis2dw12_write_reg>
 8006d06:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006d08:	68fb      	ldr	r3, [r7, #12]
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3710      	adds	r7, #16
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b086      	sub	sp, #24
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
 8006d1a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 8006d1c:	f107 020c 	add.w	r2, r7, #12
 8006d20:	2306      	movs	r3, #6
 8006d22:	2128      	movs	r1, #40	@ 0x28
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f7ff fecf 	bl	8006ac8 <lis2dw12_read_reg>
 8006d2a:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8006d2c:	7b7b      	ldrb	r3, [r7, #13]
 8006d2e:	b21a      	sxth	r2, r3
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	021b      	lsls	r3, r3, #8
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	7b3a      	ldrb	r2, [r7, #12]
 8006d42:	4413      	add	r3, r2
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	b21a      	sxth	r2, r3
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8006d4c:	7bfa      	ldrb	r2, [r7, #15]
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	3302      	adds	r3, #2
 8006d52:	b212      	sxth	r2, r2
 8006d54:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	3302      	adds	r3, #2
 8006d5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	021b      	lsls	r3, r3, #8
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	7bba      	ldrb	r2, [r7, #14]
 8006d66:	4413      	add	r3, r2
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	3302      	adds	r3, #2
 8006d6e:	b212      	sxth	r2, r2
 8006d70:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006d72:	7c7a      	ldrb	r2, [r7, #17]
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	3304      	adds	r3, #4
 8006d78:	b212      	sxth	r2, r2
 8006d7a:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	3304      	adds	r3, #4
 8006d80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	021b      	lsls	r3, r3, #8
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	7c3a      	ldrb	r2, [r7, #16]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	b29a      	uxth	r2, r3
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	3304      	adds	r3, #4
 8006d94:	b212      	sxth	r2, r2
 8006d96:	801a      	strh	r2, [r3, #0]

  return ret;
 8006d98:	697b      	ldr	r3, [r7, #20]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3718      	adds	r7, #24
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b084      	sub	sp, #16
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
 8006daa:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8006dac:	2301      	movs	r3, #1
 8006dae:	683a      	ldr	r2, [r7, #0]
 8006db0:	210f      	movs	r1, #15
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f7ff fe88 	bl	8006ac8 <lis2dw12_read_reg>
 8006db8:	60f8      	str	r0, [r7, #12]

  return ret;
 8006dba:	68fb      	ldr	r3, [r7, #12]
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3710      	adds	r7, #16
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <lis2dw12_reset_set>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	460b      	mov	r3, r1
 8006dce:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8006dd0:	f107 0208 	add.w	r2, r7, #8
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	2121      	movs	r1, #33	@ 0x21
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f7ff fe75 	bl	8006ac8 <lis2dw12_read_reg>
 8006dde:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d10f      	bne.n	8006e06 <lis2dw12_reset_set+0x42>
  {
    reg.soft_reset = val;
 8006de6:	78fb      	ldrb	r3, [r7, #3]
 8006de8:	f003 0301 	and.w	r3, r3, #1
 8006dec:	b2da      	uxtb	r2, r3
 8006dee:	7a3b      	ldrb	r3, [r7, #8]
 8006df0:	f362 1386 	bfi	r3, r2, #6, #1
 8006df4:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8006df6:	f107 0208 	add.w	r2, r7, #8
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	2121      	movs	r1, #33	@ 0x21
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f7ff fe7a 	bl	8006af8 <lis2dw12_write_reg>
 8006e04:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006e06:	68fb      	ldr	r3, [r7, #12]
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3710      	adds	r7, #16
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <lis2dw12_reset_get>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8006e1a:	f107 0208 	add.w	r2, r7, #8
 8006e1e:	2301      	movs	r3, #1
 8006e20:	2121      	movs	r1, #33	@ 0x21
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f7ff fe50 	bl	8006ac8 <lis2dw12_read_reg>
 8006e28:	60f8      	str	r0, [r7, #12]
  *val = reg.soft_reset;
 8006e2a:	7a3b      	ldrb	r3, [r7, #8]
 8006e2c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	461a      	mov	r2, r3
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	701a      	strb	r2, [r3, #0]

  return ret;
 8006e38:	68fb      	ldr	r3, [r7, #12]
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3710      	adds	r7, #16
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <lis2dw12_pin_int1_route_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_pin_int1_route_set(stmdev_ctx_t *ctx,
                                    lis2dw12_ctrl4_int1_pad_ctrl_t *val)
{
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b086      	sub	sp, #24
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
 8006e4a:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl5_int2_pad_ctrl_t ctrl5_int2_pad_ctrl;
  lis2dw12_ctrl_reg7_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL5_INT2_PAD_CTRL,
 8006e4c:	f107 0210 	add.w	r2, r7, #16
 8006e50:	2301      	movs	r3, #1
 8006e52:	2124      	movs	r1, #36	@ 0x24
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f7ff fe37 	bl	8006ac8 <lis2dw12_read_reg>
 8006e5a:	6178      	str	r0, [r7, #20]
                          (uint8_t *)&ctrl5_int2_pad_ctrl, 1);

  if (ret == 0)
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d107      	bne.n	8006e72 <lis2dw12_pin_int1_route_set+0x30>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL_REG7, (uint8_t *) &reg, 1);
 8006e62:	f107 020c 	add.w	r2, r7, #12
 8006e66:	2301      	movs	r3, #1
 8006e68:	213f      	movs	r1, #63	@ 0x3f
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f7ff fe2c 	bl	8006ac8 <lis2dw12_read_reg>
 8006e70:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d13e      	bne.n	8006ef6 <lis2dw12_pin_int1_route_set+0xb4>
  {
    if ((val->int1_tap |
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006e80:	b2da      	uxtb	r2, r3
         val->int1_ff |
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006e8a:	b2db      	uxtb	r3, r3
    if ((val->int1_tap |
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	b2da      	uxtb	r2, r3
         val->int1_wu |
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006e98:	b2db      	uxtb	r3, r3
         val->int1_ff |
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	b2da      	uxtb	r2, r3
         val->int1_single_tap |
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006ea6:	b2db      	uxtb	r3, r3
         val->int1_wu |
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	b2da      	uxtb	r2, r3
         val->int1_6d |
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006eb4:	b2db      	uxtb	r3, r3
         val->int1_single_tap |
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	b2da      	uxtb	r2, r3
         ctrl5_int2_pad_ctrl.int2_sleep_state |
 8006eba:	7c3b      	ldrb	r3, [r7, #16]
 8006ebc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006ec0:	b2db      	uxtb	r3, r3
         val->int1_6d |
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	b2da      	uxtb	r2, r3
         ctrl5_int2_pad_ctrl.int2_sleep_chg) != PROPERTY_DISABLE)
 8006ec6:	7c3b      	ldrb	r3, [r7, #16]
 8006ec8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006ecc:	b2db      	uxtb	r3, r3
         ctrl5_int2_pad_ctrl.int2_sleep_state |
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	b2db      	uxtb	r3, r3
    if ((val->int1_tap |
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d004      	beq.n	8006ee0 <lis2dw12_pin_int1_route_set+0x9e>
    {
      reg.interrupts_enable = PROPERTY_ENABLE;
 8006ed6:	7b3b      	ldrb	r3, [r7, #12]
 8006ed8:	f043 0320 	orr.w	r3, r3, #32
 8006edc:	733b      	strb	r3, [r7, #12]
 8006ede:	e003      	b.n	8006ee8 <lis2dw12_pin_int1_route_set+0xa6>
    }

    else
    {
      reg.interrupts_enable = PROPERTY_DISABLE;
 8006ee0:	7b3b      	ldrb	r3, [r7, #12]
 8006ee2:	f023 0320 	bic.w	r3, r3, #32
 8006ee6:	733b      	strb	r3, [r7, #12]
    }

    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL4_INT1_PAD_CTRL,
 8006ee8:	2301      	movs	r3, #1
 8006eea:	683a      	ldr	r2, [r7, #0]
 8006eec:	2123      	movs	r1, #35	@ 0x23
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f7ff fe02 	bl	8006af8 <lis2dw12_write_reg>
 8006ef4:	6178      	str	r0, [r7, #20]
                             (uint8_t *) val, 1);
  }

  if (ret == 0)
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d107      	bne.n	8006f0c <lis2dw12_pin_int1_route_set+0xca>
  {
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL_REG7, (uint8_t *) &reg, 1);
 8006efc:	f107 020c 	add.w	r2, r7, #12
 8006f00:	2301      	movs	r3, #1
 8006f02:	213f      	movs	r1, #63	@ 0x3f
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f7ff fdf7 	bl	8006af8 <lis2dw12_write_reg>
 8006f0a:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8006f0c:	697b      	ldr	r3, [r7, #20]
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3718      	adds	r7, #24
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
	...

08006f18 <_fminf>:
 8006f18:	f004 bec8 	b.w	800bcac <fminf>

08006f1c <neai_classification_init>:
 8006f1c:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
 8006f20:	4604      	mov	r4, r0
 8006f22:	4605      	mov	r5, r0
 8006f24:	f854 0b04 	ldr.w	r0, [r4], #4
 8006f28:	f7fa f93a 	bl	80011a0 <__aeabi_f2uiz>
 8006f2c:	228a      	movs	r2, #138	@ 0x8a
 8006f2e:	fb00 2b02 	mla	fp, r0, r2, r2
 8006f32:	4959      	ldr	r1, [pc, #356]	@ (8007098 <neai_classification_init+0x17c>)
 8006f34:	4b59      	ldr	r3, [pc, #356]	@ (800709c <neai_classification_init+0x180>)
 8006f36:	600c      	str	r4, [r1, #0]
 8006f38:	4959      	ldr	r1, [pc, #356]	@ (80070a0 <neai_classification_init+0x184>)
 8006f3a:	f505 740b 	add.w	r4, r5, #556	@ 0x22c
 8006f3e:	f10b 0601 	add.w	r6, fp, #1
 8006f42:	600c      	str	r4, [r1, #0]
 8006f44:	6018      	str	r0, [r3, #0]
 8006f46:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 8006f4a:	f7fa f929 	bl	80011a0 <__aeabi_f2uiz>
 8006f4e:	00b6      	lsls	r6, r6, #2
 8006f50:	19ab      	adds	r3, r5, r6
 8006f52:	4604      	mov	r4, r0
 8006f54:	6858      	ldr	r0, [r3, #4]
 8006f56:	f7fa f923 	bl	80011a0 <__aeabi_f2uiz>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	4851      	ldr	r0, [pc, #324]	@ (80070a4 <neai_classification_init+0x188>)
 8006f5e:	f10b 0203 	add.w	r2, fp, #3
 8006f62:	6003      	str	r3, [r0, #0]
 8006f64:	1898      	adds	r0, r3, r2
 8006f66:	4423      	add	r3, r4
 8006f68:	4413      	add	r3, r2
 8006f6a:	f8df 813c 	ldr.w	r8, [pc, #316]	@ 80070a8 <neai_classification_init+0x18c>
 8006f6e:	eb00 0244 	add.w	r2, r0, r4, lsl #1
 8006f72:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006f76:	f8df a134 	ldr.w	sl, [pc, #308]	@ 80070ac <neai_classification_init+0x190>
 8006f7a:	f8df e134 	ldr.w	lr, [pc, #308]	@ 80070b0 <neai_classification_init+0x194>
 8006f7e:	f8df c134 	ldr.w	ip, [pc, #308]	@ 80070b4 <neai_classification_init+0x198>
 8006f82:	4f4d      	ldr	r7, [pc, #308]	@ (80070b8 <neai_classification_init+0x19c>)
 8006f84:	3608      	adds	r6, #8
 8006f86:	f8c8 3000 	str.w	r3, [r8]
 8006f8a:	18a3      	adds	r3, r4, r2
 8006f8c:	441c      	add	r4, r3
 8006f8e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8006f92:	442e      	add	r6, r5
 8006f94:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8006f98:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006f9c:	f8ce 0000 	str.w	r0, [lr]
 8006fa0:	4946      	ldr	r1, [pc, #280]	@ (80070bc <neai_classification_init+0x1a0>)
 8006fa2:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8006fa6:	f8ca 6000 	str.w	r6, [sl]
 8006faa:	f8cc 2000 	str.w	r2, [ip]
 8006fae:	603b      	str	r3, [r7, #0]
 8006fb0:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8006fb4:	f7fa f89c 	bl	80010f0 <__aeabi_fcmpeq>
 8006fb8:	2800      	cmp	r0, #0
 8006fba:	d059      	beq.n	8007070 <neai_classification_init+0x154>
 8006fbc:	4940      	ldr	r1, [pc, #256]	@ (80070c0 <neai_classification_init+0x1a4>)
 8006fbe:	6860      	ldr	r0, [r4, #4]
 8006fc0:	f7fa f896 	bl	80010f0 <__aeabi_fcmpeq>
 8006fc4:	2800      	cmp	r0, #0
 8006fc6:	d053      	beq.n	8007070 <neai_classification_init+0x154>
 8006fc8:	f04f 4186 	mov.w	r1, #1124073472	@ 0x43000000
 8006fcc:	68a0      	ldr	r0, [r4, #8]
 8006fce:	f7fa f88f 	bl	80010f0 <__aeabi_fcmpeq>
 8006fd2:	2800      	cmp	r0, #0
 8006fd4:	d04c      	beq.n	8007070 <neai_classification_init+0x154>
 8006fd6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8006fda:	68e0      	ldr	r0, [r4, #12]
 8006fdc:	f7fa f888 	bl	80010f0 <__aeabi_fcmpeq>
 8006fe0:	2800      	cmp	r0, #0
 8006fe2:	d045      	beq.n	8007070 <neai_classification_init+0x154>
 8006fe4:	2100      	movs	r1, #0
 8006fe6:	6920      	ldr	r0, [r4, #16]
 8006fe8:	f7fa f882 	bl	80010f0 <__aeabi_fcmpeq>
 8006fec:	2800      	cmp	r0, #0
 8006fee:	d03f      	beq.n	8007070 <neai_classification_init+0x154>
 8006ff0:	2100      	movs	r1, #0
 8006ff2:	6960      	ldr	r0, [r4, #20]
 8006ff4:	f7fa f87c 	bl	80010f0 <__aeabi_fcmpeq>
 8006ff8:	2800      	cmp	r0, #0
 8006ffa:	d039      	beq.n	8007070 <neai_classification_init+0x154>
 8006ffc:	2100      	movs	r1, #0
 8006ffe:	69a0      	ldr	r0, [r4, #24]
 8007000:	f7fa f876 	bl	80010f0 <__aeabi_fcmpeq>
 8007004:	2800      	cmp	r0, #0
 8007006:	d033      	beq.n	8007070 <neai_classification_init+0x154>
 8007008:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800700c:	69e0      	ldr	r0, [r4, #28]
 800700e:	f7fa f86f 	bl	80010f0 <__aeabi_fcmpeq>
 8007012:	b368      	cbz	r0, 8007070 <neai_classification_init+0x154>
 8007014:	492b      	ldr	r1, [pc, #172]	@ (80070c4 <neai_classification_init+0x1a8>)
 8007016:	6a20      	ldr	r0, [r4, #32]
 8007018:	f7fa f86a 	bl	80010f0 <__aeabi_fcmpeq>
 800701c:	b340      	cbz	r0, 8007070 <neai_classification_init+0x154>
 800701e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8007022:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8007024:	f7fa f864 	bl	80010f0 <__aeabi_fcmpeq>
 8007028:	b310      	cbz	r0, 8007070 <neai_classification_init+0x154>
 800702a:	4927      	ldr	r1, [pc, #156]	@ (80070c8 <neai_classification_init+0x1ac>)
 800702c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800702e:	f7fa f85f 	bl	80010f0 <__aeabi_fcmpeq>
 8007032:	b1e8      	cbz	r0, 8007070 <neai_classification_init+0x154>
 8007034:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8007038:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800703a:	f7fa f859 	bl	80010f0 <__aeabi_fcmpeq>
 800703e:	b1b8      	cbz	r0, 8007070 <neai_classification_init+0x154>
 8007040:	2100      	movs	r1, #0
 8007042:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8007044:	f7fa f854 	bl	80010f0 <__aeabi_fcmpeq>
 8007048:	b190      	cbz	r0, 8007070 <neai_classification_init+0x154>
 800704a:	2100      	movs	r1, #0
 800704c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800704e:	f7fa f84f 	bl	80010f0 <__aeabi_fcmpeq>
 8007052:	b168      	cbz	r0, 8007070 <neai_classification_init+0x154>
 8007054:	2100      	movs	r1, #0
 8007056:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8007058:	f7fa f84a 	bl	80010f0 <__aeabi_fcmpeq>
 800705c:	b140      	cbz	r0, 8007070 <neai_classification_init+0x154>
 800705e:	491b      	ldr	r1, [pc, #108]	@ (80070cc <neai_classification_init+0x1b0>)
 8007060:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8007062:	f7fa f845 	bl	80010f0 <__aeabi_fcmpeq>
 8007066:	2800      	cmp	r0, #0
 8007068:	bf0c      	ite	eq
 800706a:	237d      	moveq	r3, #125	@ 0x7d
 800706c:	2300      	movne	r3, #0
 800706e:	e000      	b.n	8007072 <neai_classification_init+0x156>
 8007070:	237d      	movs	r3, #125	@ 0x7d
 8007072:	4c17      	ldr	r4, [pc, #92]	@ (80070d0 <neai_classification_init+0x1b4>)
 8007074:	4917      	ldr	r1, [pc, #92]	@ (80070d4 <neai_classification_init+0x1b8>)
 8007076:	4818      	ldr	r0, [pc, #96]	@ (80070d8 <neai_classification_init+0x1bc>)
 8007078:	7023      	strb	r3, [r4, #0]
 800707a:	f7ff ff4d 	bl	8006f18 <_fminf>
 800707e:	4916      	ldr	r1, [pc, #88]	@ (80070d8 <neai_classification_init+0x1bc>)
 8007080:	f7fa f836 	bl	80010f0 <__aeabi_fcmpeq>
 8007084:	b110      	cbz	r0, 800708c <neai_classification_init+0x170>
 8007086:	7820      	ldrb	r0, [r4, #0]
 8007088:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 800708c:	2381      	movs	r3, #129	@ 0x81
 800708e:	7023      	strb	r3, [r4, #0]
 8007090:	4618      	mov	r0, r3
 8007092:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 8007096:	bf00      	nop
 8007098:	20000be4 	.word	0x20000be4
 800709c:	20000be8 	.word	0x20000be8
 80070a0:	20000be0 	.word	0x20000be0
 80070a4:	200009dc 	.word	0x200009dc
 80070a8:	200009d0 	.word	0x200009d0
 80070ac:	200009d8 	.word	0x200009d8
 80070b0:	200009d4 	.word	0x200009d4
 80070b4:	200009cc 	.word	0x200009cc
 80070b8:	200009c8 	.word	0x200009c8
 80070bc:	40a00000 	.word	0x40a00000
 80070c0:	40400000 	.word	0x40400000
 80070c4:	42100000 	.word	0x42100000
 80070c8:	42c40000 	.word	0x42c40000
 80070cc:	49742400 	.word	0x49742400
 80070d0:	20000024 	.word	0x20000024
 80070d4:	40066666 	.word	0x40066666
 80070d8:	3f8ccccd 	.word	0x3f8ccccd

080070dc <neai_classification>:
 80070dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e0:	4b8f      	ldr	r3, [pc, #572]	@ (8007320 <neai_classification+0x244>)
 80070e2:	b08d      	sub	sp, #52	@ 0x34
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	9103      	str	r1, [sp, #12]
 80070e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80070ea:	920b      	str	r2, [sp, #44]	@ 0x2c
 80070ec:	b113      	cbz	r3, 80070f4 <neai_classification+0x18>
 80070ee:	2b81      	cmp	r3, #129	@ 0x81
 80070f0:	f040 81da 	bne.w	80074a8 <neai_classification+0x3cc>
 80070f4:	f04f 0a00 	mov.w	sl, #0
 80070f8:	4605      	mov	r5, r0
 80070fa:	4656      	mov	r6, sl
 80070fc:	4b89      	ldr	r3, [pc, #548]	@ (8007324 <neai_classification+0x248>)
 80070fe:	f8df b228 	ldr.w	fp, [pc, #552]	@ 8007328 <neai_classification+0x24c>
 8007102:	9307      	str	r3, [sp, #28]
 8007104:	f8cd b010 	str.w	fp, [sp, #16]
 8007108:	2300      	movs	r3, #0
 800710a:	4a88      	ldr	r2, [pc, #544]	@ (800732c <neai_classification+0x250>)
 800710c:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8007110:	3303      	adds	r3, #3
 8007112:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8007116:	f842 1f04 	str.w	r1, [r2, #4]!
 800711a:	d1f7      	bne.n	800710c <neai_classification+0x30>
 800711c:	9b07      	ldr	r3, [sp, #28]
 800711e:	f8d3 8000 	ldr.w	r8, [r3]
 8007122:	4b80      	ldr	r3, [pc, #512]	@ (8007324 <neai_classification+0x248>)
 8007124:	f8cd 8008 	str.w	r8, [sp, #8]
 8007128:	461c      	mov	r4, r3
 800712a:	9307      	str	r3, [sp, #28]
 800712c:	f854 7f04 	ldr.w	r7, [r4, #4]!
 8007130:	4641      	mov	r1, r8
 8007132:	4638      	mov	r0, r7
 8007134:	f7f9 ffe6 	bl	8001104 <__aeabi_fcmplt>
 8007138:	b100      	cbz	r0, 800713c <neai_classification+0x60>
 800713a:	46b8      	mov	r8, r7
 800713c:	4b7c      	ldr	r3, [pc, #496]	@ (8007330 <neai_classification+0x254>)
 800713e:	42a3      	cmp	r3, r4
 8007140:	d1f4      	bne.n	800712c <neai_classification+0x50>
 8007142:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8007146:	4640      	mov	r0, r8
 8007148:	f7f9 fd34 	bl	8000bb4 <__aeabi_fsub>
 800714c:	f8dd b010 	ldr.w	fp, [sp, #16]
 8007150:	f04f 0a00 	mov.w	sl, #0
 8007154:	4681      	mov	r9, r0
 8007156:	465f      	mov	r7, fp
 8007158:	e9cd 5608 	strd	r5, r6, [sp, #32]
 800715c:	f8cd a004 	str.w	sl, [sp, #4]
 8007160:	4656      	mov	r6, sl
 8007162:	f10a 0a01 	add.w	sl, sl, #1
 8007166:	4650      	mov	r0, sl
 8007168:	f847 9f04 	str.w	r9, [r7, #4]!
 800716c:	f7f9 fdd8 	bl	8000d20 <__aeabi_i2f>
 8007170:	4970      	ldr	r1, [pc, #448]	@ (8007334 <neai_classification+0x258>)
 8007172:	f7f9 fe29 	bl	8000dc8 <__aeabi_fmul>
 8007176:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800717a:	f7f9 fd1b 	bl	8000bb4 <__aeabi_fsub>
 800717e:	4604      	mov	r4, r0
 8007180:	9801      	ldr	r0, [sp, #4]
 8007182:	f7f9 fdc9 	bl	8000d18 <__aeabi_ui2f>
 8007186:	4601      	mov	r1, r0
 8007188:	4620      	mov	r0, r4
 800718a:	f7f9 ffcf 	bl	800112c <__aeabi_fcmpge>
 800718e:	464d      	mov	r5, r9
 8007190:	2800      	cmp	r0, #0
 8007192:	d02e      	beq.n	80071f2 <neai_classification+0x116>
 8007194:	2300      	movs	r3, #0
 8007196:	461a      	mov	r2, r3
 8007198:	4633      	mov	r3, r6
 800719a:	4626      	mov	r6, r4
 800719c:	4614      	mov	r4, r2
 800719e:	b2a2      	uxth	r2, r4
 80071a0:	4610      	mov	r0, r2
 80071a2:	9306      	str	r3, [sp, #24]
 80071a4:	9205      	str	r2, [sp, #20]
 80071a6:	f7f9 fdbb 	bl	8000d20 <__aeabi_i2f>
 80071aa:	4629      	mov	r1, r5
 80071ac:	f7f9 fe0c 	bl	8000dc8 <__aeabi_fmul>
 80071b0:	9b01      	ldr	r3, [sp, #4]
 80071b2:	4a5c      	ldr	r2, [pc, #368]	@ (8007324 <neai_classification+0x248>)
 80071b4:	3401      	adds	r4, #1
 80071b6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80071ba:	f7f9 fcfd 	bl	8000bb8 <__addsf3>
 80071be:	9a05      	ldr	r2, [sp, #20]
 80071c0:	4605      	mov	r5, r0
 80071c2:	1c50      	adds	r0, r2, #1
 80071c4:	f7f9 fdac 	bl	8000d20 <__aeabi_i2f>
 80071c8:	4601      	mov	r1, r0
 80071ca:	4628      	mov	r0, r5
 80071cc:	f7f9 feb0 	bl	8000f30 <__aeabi_fdiv>
 80071d0:	9b01      	ldr	r3, [sp, #4]
 80071d2:	4605      	mov	r5, r0
 80071d4:	1c5a      	adds	r2, r3, #1
 80071d6:	b293      	uxth	r3, r2
 80071d8:	4618      	mov	r0, r3
 80071da:	9301      	str	r3, [sp, #4]
 80071dc:	f7f9 fd9c 	bl	8000d18 <__aeabi_ui2f>
 80071e0:	4601      	mov	r1, r0
 80071e2:	4630      	mov	r0, r6
 80071e4:	f7f9 ffa2 	bl	800112c <__aeabi_fcmpge>
 80071e8:	9b06      	ldr	r3, [sp, #24]
 80071ea:	2800      	cmp	r0, #0
 80071ec:	d1d7      	bne.n	800719e <neai_classification+0xc2>
 80071ee:	461e      	mov	r6, r3
 80071f0:	603d      	str	r5, [r7, #0]
 80071f2:	4641      	mov	r1, r8
 80071f4:	f8db 0004 	ldr.w	r0, [fp, #4]
 80071f8:	f7f9 ff84 	bl	8001104 <__aeabi_fcmplt>
 80071fc:	b118      	cbz	r0, 8007206 <neai_classification+0x12a>
 80071fe:	9b02      	ldr	r3, [sp, #8]
 8007200:	f8cb 3004 	str.w	r3, [fp, #4]
 8007204:	683d      	ldr	r5, [r7, #0]
 8007206:	4629      	mov	r1, r5
 8007208:	4640      	mov	r0, r8
 800720a:	f7f9 ff99 	bl	8001140 <__aeabi_fcmpgt>
 800720e:	b120      	cbz	r0, 800721a <neai_classification+0x13e>
 8007210:	b11e      	cbz	r6, 800721a <neai_classification+0x13e>
 8007212:	4b45      	ldr	r3, [pc, #276]	@ (8007328 <neai_classification+0x24c>)
 8007214:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8007218:	603b      	str	r3, [r7, #0]
 800721a:	f1ba 0f2e 	cmp.w	sl, #46	@ 0x2e
 800721e:	d19f      	bne.n	8007160 <neai_classification+0x84>
 8007220:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
 8007224:	9b04      	ldr	r3, [sp, #16]
 8007226:	3601      	adds	r6, #1
 8007228:	33b8      	adds	r3, #184	@ 0xb8
 800722a:	2e03      	cmp	r6, #3
 800722c:	9304      	str	r3, [sp, #16]
 800722e:	f105 0504 	add.w	r5, r5, #4
 8007232:	f47f af69 	bne.w	8007108 <neai_classification+0x2c>
 8007236:	2700      	movs	r7, #0
 8007238:	4e3f      	ldr	r6, [pc, #252]	@ (8007338 <neai_classification+0x25c>)
 800723a:	f5a6 750a 	sub.w	r5, r6, #552	@ 0x228
 800723e:	f855 4f04 	ldr.w	r4, [r5, #4]!
 8007242:	4639      	mov	r1, r7
 8007244:	4620      	mov	r0, r4
 8007246:	f7f9 ff5d 	bl	8001104 <__aeabi_fcmplt>
 800724a:	f104 4300 	add.w	r3, r4, #2147483648	@ 0x80000000
 800724e:	b100      	cbz	r0, 8007252 <neai_classification+0x176>
 8007250:	461c      	mov	r4, r3
 8007252:	42ae      	cmp	r6, r5
 8007254:	602c      	str	r4, [r5, #0]
 8007256:	d1f2      	bne.n	800723e <neai_classification+0x162>
 8007258:	4b38      	ldr	r3, [pc, #224]	@ (800733c <neai_classification+0x260>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	b373      	cbz	r3, 80072bc <neai_classification+0x1e0>
 800725e:	f8df a0e0 	ldr.w	sl, [pc, #224]	@ 8007340 <neai_classification+0x264>
 8007262:	4a38      	ldr	r2, [pc, #224]	@ (8007344 <neai_classification+0x268>)
 8007264:	46d3      	mov	fp, sl
 8007266:	6812      	ldr	r2, [r2, #0]
 8007268:	009f      	lsls	r7, r3, #2
 800726a:	3a04      	subs	r2, #4
 800726c:	9202      	str	r2, [sp, #8]
 800726e:	4a36      	ldr	r2, [pc, #216]	@ (8007348 <neai_classification+0x26c>)
 8007270:	f8d2 9000 	ldr.w	r9, [r2]
 8007274:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8007278:	9301      	str	r3, [sp, #4]
 800727a:	2300      	movs	r3, #0
 800727c:	46c8      	mov	r8, r9
 800727e:	461c      	mov	r4, r3
 8007280:	f8dd a008 	ldr.w	sl, [sp, #8]
 8007284:	4d28      	ldr	r5, [pc, #160]	@ (8007328 <neai_classification+0x24c>)
 8007286:	f84b 3b04 	str.w	r3, [fp], #4
 800728a:	f85a 1f04 	ldr.w	r1, [sl, #4]!
 800728e:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8007292:	f7f9 fc8f 	bl	8000bb4 <__aeabi_fsub>
 8007296:	f8d8 1000 	ldr.w	r1, [r8]
 800729a:	f7f9 fd95 	bl	8000dc8 <__aeabi_fmul>
 800729e:	4601      	mov	r1, r0
 80072a0:	4620      	mov	r0, r4
 80072a2:	f7f9 fc89 	bl	8000bb8 <__addsf3>
 80072a6:	42ae      	cmp	r6, r5
 80072a8:	4604      	mov	r4, r0
 80072aa:	44b8      	add	r8, r7
 80072ac:	f84b 0c04 	str.w	r0, [fp, #-4]
 80072b0:	d1eb      	bne.n	800728a <neai_classification+0x1ae>
 80072b2:	9b01      	ldr	r3, [sp, #4]
 80072b4:	f109 0904 	add.w	r9, r9, #4
 80072b8:	454b      	cmp	r3, r9
 80072ba:	d1de      	bne.n	800727a <neai_classification+0x19e>
 80072bc:	2600      	movs	r6, #0
 80072be:	4b23      	ldr	r3, [pc, #140]	@ (800734c <neai_classification+0x270>)
 80072c0:	681c      	ldr	r4, [r3, #0]
 80072c2:	9b03      	ldr	r3, [sp, #12]
 80072c4:	601e      	str	r6, [r3, #0]
 80072c6:	605e      	str	r6, [r3, #4]
 80072c8:	609e      	str	r6, [r3, #8]
 80072ca:	60de      	str	r6, [r3, #12]
 80072cc:	2c00      	cmp	r4, #0
 80072ce:	f000 80ef 	beq.w	80074b0 <neai_classification+0x3d4>
 80072d2:	4b1f      	ldr	r3, [pc, #124]	@ (8007350 <neai_classification+0x274>)
 80072d4:	4620      	mov	r0, r4
 80072d6:	681d      	ldr	r5, [r3, #0]
 80072d8:	4b1e      	ldr	r3, [pc, #120]	@ (8007354 <neai_classification+0x278>)
 80072da:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 80072de:	f8d3 9000 	ldr.w	r9, [r3]
 80072e2:	4b1d      	ldr	r3, [pc, #116]	@ (8007358 <neai_classification+0x27c>)
 80072e4:	4f16      	ldr	r7, [pc, #88]	@ (8007340 <neai_classification+0x264>)
 80072e6:	f8d3 8000 	ldr.w	r8, [r3]
 80072ea:	4b1c      	ldr	r3, [pc, #112]	@ (800735c <neai_classification+0x280>)
 80072ec:	f8d3 b000 	ldr.w	fp, [r3]
 80072f0:	4b1b      	ldr	r3, [pc, #108]	@ (8007360 <neai_classification+0x284>)
 80072f2:	f8d3 a000 	ldr.w	sl, [r3]
 80072f6:	f7f9 fd0f 	bl	8000d18 <__aeabi_ui2f>
 80072fa:	4601      	mov	r1, r0
 80072fc:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8007300:	f7f9 fe16 	bl	8000f30 <__aeabi_fdiv>
 8007304:	1f2b      	subs	r3, r5, #4
 8007306:	9301      	str	r3, [sp, #4]
 8007308:	1f23      	subs	r3, r4, #4
 800730a:	9004      	str	r0, [sp, #16]
 800730c:	9302      	str	r3, [sp, #8]
 800730e:	9b01      	ldr	r3, [sp, #4]
 8007310:	f853 0f04 	ldr.w	r0, [r3, #4]!
 8007314:	9301      	str	r3, [sp, #4]
 8007316:	f7f9 ff43 	bl	80011a0 <__aeabi_f2uiz>
 800731a:	4605      	mov	r5, r0
 800731c:	4604      	mov	r4, r0
 800731e:	e02c      	b.n	800737a <neai_classification+0x29e>
 8007320:	20000024 	.word	0x20000024
 8007324:	200009e0 	.word	0x200009e0
 8007328:	20000e10 	.word	0x20000e10
 800732c:	200009dc 	.word	0x200009dc
 8007330:	20000bdc 	.word	0x20000bdc
 8007334:	40321643 	.word	0x40321643
 8007338:	20001038 	.word	0x20001038
 800733c:	20000be8 	.word	0x20000be8
 8007340:	20000bec 	.word	0x20000bec
 8007344:	20000be4 	.word	0x20000be4
 8007348:	20000be0 	.word	0x20000be0
 800734c:	200009dc 	.word	0x200009dc
 8007350:	200009d8 	.word	0x200009d8
 8007354:	200009d4 	.word	0x200009d4
 8007358:	200009c8 	.word	0x200009c8
 800735c:	200009cc 	.word	0x200009cc
 8007360:	200009d0 	.word	0x200009d0
 8007364:	f85a 4024 	ldr.w	r4, [sl, r4, lsl #2]
 8007368:	4631      	mov	r1, r6
 800736a:	4620      	mov	r0, r4
 800736c:	f7f9 feca 	bl	8001104 <__aeabi_fcmplt>
 8007370:	b9b8      	cbnz	r0, 80073a2 <neai_classification+0x2c6>
 8007372:	4620      	mov	r0, r4
 8007374:	f7f9 ff14 	bl	80011a0 <__aeabi_f2uiz>
 8007378:	1944      	adds	r4, r0, r5
 800737a:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
 800737e:	f7f9 ff0f 	bl	80011a0 <__aeabi_f2uiz>
 8007382:	f858 1024 	ldr.w	r1, [r8, r4, lsl #2]
 8007386:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 800738a:	f7f9 febb 	bl	8001104 <__aeabi_fcmplt>
 800738e:	2800      	cmp	r0, #0
 8007390:	d1e8      	bne.n	8007364 <neai_classification+0x288>
 8007392:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
 8007396:	4631      	mov	r1, r6
 8007398:	4620      	mov	r0, r4
 800739a:	f7f9 feb3 	bl	8001104 <__aeabi_fcmplt>
 800739e:	2800      	cmp	r0, #0
 80073a0:	d0e7      	beq.n	8007372 <neai_classification+0x296>
 80073a2:	f104 4000 	add.w	r0, r4, #2147483648	@ 0x80000000
 80073a6:	f7f9 fefb 	bl	80011a0 <__aeabi_f2uiz>
 80073aa:	b284      	uxth	r4, r0
 80073ac:	9d03      	ldr	r5, [sp, #12]
 80073ae:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 80073b2:	3c01      	subs	r4, #1
 80073b4:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 80073b8:	9904      	ldr	r1, [sp, #16]
 80073ba:	f7f9 fbfd 	bl	8000bb8 <__addsf3>
 80073be:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 80073c2:	4293      	cmp	r3, r2
 80073c4:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 80073c8:	d1a1      	bne.n	800730e <neai_classification+0x232>
 80073ca:	462b      	mov	r3, r5
 80073cc:	68ae      	ldr	r6, [r5, #8]
 80073ce:	68ec      	ldr	r4, [r5, #12]
 80073d0:	681f      	ldr	r7, [r3, #0]
 80073d2:	686d      	ldr	r5, [r5, #4]
 80073d4:	4639      	mov	r1, r7
 80073d6:	4628      	mov	r0, r5
 80073d8:	f7f9 feb2 	bl	8001140 <__aeabi_fcmpgt>
 80073dc:	b900      	cbnz	r0, 80073e0 <neai_classification+0x304>
 80073de:	463d      	mov	r5, r7
 80073e0:	4631      	mov	r1, r6
 80073e2:	4628      	mov	r0, r5
 80073e4:	f7f9 fe8e 	bl	8001104 <__aeabi_fcmplt>
 80073e8:	b900      	cbnz	r0, 80073ec <neai_classification+0x310>
 80073ea:	462e      	mov	r6, r5
 80073ec:	4621      	mov	r1, r4
 80073ee:	4630      	mov	r0, r6
 80073f0:	f7f9 fe88 	bl	8001104 <__aeabi_fcmplt>
 80073f4:	2800      	cmp	r0, #0
 80073f6:	d05b      	beq.n	80074b0 <neai_classification+0x3d4>
 80073f8:	2700      	movs	r7, #0
 80073fa:	f04f 4682 	mov.w	r6, #1090519040	@ 0x41000000
 80073fe:	9b03      	ldr	r3, [sp, #12]
 8007400:	f1a3 0804 	sub.w	r8, r3, #4
 8007404:	f103 050c 	add.w	r5, r3, #12
 8007408:	f858 0f04 	ldr.w	r0, [r8, #4]!
 800740c:	4621      	mov	r1, r4
 800740e:	f7f9 fbd1 	bl	8000bb4 <__aeabi_fsub>
 8007412:	4631      	mov	r1, r6
 8007414:	f7f9 fcd8 	bl	8000dc8 <__aeabi_fmul>
 8007418:	f004 fc1a 	bl	800bc50 <expf>
 800741c:	4601      	mov	r1, r0
 800741e:	4638      	mov	r0, r7
 8007420:	f8c8 1000 	str.w	r1, [r8]
 8007424:	f7f9 fbc8 	bl	8000bb8 <__addsf3>
 8007428:	45a8      	cmp	r8, r5
 800742a:	4607      	mov	r7, r0
 800742c:	d1ec      	bne.n	8007408 <neai_classification+0x32c>
 800742e:	4601      	mov	r1, r0
 8007430:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8007434:	f7f9 fd7c 	bl	8000f30 <__aeabi_fdiv>
 8007438:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800743c:	4607      	mov	r7, r0
 800743e:	f8d8 1000 	ldr.w	r1, [r8]
 8007442:	f7f9 fcc1 	bl	8000dc8 <__aeabi_fmul>
 8007446:	4606      	mov	r6, r0
 8007448:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800744c:	4638      	mov	r0, r7
 800744e:	f8c8 6000 	str.w	r6, [r8]
 8007452:	f7f9 fcb9 	bl	8000dc8 <__aeabi_fmul>
 8007456:	4604      	mov	r4, r0
 8007458:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800745c:	4638      	mov	r0, r7
 800745e:	f8c8 4004 	str.w	r4, [r8, #4]
 8007462:	f7f9 fcb1 	bl	8000dc8 <__aeabi_fmul>
 8007466:	4605      	mov	r5, r0
 8007468:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800746c:	4638      	mov	r0, r7
 800746e:	f8c8 5008 	str.w	r5, [r8, #8]
 8007472:	f7f9 fca9 	bl	8000dc8 <__aeabi_fmul>
 8007476:	4621      	mov	r1, r4
 8007478:	4607      	mov	r7, r0
 800747a:	f8c8 000c 	str.w	r0, [r8, #12]
 800747e:	4630      	mov	r0, r6
 8007480:	f7f9 fe40 	bl	8001104 <__aeabi_fcmplt>
 8007484:	b9c0      	cbnz	r0, 80074b8 <neai_classification+0x3dc>
 8007486:	4634      	mov	r4, r6
 8007488:	2601      	movs	r6, #1
 800748a:	4629      	mov	r1, r5
 800748c:	4620      	mov	r0, r4
 800748e:	f7f9 fe39 	bl	8001104 <__aeabi_fcmplt>
 8007492:	b978      	cbnz	r0, 80074b4 <neai_classification+0x3d8>
 8007494:	4625      	mov	r5, r4
 8007496:	4639      	mov	r1, r7
 8007498:	4628      	mov	r0, r5
 800749a:	f7f9 fe33 	bl	8001104 <__aeabi_fcmplt>
 800749e:	2800      	cmp	r0, #0
 80074a0:	bf18      	it	ne
 80074a2:	2604      	movne	r6, #4
 80074a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074a6:	801e      	strh	r6, [r3, #0]
 80074a8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80074aa:	b00d      	add	sp, #52	@ 0x34
 80074ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074b0:	4634      	mov	r4, r6
 80074b2:	e7a1      	b.n	80073f8 <neai_classification+0x31c>
 80074b4:	2603      	movs	r6, #3
 80074b6:	e7ee      	b.n	8007496 <neai_classification+0x3ba>
 80074b8:	2602      	movs	r6, #2
 80074ba:	e7e6      	b.n	800748a <neai_classification+0x3ae>

080074bc <__cvt>:
 80074bc:	2b00      	cmp	r3, #0
 80074be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074c2:	461d      	mov	r5, r3
 80074c4:	bfbb      	ittet	lt
 80074c6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80074ca:	461d      	movlt	r5, r3
 80074cc:	2300      	movge	r3, #0
 80074ce:	232d      	movlt	r3, #45	@ 0x2d
 80074d0:	b088      	sub	sp, #32
 80074d2:	4614      	mov	r4, r2
 80074d4:	bfb8      	it	lt
 80074d6:	4614      	movlt	r4, r2
 80074d8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80074da:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80074dc:	7013      	strb	r3, [r2, #0]
 80074de:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80074e0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80074e4:	f023 0820 	bic.w	r8, r3, #32
 80074e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80074ec:	d005      	beq.n	80074fa <__cvt+0x3e>
 80074ee:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80074f2:	d100      	bne.n	80074f6 <__cvt+0x3a>
 80074f4:	3601      	adds	r6, #1
 80074f6:	2302      	movs	r3, #2
 80074f8:	e000      	b.n	80074fc <__cvt+0x40>
 80074fa:	2303      	movs	r3, #3
 80074fc:	aa07      	add	r2, sp, #28
 80074fe:	9204      	str	r2, [sp, #16]
 8007500:	aa06      	add	r2, sp, #24
 8007502:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007506:	e9cd 3600 	strd	r3, r6, [sp]
 800750a:	4622      	mov	r2, r4
 800750c:	462b      	mov	r3, r5
 800750e:	f001 f97f 	bl	8008810 <_dtoa_r>
 8007512:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007516:	4607      	mov	r7, r0
 8007518:	d119      	bne.n	800754e <__cvt+0x92>
 800751a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800751c:	07db      	lsls	r3, r3, #31
 800751e:	d50e      	bpl.n	800753e <__cvt+0x82>
 8007520:	eb00 0906 	add.w	r9, r0, r6
 8007524:	2200      	movs	r2, #0
 8007526:	2300      	movs	r3, #0
 8007528:	4620      	mov	r0, r4
 800752a:	4629      	mov	r1, r5
 800752c:	f7f9 fa5e 	bl	80009ec <__aeabi_dcmpeq>
 8007530:	b108      	cbz	r0, 8007536 <__cvt+0x7a>
 8007532:	f8cd 901c 	str.w	r9, [sp, #28]
 8007536:	2230      	movs	r2, #48	@ 0x30
 8007538:	9b07      	ldr	r3, [sp, #28]
 800753a:	454b      	cmp	r3, r9
 800753c:	d31e      	bcc.n	800757c <__cvt+0xc0>
 800753e:	4638      	mov	r0, r7
 8007540:	9b07      	ldr	r3, [sp, #28]
 8007542:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007544:	1bdb      	subs	r3, r3, r7
 8007546:	6013      	str	r3, [r2, #0]
 8007548:	b008      	add	sp, #32
 800754a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800754e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007552:	eb00 0906 	add.w	r9, r0, r6
 8007556:	d1e5      	bne.n	8007524 <__cvt+0x68>
 8007558:	7803      	ldrb	r3, [r0, #0]
 800755a:	2b30      	cmp	r3, #48	@ 0x30
 800755c:	d10a      	bne.n	8007574 <__cvt+0xb8>
 800755e:	2200      	movs	r2, #0
 8007560:	2300      	movs	r3, #0
 8007562:	4620      	mov	r0, r4
 8007564:	4629      	mov	r1, r5
 8007566:	f7f9 fa41 	bl	80009ec <__aeabi_dcmpeq>
 800756a:	b918      	cbnz	r0, 8007574 <__cvt+0xb8>
 800756c:	f1c6 0601 	rsb	r6, r6, #1
 8007570:	f8ca 6000 	str.w	r6, [sl]
 8007574:	f8da 3000 	ldr.w	r3, [sl]
 8007578:	4499      	add	r9, r3
 800757a:	e7d3      	b.n	8007524 <__cvt+0x68>
 800757c:	1c59      	adds	r1, r3, #1
 800757e:	9107      	str	r1, [sp, #28]
 8007580:	701a      	strb	r2, [r3, #0]
 8007582:	e7d9      	b.n	8007538 <__cvt+0x7c>

08007584 <__exponent>:
 8007584:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007586:	2900      	cmp	r1, #0
 8007588:	bfb6      	itet	lt
 800758a:	232d      	movlt	r3, #45	@ 0x2d
 800758c:	232b      	movge	r3, #43	@ 0x2b
 800758e:	4249      	neglt	r1, r1
 8007590:	2909      	cmp	r1, #9
 8007592:	7002      	strb	r2, [r0, #0]
 8007594:	7043      	strb	r3, [r0, #1]
 8007596:	dd29      	ble.n	80075ec <__exponent+0x68>
 8007598:	f10d 0307 	add.w	r3, sp, #7
 800759c:	461d      	mov	r5, r3
 800759e:	270a      	movs	r7, #10
 80075a0:	fbb1 f6f7 	udiv	r6, r1, r7
 80075a4:	461a      	mov	r2, r3
 80075a6:	fb07 1416 	mls	r4, r7, r6, r1
 80075aa:	3430      	adds	r4, #48	@ 0x30
 80075ac:	f802 4c01 	strb.w	r4, [r2, #-1]
 80075b0:	460c      	mov	r4, r1
 80075b2:	2c63      	cmp	r4, #99	@ 0x63
 80075b4:	4631      	mov	r1, r6
 80075b6:	f103 33ff 	add.w	r3, r3, #4294967295
 80075ba:	dcf1      	bgt.n	80075a0 <__exponent+0x1c>
 80075bc:	3130      	adds	r1, #48	@ 0x30
 80075be:	1e94      	subs	r4, r2, #2
 80075c0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80075c4:	4623      	mov	r3, r4
 80075c6:	1c41      	adds	r1, r0, #1
 80075c8:	42ab      	cmp	r3, r5
 80075ca:	d30a      	bcc.n	80075e2 <__exponent+0x5e>
 80075cc:	f10d 0309 	add.w	r3, sp, #9
 80075d0:	1a9b      	subs	r3, r3, r2
 80075d2:	42ac      	cmp	r4, r5
 80075d4:	bf88      	it	hi
 80075d6:	2300      	movhi	r3, #0
 80075d8:	3302      	adds	r3, #2
 80075da:	4403      	add	r3, r0
 80075dc:	1a18      	subs	r0, r3, r0
 80075de:	b003      	add	sp, #12
 80075e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075e2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80075e6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80075ea:	e7ed      	b.n	80075c8 <__exponent+0x44>
 80075ec:	2330      	movs	r3, #48	@ 0x30
 80075ee:	3130      	adds	r1, #48	@ 0x30
 80075f0:	7083      	strb	r3, [r0, #2]
 80075f2:	70c1      	strb	r1, [r0, #3]
 80075f4:	1d03      	adds	r3, r0, #4
 80075f6:	e7f1      	b.n	80075dc <__exponent+0x58>

080075f8 <_printf_float>:
 80075f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075fc:	b091      	sub	sp, #68	@ 0x44
 80075fe:	460c      	mov	r4, r1
 8007600:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8007604:	4616      	mov	r6, r2
 8007606:	461f      	mov	r7, r3
 8007608:	4605      	mov	r5, r0
 800760a:	f000 ffef 	bl	80085ec <_localeconv_r>
 800760e:	6803      	ldr	r3, [r0, #0]
 8007610:	4618      	mov	r0, r3
 8007612:	9308      	str	r3, [sp, #32]
 8007614:	f7f8 fdbe 	bl	8000194 <strlen>
 8007618:	2300      	movs	r3, #0
 800761a:	930e      	str	r3, [sp, #56]	@ 0x38
 800761c:	f8d8 3000 	ldr.w	r3, [r8]
 8007620:	9009      	str	r0, [sp, #36]	@ 0x24
 8007622:	3307      	adds	r3, #7
 8007624:	f023 0307 	bic.w	r3, r3, #7
 8007628:	f103 0208 	add.w	r2, r3, #8
 800762c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007630:	f8d4 b000 	ldr.w	fp, [r4]
 8007634:	f8c8 2000 	str.w	r2, [r8]
 8007638:	e9d3 8900 	ldrd	r8, r9, [r3]
 800763c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007640:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007642:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007646:	f04f 32ff 	mov.w	r2, #4294967295
 800764a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800764e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007652:	4b9c      	ldr	r3, [pc, #624]	@ (80078c4 <_printf_float+0x2cc>)
 8007654:	f7f9 f9fc 	bl	8000a50 <__aeabi_dcmpun>
 8007658:	bb70      	cbnz	r0, 80076b8 <_printf_float+0xc0>
 800765a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800765e:	f04f 32ff 	mov.w	r2, #4294967295
 8007662:	4b98      	ldr	r3, [pc, #608]	@ (80078c4 <_printf_float+0x2cc>)
 8007664:	f7f9 f9d6 	bl	8000a14 <__aeabi_dcmple>
 8007668:	bb30      	cbnz	r0, 80076b8 <_printf_float+0xc0>
 800766a:	2200      	movs	r2, #0
 800766c:	2300      	movs	r3, #0
 800766e:	4640      	mov	r0, r8
 8007670:	4649      	mov	r1, r9
 8007672:	f7f9 f9c5 	bl	8000a00 <__aeabi_dcmplt>
 8007676:	b110      	cbz	r0, 800767e <_printf_float+0x86>
 8007678:	232d      	movs	r3, #45	@ 0x2d
 800767a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800767e:	4a92      	ldr	r2, [pc, #584]	@ (80078c8 <_printf_float+0x2d0>)
 8007680:	4b92      	ldr	r3, [pc, #584]	@ (80078cc <_printf_float+0x2d4>)
 8007682:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007686:	bf8c      	ite	hi
 8007688:	4690      	movhi	r8, r2
 800768a:	4698      	movls	r8, r3
 800768c:	2303      	movs	r3, #3
 800768e:	f04f 0900 	mov.w	r9, #0
 8007692:	6123      	str	r3, [r4, #16]
 8007694:	f02b 0304 	bic.w	r3, fp, #4
 8007698:	6023      	str	r3, [r4, #0]
 800769a:	4633      	mov	r3, r6
 800769c:	4621      	mov	r1, r4
 800769e:	4628      	mov	r0, r5
 80076a0:	9700      	str	r7, [sp, #0]
 80076a2:	aa0f      	add	r2, sp, #60	@ 0x3c
 80076a4:	f000 f9d4 	bl	8007a50 <_printf_common>
 80076a8:	3001      	adds	r0, #1
 80076aa:	f040 8090 	bne.w	80077ce <_printf_float+0x1d6>
 80076ae:	f04f 30ff 	mov.w	r0, #4294967295
 80076b2:	b011      	add	sp, #68	@ 0x44
 80076b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076b8:	4642      	mov	r2, r8
 80076ba:	464b      	mov	r3, r9
 80076bc:	4640      	mov	r0, r8
 80076be:	4649      	mov	r1, r9
 80076c0:	f7f9 f9c6 	bl	8000a50 <__aeabi_dcmpun>
 80076c4:	b148      	cbz	r0, 80076da <_printf_float+0xe2>
 80076c6:	464b      	mov	r3, r9
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	bfb8      	it	lt
 80076cc:	232d      	movlt	r3, #45	@ 0x2d
 80076ce:	4a80      	ldr	r2, [pc, #512]	@ (80078d0 <_printf_float+0x2d8>)
 80076d0:	bfb8      	it	lt
 80076d2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80076d6:	4b7f      	ldr	r3, [pc, #508]	@ (80078d4 <_printf_float+0x2dc>)
 80076d8:	e7d3      	b.n	8007682 <_printf_float+0x8a>
 80076da:	6863      	ldr	r3, [r4, #4]
 80076dc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80076e0:	1c5a      	adds	r2, r3, #1
 80076e2:	d13f      	bne.n	8007764 <_printf_float+0x16c>
 80076e4:	2306      	movs	r3, #6
 80076e6:	6063      	str	r3, [r4, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80076ee:	6023      	str	r3, [r4, #0]
 80076f0:	9206      	str	r2, [sp, #24]
 80076f2:	aa0e      	add	r2, sp, #56	@ 0x38
 80076f4:	e9cd a204 	strd	sl, r2, [sp, #16]
 80076f8:	aa0d      	add	r2, sp, #52	@ 0x34
 80076fa:	9203      	str	r2, [sp, #12]
 80076fc:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8007700:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007704:	6863      	ldr	r3, [r4, #4]
 8007706:	4642      	mov	r2, r8
 8007708:	9300      	str	r3, [sp, #0]
 800770a:	4628      	mov	r0, r5
 800770c:	464b      	mov	r3, r9
 800770e:	910a      	str	r1, [sp, #40]	@ 0x28
 8007710:	f7ff fed4 	bl	80074bc <__cvt>
 8007714:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007716:	4680      	mov	r8, r0
 8007718:	2947      	cmp	r1, #71	@ 0x47
 800771a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800771c:	d128      	bne.n	8007770 <_printf_float+0x178>
 800771e:	1cc8      	adds	r0, r1, #3
 8007720:	db02      	blt.n	8007728 <_printf_float+0x130>
 8007722:	6863      	ldr	r3, [r4, #4]
 8007724:	4299      	cmp	r1, r3
 8007726:	dd40      	ble.n	80077aa <_printf_float+0x1b2>
 8007728:	f1aa 0a02 	sub.w	sl, sl, #2
 800772c:	fa5f fa8a 	uxtb.w	sl, sl
 8007730:	4652      	mov	r2, sl
 8007732:	3901      	subs	r1, #1
 8007734:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007738:	910d      	str	r1, [sp, #52]	@ 0x34
 800773a:	f7ff ff23 	bl	8007584 <__exponent>
 800773e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007740:	4681      	mov	r9, r0
 8007742:	1813      	adds	r3, r2, r0
 8007744:	2a01      	cmp	r2, #1
 8007746:	6123      	str	r3, [r4, #16]
 8007748:	dc02      	bgt.n	8007750 <_printf_float+0x158>
 800774a:	6822      	ldr	r2, [r4, #0]
 800774c:	07d2      	lsls	r2, r2, #31
 800774e:	d501      	bpl.n	8007754 <_printf_float+0x15c>
 8007750:	3301      	adds	r3, #1
 8007752:	6123      	str	r3, [r4, #16]
 8007754:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8007758:	2b00      	cmp	r3, #0
 800775a:	d09e      	beq.n	800769a <_printf_float+0xa2>
 800775c:	232d      	movs	r3, #45	@ 0x2d
 800775e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007762:	e79a      	b.n	800769a <_printf_float+0xa2>
 8007764:	2947      	cmp	r1, #71	@ 0x47
 8007766:	d1bf      	bne.n	80076e8 <_printf_float+0xf0>
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1bd      	bne.n	80076e8 <_printf_float+0xf0>
 800776c:	2301      	movs	r3, #1
 800776e:	e7ba      	b.n	80076e6 <_printf_float+0xee>
 8007770:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007774:	d9dc      	bls.n	8007730 <_printf_float+0x138>
 8007776:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800777a:	d118      	bne.n	80077ae <_printf_float+0x1b6>
 800777c:	2900      	cmp	r1, #0
 800777e:	6863      	ldr	r3, [r4, #4]
 8007780:	dd0b      	ble.n	800779a <_printf_float+0x1a2>
 8007782:	6121      	str	r1, [r4, #16]
 8007784:	b913      	cbnz	r3, 800778c <_printf_float+0x194>
 8007786:	6822      	ldr	r2, [r4, #0]
 8007788:	07d0      	lsls	r0, r2, #31
 800778a:	d502      	bpl.n	8007792 <_printf_float+0x19a>
 800778c:	3301      	adds	r3, #1
 800778e:	440b      	add	r3, r1
 8007790:	6123      	str	r3, [r4, #16]
 8007792:	f04f 0900 	mov.w	r9, #0
 8007796:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007798:	e7dc      	b.n	8007754 <_printf_float+0x15c>
 800779a:	b913      	cbnz	r3, 80077a2 <_printf_float+0x1aa>
 800779c:	6822      	ldr	r2, [r4, #0]
 800779e:	07d2      	lsls	r2, r2, #31
 80077a0:	d501      	bpl.n	80077a6 <_printf_float+0x1ae>
 80077a2:	3302      	adds	r3, #2
 80077a4:	e7f4      	b.n	8007790 <_printf_float+0x198>
 80077a6:	2301      	movs	r3, #1
 80077a8:	e7f2      	b.n	8007790 <_printf_float+0x198>
 80077aa:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80077ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077b0:	4299      	cmp	r1, r3
 80077b2:	db05      	blt.n	80077c0 <_printf_float+0x1c8>
 80077b4:	6823      	ldr	r3, [r4, #0]
 80077b6:	6121      	str	r1, [r4, #16]
 80077b8:	07d8      	lsls	r0, r3, #31
 80077ba:	d5ea      	bpl.n	8007792 <_printf_float+0x19a>
 80077bc:	1c4b      	adds	r3, r1, #1
 80077be:	e7e7      	b.n	8007790 <_printf_float+0x198>
 80077c0:	2900      	cmp	r1, #0
 80077c2:	bfcc      	ite	gt
 80077c4:	2201      	movgt	r2, #1
 80077c6:	f1c1 0202 	rsble	r2, r1, #2
 80077ca:	4413      	add	r3, r2
 80077cc:	e7e0      	b.n	8007790 <_printf_float+0x198>
 80077ce:	6823      	ldr	r3, [r4, #0]
 80077d0:	055a      	lsls	r2, r3, #21
 80077d2:	d407      	bmi.n	80077e4 <_printf_float+0x1ec>
 80077d4:	6923      	ldr	r3, [r4, #16]
 80077d6:	4642      	mov	r2, r8
 80077d8:	4631      	mov	r1, r6
 80077da:	4628      	mov	r0, r5
 80077dc:	47b8      	blx	r7
 80077de:	3001      	adds	r0, #1
 80077e0:	d12b      	bne.n	800783a <_printf_float+0x242>
 80077e2:	e764      	b.n	80076ae <_printf_float+0xb6>
 80077e4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80077e8:	f240 80dc 	bls.w	80079a4 <_printf_float+0x3ac>
 80077ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80077f0:	2200      	movs	r2, #0
 80077f2:	2300      	movs	r3, #0
 80077f4:	f7f9 f8fa 	bl	80009ec <__aeabi_dcmpeq>
 80077f8:	2800      	cmp	r0, #0
 80077fa:	d033      	beq.n	8007864 <_printf_float+0x26c>
 80077fc:	2301      	movs	r3, #1
 80077fe:	4631      	mov	r1, r6
 8007800:	4628      	mov	r0, r5
 8007802:	4a35      	ldr	r2, [pc, #212]	@ (80078d8 <_printf_float+0x2e0>)
 8007804:	47b8      	blx	r7
 8007806:	3001      	adds	r0, #1
 8007808:	f43f af51 	beq.w	80076ae <_printf_float+0xb6>
 800780c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8007810:	4543      	cmp	r3, r8
 8007812:	db02      	blt.n	800781a <_printf_float+0x222>
 8007814:	6823      	ldr	r3, [r4, #0]
 8007816:	07d8      	lsls	r0, r3, #31
 8007818:	d50f      	bpl.n	800783a <_printf_float+0x242>
 800781a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800781e:	4631      	mov	r1, r6
 8007820:	4628      	mov	r0, r5
 8007822:	47b8      	blx	r7
 8007824:	3001      	adds	r0, #1
 8007826:	f43f af42 	beq.w	80076ae <_printf_float+0xb6>
 800782a:	f04f 0900 	mov.w	r9, #0
 800782e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007832:	f104 0a1a 	add.w	sl, r4, #26
 8007836:	45c8      	cmp	r8, r9
 8007838:	dc09      	bgt.n	800784e <_printf_float+0x256>
 800783a:	6823      	ldr	r3, [r4, #0]
 800783c:	079b      	lsls	r3, r3, #30
 800783e:	f100 8102 	bmi.w	8007a46 <_printf_float+0x44e>
 8007842:	68e0      	ldr	r0, [r4, #12]
 8007844:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007846:	4298      	cmp	r0, r3
 8007848:	bfb8      	it	lt
 800784a:	4618      	movlt	r0, r3
 800784c:	e731      	b.n	80076b2 <_printf_float+0xba>
 800784e:	2301      	movs	r3, #1
 8007850:	4652      	mov	r2, sl
 8007852:	4631      	mov	r1, r6
 8007854:	4628      	mov	r0, r5
 8007856:	47b8      	blx	r7
 8007858:	3001      	adds	r0, #1
 800785a:	f43f af28 	beq.w	80076ae <_printf_float+0xb6>
 800785e:	f109 0901 	add.w	r9, r9, #1
 8007862:	e7e8      	b.n	8007836 <_printf_float+0x23e>
 8007864:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007866:	2b00      	cmp	r3, #0
 8007868:	dc38      	bgt.n	80078dc <_printf_float+0x2e4>
 800786a:	2301      	movs	r3, #1
 800786c:	4631      	mov	r1, r6
 800786e:	4628      	mov	r0, r5
 8007870:	4a19      	ldr	r2, [pc, #100]	@ (80078d8 <_printf_float+0x2e0>)
 8007872:	47b8      	blx	r7
 8007874:	3001      	adds	r0, #1
 8007876:	f43f af1a 	beq.w	80076ae <_printf_float+0xb6>
 800787a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800787e:	ea59 0303 	orrs.w	r3, r9, r3
 8007882:	d102      	bne.n	800788a <_printf_float+0x292>
 8007884:	6823      	ldr	r3, [r4, #0]
 8007886:	07d9      	lsls	r1, r3, #31
 8007888:	d5d7      	bpl.n	800783a <_printf_float+0x242>
 800788a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800788e:	4631      	mov	r1, r6
 8007890:	4628      	mov	r0, r5
 8007892:	47b8      	blx	r7
 8007894:	3001      	adds	r0, #1
 8007896:	f43f af0a 	beq.w	80076ae <_printf_float+0xb6>
 800789a:	f04f 0a00 	mov.w	sl, #0
 800789e:	f104 0b1a 	add.w	fp, r4, #26
 80078a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80078a4:	425b      	negs	r3, r3
 80078a6:	4553      	cmp	r3, sl
 80078a8:	dc01      	bgt.n	80078ae <_printf_float+0x2b6>
 80078aa:	464b      	mov	r3, r9
 80078ac:	e793      	b.n	80077d6 <_printf_float+0x1de>
 80078ae:	2301      	movs	r3, #1
 80078b0:	465a      	mov	r2, fp
 80078b2:	4631      	mov	r1, r6
 80078b4:	4628      	mov	r0, r5
 80078b6:	47b8      	blx	r7
 80078b8:	3001      	adds	r0, #1
 80078ba:	f43f aef8 	beq.w	80076ae <_printf_float+0xb6>
 80078be:	f10a 0a01 	add.w	sl, sl, #1
 80078c2:	e7ee      	b.n	80078a2 <_printf_float+0x2aa>
 80078c4:	7fefffff 	.word	0x7fefffff
 80078c8:	080176fc 	.word	0x080176fc
 80078cc:	080176f8 	.word	0x080176f8
 80078d0:	08017704 	.word	0x08017704
 80078d4:	08017700 	.word	0x08017700
 80078d8:	08017708 	.word	0x08017708
 80078dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80078de:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80078e2:	4553      	cmp	r3, sl
 80078e4:	bfa8      	it	ge
 80078e6:	4653      	movge	r3, sl
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	4699      	mov	r9, r3
 80078ec:	dc36      	bgt.n	800795c <_printf_float+0x364>
 80078ee:	f04f 0b00 	mov.w	fp, #0
 80078f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078f6:	f104 021a 	add.w	r2, r4, #26
 80078fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80078fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80078fe:	eba3 0309 	sub.w	r3, r3, r9
 8007902:	455b      	cmp	r3, fp
 8007904:	dc31      	bgt.n	800796a <_printf_float+0x372>
 8007906:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007908:	459a      	cmp	sl, r3
 800790a:	dc3a      	bgt.n	8007982 <_printf_float+0x38a>
 800790c:	6823      	ldr	r3, [r4, #0]
 800790e:	07da      	lsls	r2, r3, #31
 8007910:	d437      	bmi.n	8007982 <_printf_float+0x38a>
 8007912:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007914:	ebaa 0903 	sub.w	r9, sl, r3
 8007918:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800791a:	ebaa 0303 	sub.w	r3, sl, r3
 800791e:	4599      	cmp	r9, r3
 8007920:	bfa8      	it	ge
 8007922:	4699      	movge	r9, r3
 8007924:	f1b9 0f00 	cmp.w	r9, #0
 8007928:	dc33      	bgt.n	8007992 <_printf_float+0x39a>
 800792a:	f04f 0800 	mov.w	r8, #0
 800792e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007932:	f104 0b1a 	add.w	fp, r4, #26
 8007936:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007938:	ebaa 0303 	sub.w	r3, sl, r3
 800793c:	eba3 0309 	sub.w	r3, r3, r9
 8007940:	4543      	cmp	r3, r8
 8007942:	f77f af7a 	ble.w	800783a <_printf_float+0x242>
 8007946:	2301      	movs	r3, #1
 8007948:	465a      	mov	r2, fp
 800794a:	4631      	mov	r1, r6
 800794c:	4628      	mov	r0, r5
 800794e:	47b8      	blx	r7
 8007950:	3001      	adds	r0, #1
 8007952:	f43f aeac 	beq.w	80076ae <_printf_float+0xb6>
 8007956:	f108 0801 	add.w	r8, r8, #1
 800795a:	e7ec      	b.n	8007936 <_printf_float+0x33e>
 800795c:	4642      	mov	r2, r8
 800795e:	4631      	mov	r1, r6
 8007960:	4628      	mov	r0, r5
 8007962:	47b8      	blx	r7
 8007964:	3001      	adds	r0, #1
 8007966:	d1c2      	bne.n	80078ee <_printf_float+0x2f6>
 8007968:	e6a1      	b.n	80076ae <_printf_float+0xb6>
 800796a:	2301      	movs	r3, #1
 800796c:	4631      	mov	r1, r6
 800796e:	4628      	mov	r0, r5
 8007970:	920a      	str	r2, [sp, #40]	@ 0x28
 8007972:	47b8      	blx	r7
 8007974:	3001      	adds	r0, #1
 8007976:	f43f ae9a 	beq.w	80076ae <_printf_float+0xb6>
 800797a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800797c:	f10b 0b01 	add.w	fp, fp, #1
 8007980:	e7bb      	b.n	80078fa <_printf_float+0x302>
 8007982:	4631      	mov	r1, r6
 8007984:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007988:	4628      	mov	r0, r5
 800798a:	47b8      	blx	r7
 800798c:	3001      	adds	r0, #1
 800798e:	d1c0      	bne.n	8007912 <_printf_float+0x31a>
 8007990:	e68d      	b.n	80076ae <_printf_float+0xb6>
 8007992:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007994:	464b      	mov	r3, r9
 8007996:	4631      	mov	r1, r6
 8007998:	4628      	mov	r0, r5
 800799a:	4442      	add	r2, r8
 800799c:	47b8      	blx	r7
 800799e:	3001      	adds	r0, #1
 80079a0:	d1c3      	bne.n	800792a <_printf_float+0x332>
 80079a2:	e684      	b.n	80076ae <_printf_float+0xb6>
 80079a4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80079a8:	f1ba 0f01 	cmp.w	sl, #1
 80079ac:	dc01      	bgt.n	80079b2 <_printf_float+0x3ba>
 80079ae:	07db      	lsls	r3, r3, #31
 80079b0:	d536      	bpl.n	8007a20 <_printf_float+0x428>
 80079b2:	2301      	movs	r3, #1
 80079b4:	4642      	mov	r2, r8
 80079b6:	4631      	mov	r1, r6
 80079b8:	4628      	mov	r0, r5
 80079ba:	47b8      	blx	r7
 80079bc:	3001      	adds	r0, #1
 80079be:	f43f ae76 	beq.w	80076ae <_printf_float+0xb6>
 80079c2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80079c6:	4631      	mov	r1, r6
 80079c8:	4628      	mov	r0, r5
 80079ca:	47b8      	blx	r7
 80079cc:	3001      	adds	r0, #1
 80079ce:	f43f ae6e 	beq.w	80076ae <_printf_float+0xb6>
 80079d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80079d6:	2200      	movs	r2, #0
 80079d8:	2300      	movs	r3, #0
 80079da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80079de:	f7f9 f805 	bl	80009ec <__aeabi_dcmpeq>
 80079e2:	b9c0      	cbnz	r0, 8007a16 <_printf_float+0x41e>
 80079e4:	4653      	mov	r3, sl
 80079e6:	f108 0201 	add.w	r2, r8, #1
 80079ea:	4631      	mov	r1, r6
 80079ec:	4628      	mov	r0, r5
 80079ee:	47b8      	blx	r7
 80079f0:	3001      	adds	r0, #1
 80079f2:	d10c      	bne.n	8007a0e <_printf_float+0x416>
 80079f4:	e65b      	b.n	80076ae <_printf_float+0xb6>
 80079f6:	2301      	movs	r3, #1
 80079f8:	465a      	mov	r2, fp
 80079fa:	4631      	mov	r1, r6
 80079fc:	4628      	mov	r0, r5
 80079fe:	47b8      	blx	r7
 8007a00:	3001      	adds	r0, #1
 8007a02:	f43f ae54 	beq.w	80076ae <_printf_float+0xb6>
 8007a06:	f108 0801 	add.w	r8, r8, #1
 8007a0a:	45d0      	cmp	r8, sl
 8007a0c:	dbf3      	blt.n	80079f6 <_printf_float+0x3fe>
 8007a0e:	464b      	mov	r3, r9
 8007a10:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007a14:	e6e0      	b.n	80077d8 <_printf_float+0x1e0>
 8007a16:	f04f 0800 	mov.w	r8, #0
 8007a1a:	f104 0b1a 	add.w	fp, r4, #26
 8007a1e:	e7f4      	b.n	8007a0a <_printf_float+0x412>
 8007a20:	2301      	movs	r3, #1
 8007a22:	4642      	mov	r2, r8
 8007a24:	e7e1      	b.n	80079ea <_printf_float+0x3f2>
 8007a26:	2301      	movs	r3, #1
 8007a28:	464a      	mov	r2, r9
 8007a2a:	4631      	mov	r1, r6
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	47b8      	blx	r7
 8007a30:	3001      	adds	r0, #1
 8007a32:	f43f ae3c 	beq.w	80076ae <_printf_float+0xb6>
 8007a36:	f108 0801 	add.w	r8, r8, #1
 8007a3a:	68e3      	ldr	r3, [r4, #12]
 8007a3c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007a3e:	1a5b      	subs	r3, r3, r1
 8007a40:	4543      	cmp	r3, r8
 8007a42:	dcf0      	bgt.n	8007a26 <_printf_float+0x42e>
 8007a44:	e6fd      	b.n	8007842 <_printf_float+0x24a>
 8007a46:	f04f 0800 	mov.w	r8, #0
 8007a4a:	f104 0919 	add.w	r9, r4, #25
 8007a4e:	e7f4      	b.n	8007a3a <_printf_float+0x442>

08007a50 <_printf_common>:
 8007a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a54:	4616      	mov	r6, r2
 8007a56:	4698      	mov	r8, r3
 8007a58:	688a      	ldr	r2, [r1, #8]
 8007a5a:	690b      	ldr	r3, [r1, #16]
 8007a5c:	4607      	mov	r7, r0
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	bfb8      	it	lt
 8007a62:	4613      	movlt	r3, r2
 8007a64:	6033      	str	r3, [r6, #0]
 8007a66:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007a6a:	460c      	mov	r4, r1
 8007a6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a70:	b10a      	cbz	r2, 8007a76 <_printf_common+0x26>
 8007a72:	3301      	adds	r3, #1
 8007a74:	6033      	str	r3, [r6, #0]
 8007a76:	6823      	ldr	r3, [r4, #0]
 8007a78:	0699      	lsls	r1, r3, #26
 8007a7a:	bf42      	ittt	mi
 8007a7c:	6833      	ldrmi	r3, [r6, #0]
 8007a7e:	3302      	addmi	r3, #2
 8007a80:	6033      	strmi	r3, [r6, #0]
 8007a82:	6825      	ldr	r5, [r4, #0]
 8007a84:	f015 0506 	ands.w	r5, r5, #6
 8007a88:	d106      	bne.n	8007a98 <_printf_common+0x48>
 8007a8a:	f104 0a19 	add.w	sl, r4, #25
 8007a8e:	68e3      	ldr	r3, [r4, #12]
 8007a90:	6832      	ldr	r2, [r6, #0]
 8007a92:	1a9b      	subs	r3, r3, r2
 8007a94:	42ab      	cmp	r3, r5
 8007a96:	dc2b      	bgt.n	8007af0 <_printf_common+0xa0>
 8007a98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007a9c:	6822      	ldr	r2, [r4, #0]
 8007a9e:	3b00      	subs	r3, #0
 8007aa0:	bf18      	it	ne
 8007aa2:	2301      	movne	r3, #1
 8007aa4:	0692      	lsls	r2, r2, #26
 8007aa6:	d430      	bmi.n	8007b0a <_printf_common+0xba>
 8007aa8:	4641      	mov	r1, r8
 8007aaa:	4638      	mov	r0, r7
 8007aac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007ab0:	47c8      	blx	r9
 8007ab2:	3001      	adds	r0, #1
 8007ab4:	d023      	beq.n	8007afe <_printf_common+0xae>
 8007ab6:	6823      	ldr	r3, [r4, #0]
 8007ab8:	6922      	ldr	r2, [r4, #16]
 8007aba:	f003 0306 	and.w	r3, r3, #6
 8007abe:	2b04      	cmp	r3, #4
 8007ac0:	bf14      	ite	ne
 8007ac2:	2500      	movne	r5, #0
 8007ac4:	6833      	ldreq	r3, [r6, #0]
 8007ac6:	f04f 0600 	mov.w	r6, #0
 8007aca:	bf08      	it	eq
 8007acc:	68e5      	ldreq	r5, [r4, #12]
 8007ace:	f104 041a 	add.w	r4, r4, #26
 8007ad2:	bf08      	it	eq
 8007ad4:	1aed      	subeq	r5, r5, r3
 8007ad6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007ada:	bf08      	it	eq
 8007adc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	bfc4      	itt	gt
 8007ae4:	1a9b      	subgt	r3, r3, r2
 8007ae6:	18ed      	addgt	r5, r5, r3
 8007ae8:	42b5      	cmp	r5, r6
 8007aea:	d11a      	bne.n	8007b22 <_printf_common+0xd2>
 8007aec:	2000      	movs	r0, #0
 8007aee:	e008      	b.n	8007b02 <_printf_common+0xb2>
 8007af0:	2301      	movs	r3, #1
 8007af2:	4652      	mov	r2, sl
 8007af4:	4641      	mov	r1, r8
 8007af6:	4638      	mov	r0, r7
 8007af8:	47c8      	blx	r9
 8007afa:	3001      	adds	r0, #1
 8007afc:	d103      	bne.n	8007b06 <_printf_common+0xb6>
 8007afe:	f04f 30ff 	mov.w	r0, #4294967295
 8007b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b06:	3501      	adds	r5, #1
 8007b08:	e7c1      	b.n	8007a8e <_printf_common+0x3e>
 8007b0a:	2030      	movs	r0, #48	@ 0x30
 8007b0c:	18e1      	adds	r1, r4, r3
 8007b0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007b12:	1c5a      	adds	r2, r3, #1
 8007b14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007b18:	4422      	add	r2, r4
 8007b1a:	3302      	adds	r3, #2
 8007b1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007b20:	e7c2      	b.n	8007aa8 <_printf_common+0x58>
 8007b22:	2301      	movs	r3, #1
 8007b24:	4622      	mov	r2, r4
 8007b26:	4641      	mov	r1, r8
 8007b28:	4638      	mov	r0, r7
 8007b2a:	47c8      	blx	r9
 8007b2c:	3001      	adds	r0, #1
 8007b2e:	d0e6      	beq.n	8007afe <_printf_common+0xae>
 8007b30:	3601      	adds	r6, #1
 8007b32:	e7d9      	b.n	8007ae8 <_printf_common+0x98>

08007b34 <_printf_i>:
 8007b34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b38:	7e0f      	ldrb	r7, [r1, #24]
 8007b3a:	4691      	mov	r9, r2
 8007b3c:	2f78      	cmp	r7, #120	@ 0x78
 8007b3e:	4680      	mov	r8, r0
 8007b40:	460c      	mov	r4, r1
 8007b42:	469a      	mov	sl, r3
 8007b44:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007b46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007b4a:	d807      	bhi.n	8007b5c <_printf_i+0x28>
 8007b4c:	2f62      	cmp	r7, #98	@ 0x62
 8007b4e:	d80a      	bhi.n	8007b66 <_printf_i+0x32>
 8007b50:	2f00      	cmp	r7, #0
 8007b52:	f000 80d1 	beq.w	8007cf8 <_printf_i+0x1c4>
 8007b56:	2f58      	cmp	r7, #88	@ 0x58
 8007b58:	f000 80b8 	beq.w	8007ccc <_printf_i+0x198>
 8007b5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007b64:	e03a      	b.n	8007bdc <_printf_i+0xa8>
 8007b66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007b6a:	2b15      	cmp	r3, #21
 8007b6c:	d8f6      	bhi.n	8007b5c <_printf_i+0x28>
 8007b6e:	a101      	add	r1, pc, #4	@ (adr r1, 8007b74 <_printf_i+0x40>)
 8007b70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b74:	08007bcd 	.word	0x08007bcd
 8007b78:	08007be1 	.word	0x08007be1
 8007b7c:	08007b5d 	.word	0x08007b5d
 8007b80:	08007b5d 	.word	0x08007b5d
 8007b84:	08007b5d 	.word	0x08007b5d
 8007b88:	08007b5d 	.word	0x08007b5d
 8007b8c:	08007be1 	.word	0x08007be1
 8007b90:	08007b5d 	.word	0x08007b5d
 8007b94:	08007b5d 	.word	0x08007b5d
 8007b98:	08007b5d 	.word	0x08007b5d
 8007b9c:	08007b5d 	.word	0x08007b5d
 8007ba0:	08007cdf 	.word	0x08007cdf
 8007ba4:	08007c0b 	.word	0x08007c0b
 8007ba8:	08007c99 	.word	0x08007c99
 8007bac:	08007b5d 	.word	0x08007b5d
 8007bb0:	08007b5d 	.word	0x08007b5d
 8007bb4:	08007d01 	.word	0x08007d01
 8007bb8:	08007b5d 	.word	0x08007b5d
 8007bbc:	08007c0b 	.word	0x08007c0b
 8007bc0:	08007b5d 	.word	0x08007b5d
 8007bc4:	08007b5d 	.word	0x08007b5d
 8007bc8:	08007ca1 	.word	0x08007ca1
 8007bcc:	6833      	ldr	r3, [r6, #0]
 8007bce:	1d1a      	adds	r2, r3, #4
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	6032      	str	r2, [r6, #0]
 8007bd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007bd8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e09c      	b.n	8007d1a <_printf_i+0x1e6>
 8007be0:	6833      	ldr	r3, [r6, #0]
 8007be2:	6820      	ldr	r0, [r4, #0]
 8007be4:	1d19      	adds	r1, r3, #4
 8007be6:	6031      	str	r1, [r6, #0]
 8007be8:	0606      	lsls	r6, r0, #24
 8007bea:	d501      	bpl.n	8007bf0 <_printf_i+0xbc>
 8007bec:	681d      	ldr	r5, [r3, #0]
 8007bee:	e003      	b.n	8007bf8 <_printf_i+0xc4>
 8007bf0:	0645      	lsls	r5, r0, #25
 8007bf2:	d5fb      	bpl.n	8007bec <_printf_i+0xb8>
 8007bf4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007bf8:	2d00      	cmp	r5, #0
 8007bfa:	da03      	bge.n	8007c04 <_printf_i+0xd0>
 8007bfc:	232d      	movs	r3, #45	@ 0x2d
 8007bfe:	426d      	negs	r5, r5
 8007c00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c04:	230a      	movs	r3, #10
 8007c06:	4858      	ldr	r0, [pc, #352]	@ (8007d68 <_printf_i+0x234>)
 8007c08:	e011      	b.n	8007c2e <_printf_i+0xfa>
 8007c0a:	6821      	ldr	r1, [r4, #0]
 8007c0c:	6833      	ldr	r3, [r6, #0]
 8007c0e:	0608      	lsls	r0, r1, #24
 8007c10:	f853 5b04 	ldr.w	r5, [r3], #4
 8007c14:	d402      	bmi.n	8007c1c <_printf_i+0xe8>
 8007c16:	0649      	lsls	r1, r1, #25
 8007c18:	bf48      	it	mi
 8007c1a:	b2ad      	uxthmi	r5, r5
 8007c1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007c1e:	6033      	str	r3, [r6, #0]
 8007c20:	bf14      	ite	ne
 8007c22:	230a      	movne	r3, #10
 8007c24:	2308      	moveq	r3, #8
 8007c26:	4850      	ldr	r0, [pc, #320]	@ (8007d68 <_printf_i+0x234>)
 8007c28:	2100      	movs	r1, #0
 8007c2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007c2e:	6866      	ldr	r6, [r4, #4]
 8007c30:	2e00      	cmp	r6, #0
 8007c32:	60a6      	str	r6, [r4, #8]
 8007c34:	db05      	blt.n	8007c42 <_printf_i+0x10e>
 8007c36:	6821      	ldr	r1, [r4, #0]
 8007c38:	432e      	orrs	r6, r5
 8007c3a:	f021 0104 	bic.w	r1, r1, #4
 8007c3e:	6021      	str	r1, [r4, #0]
 8007c40:	d04b      	beq.n	8007cda <_printf_i+0x1a6>
 8007c42:	4616      	mov	r6, r2
 8007c44:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c48:	fb03 5711 	mls	r7, r3, r1, r5
 8007c4c:	5dc7      	ldrb	r7, [r0, r7]
 8007c4e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c52:	462f      	mov	r7, r5
 8007c54:	42bb      	cmp	r3, r7
 8007c56:	460d      	mov	r5, r1
 8007c58:	d9f4      	bls.n	8007c44 <_printf_i+0x110>
 8007c5a:	2b08      	cmp	r3, #8
 8007c5c:	d10b      	bne.n	8007c76 <_printf_i+0x142>
 8007c5e:	6823      	ldr	r3, [r4, #0]
 8007c60:	07df      	lsls	r7, r3, #31
 8007c62:	d508      	bpl.n	8007c76 <_printf_i+0x142>
 8007c64:	6923      	ldr	r3, [r4, #16]
 8007c66:	6861      	ldr	r1, [r4, #4]
 8007c68:	4299      	cmp	r1, r3
 8007c6a:	bfde      	ittt	le
 8007c6c:	2330      	movle	r3, #48	@ 0x30
 8007c6e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c72:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007c76:	1b92      	subs	r2, r2, r6
 8007c78:	6122      	str	r2, [r4, #16]
 8007c7a:	464b      	mov	r3, r9
 8007c7c:	4621      	mov	r1, r4
 8007c7e:	4640      	mov	r0, r8
 8007c80:	f8cd a000 	str.w	sl, [sp]
 8007c84:	aa03      	add	r2, sp, #12
 8007c86:	f7ff fee3 	bl	8007a50 <_printf_common>
 8007c8a:	3001      	adds	r0, #1
 8007c8c:	d14a      	bne.n	8007d24 <_printf_i+0x1f0>
 8007c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8007c92:	b004      	add	sp, #16
 8007c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c98:	6823      	ldr	r3, [r4, #0]
 8007c9a:	f043 0320 	orr.w	r3, r3, #32
 8007c9e:	6023      	str	r3, [r4, #0]
 8007ca0:	2778      	movs	r7, #120	@ 0x78
 8007ca2:	4832      	ldr	r0, [pc, #200]	@ (8007d6c <_printf_i+0x238>)
 8007ca4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007ca8:	6823      	ldr	r3, [r4, #0]
 8007caa:	6831      	ldr	r1, [r6, #0]
 8007cac:	061f      	lsls	r7, r3, #24
 8007cae:	f851 5b04 	ldr.w	r5, [r1], #4
 8007cb2:	d402      	bmi.n	8007cba <_printf_i+0x186>
 8007cb4:	065f      	lsls	r7, r3, #25
 8007cb6:	bf48      	it	mi
 8007cb8:	b2ad      	uxthmi	r5, r5
 8007cba:	6031      	str	r1, [r6, #0]
 8007cbc:	07d9      	lsls	r1, r3, #31
 8007cbe:	bf44      	itt	mi
 8007cc0:	f043 0320 	orrmi.w	r3, r3, #32
 8007cc4:	6023      	strmi	r3, [r4, #0]
 8007cc6:	b11d      	cbz	r5, 8007cd0 <_printf_i+0x19c>
 8007cc8:	2310      	movs	r3, #16
 8007cca:	e7ad      	b.n	8007c28 <_printf_i+0xf4>
 8007ccc:	4826      	ldr	r0, [pc, #152]	@ (8007d68 <_printf_i+0x234>)
 8007cce:	e7e9      	b.n	8007ca4 <_printf_i+0x170>
 8007cd0:	6823      	ldr	r3, [r4, #0]
 8007cd2:	f023 0320 	bic.w	r3, r3, #32
 8007cd6:	6023      	str	r3, [r4, #0]
 8007cd8:	e7f6      	b.n	8007cc8 <_printf_i+0x194>
 8007cda:	4616      	mov	r6, r2
 8007cdc:	e7bd      	b.n	8007c5a <_printf_i+0x126>
 8007cde:	6833      	ldr	r3, [r6, #0]
 8007ce0:	6825      	ldr	r5, [r4, #0]
 8007ce2:	1d18      	adds	r0, r3, #4
 8007ce4:	6961      	ldr	r1, [r4, #20]
 8007ce6:	6030      	str	r0, [r6, #0]
 8007ce8:	062e      	lsls	r6, r5, #24
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	d501      	bpl.n	8007cf2 <_printf_i+0x1be>
 8007cee:	6019      	str	r1, [r3, #0]
 8007cf0:	e002      	b.n	8007cf8 <_printf_i+0x1c4>
 8007cf2:	0668      	lsls	r0, r5, #25
 8007cf4:	d5fb      	bpl.n	8007cee <_printf_i+0x1ba>
 8007cf6:	8019      	strh	r1, [r3, #0]
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	4616      	mov	r6, r2
 8007cfc:	6123      	str	r3, [r4, #16]
 8007cfe:	e7bc      	b.n	8007c7a <_printf_i+0x146>
 8007d00:	6833      	ldr	r3, [r6, #0]
 8007d02:	2100      	movs	r1, #0
 8007d04:	1d1a      	adds	r2, r3, #4
 8007d06:	6032      	str	r2, [r6, #0]
 8007d08:	681e      	ldr	r6, [r3, #0]
 8007d0a:	6862      	ldr	r2, [r4, #4]
 8007d0c:	4630      	mov	r0, r6
 8007d0e:	f000 fce4 	bl	80086da <memchr>
 8007d12:	b108      	cbz	r0, 8007d18 <_printf_i+0x1e4>
 8007d14:	1b80      	subs	r0, r0, r6
 8007d16:	6060      	str	r0, [r4, #4]
 8007d18:	6863      	ldr	r3, [r4, #4]
 8007d1a:	6123      	str	r3, [r4, #16]
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d22:	e7aa      	b.n	8007c7a <_printf_i+0x146>
 8007d24:	4632      	mov	r2, r6
 8007d26:	4649      	mov	r1, r9
 8007d28:	4640      	mov	r0, r8
 8007d2a:	6923      	ldr	r3, [r4, #16]
 8007d2c:	47d0      	blx	sl
 8007d2e:	3001      	adds	r0, #1
 8007d30:	d0ad      	beq.n	8007c8e <_printf_i+0x15a>
 8007d32:	6823      	ldr	r3, [r4, #0]
 8007d34:	079b      	lsls	r3, r3, #30
 8007d36:	d413      	bmi.n	8007d60 <_printf_i+0x22c>
 8007d38:	68e0      	ldr	r0, [r4, #12]
 8007d3a:	9b03      	ldr	r3, [sp, #12]
 8007d3c:	4298      	cmp	r0, r3
 8007d3e:	bfb8      	it	lt
 8007d40:	4618      	movlt	r0, r3
 8007d42:	e7a6      	b.n	8007c92 <_printf_i+0x15e>
 8007d44:	2301      	movs	r3, #1
 8007d46:	4632      	mov	r2, r6
 8007d48:	4649      	mov	r1, r9
 8007d4a:	4640      	mov	r0, r8
 8007d4c:	47d0      	blx	sl
 8007d4e:	3001      	adds	r0, #1
 8007d50:	d09d      	beq.n	8007c8e <_printf_i+0x15a>
 8007d52:	3501      	adds	r5, #1
 8007d54:	68e3      	ldr	r3, [r4, #12]
 8007d56:	9903      	ldr	r1, [sp, #12]
 8007d58:	1a5b      	subs	r3, r3, r1
 8007d5a:	42ab      	cmp	r3, r5
 8007d5c:	dcf2      	bgt.n	8007d44 <_printf_i+0x210>
 8007d5e:	e7eb      	b.n	8007d38 <_printf_i+0x204>
 8007d60:	2500      	movs	r5, #0
 8007d62:	f104 0619 	add.w	r6, r4, #25
 8007d66:	e7f5      	b.n	8007d54 <_printf_i+0x220>
 8007d68:	0801770a 	.word	0x0801770a
 8007d6c:	0801771b 	.word	0x0801771b

08007d70 <_scanf_float>:
 8007d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d74:	b087      	sub	sp, #28
 8007d76:	9303      	str	r3, [sp, #12]
 8007d78:	688b      	ldr	r3, [r1, #8]
 8007d7a:	4691      	mov	r9, r2
 8007d7c:	1e5a      	subs	r2, r3, #1
 8007d7e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007d82:	bf82      	ittt	hi
 8007d84:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007d88:	eb03 0b05 	addhi.w	fp, r3, r5
 8007d8c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007d90:	460a      	mov	r2, r1
 8007d92:	f04f 0500 	mov.w	r5, #0
 8007d96:	bf88      	it	hi
 8007d98:	608b      	strhi	r3, [r1, #8]
 8007d9a:	680b      	ldr	r3, [r1, #0]
 8007d9c:	4680      	mov	r8, r0
 8007d9e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007da2:	f842 3b1c 	str.w	r3, [r2], #28
 8007da6:	460c      	mov	r4, r1
 8007da8:	bf98      	it	ls
 8007daa:	f04f 0b00 	movls.w	fp, #0
 8007dae:	4616      	mov	r6, r2
 8007db0:	46aa      	mov	sl, r5
 8007db2:	462f      	mov	r7, r5
 8007db4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007db8:	9201      	str	r2, [sp, #4]
 8007dba:	9502      	str	r5, [sp, #8]
 8007dbc:	68a2      	ldr	r2, [r4, #8]
 8007dbe:	b15a      	cbz	r2, 8007dd8 <_scanf_float+0x68>
 8007dc0:	f8d9 3000 	ldr.w	r3, [r9]
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	2b4e      	cmp	r3, #78	@ 0x4e
 8007dc8:	d862      	bhi.n	8007e90 <_scanf_float+0x120>
 8007dca:	2b40      	cmp	r3, #64	@ 0x40
 8007dcc:	d83a      	bhi.n	8007e44 <_scanf_float+0xd4>
 8007dce:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007dd2:	b2c8      	uxtb	r0, r1
 8007dd4:	280e      	cmp	r0, #14
 8007dd6:	d938      	bls.n	8007e4a <_scanf_float+0xda>
 8007dd8:	b11f      	cbz	r7, 8007de2 <_scanf_float+0x72>
 8007dda:	6823      	ldr	r3, [r4, #0]
 8007ddc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007de0:	6023      	str	r3, [r4, #0]
 8007de2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007de6:	f1ba 0f01 	cmp.w	sl, #1
 8007dea:	f200 8114 	bhi.w	8008016 <_scanf_float+0x2a6>
 8007dee:	9b01      	ldr	r3, [sp, #4]
 8007df0:	429e      	cmp	r6, r3
 8007df2:	f200 8105 	bhi.w	8008000 <_scanf_float+0x290>
 8007df6:	2001      	movs	r0, #1
 8007df8:	b007      	add	sp, #28
 8007dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dfe:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007e02:	2a0d      	cmp	r2, #13
 8007e04:	d8e8      	bhi.n	8007dd8 <_scanf_float+0x68>
 8007e06:	a101      	add	r1, pc, #4	@ (adr r1, 8007e0c <_scanf_float+0x9c>)
 8007e08:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007e0c:	08007f55 	.word	0x08007f55
 8007e10:	08007dd9 	.word	0x08007dd9
 8007e14:	08007dd9 	.word	0x08007dd9
 8007e18:	08007dd9 	.word	0x08007dd9
 8007e1c:	08007fb1 	.word	0x08007fb1
 8007e20:	08007f8b 	.word	0x08007f8b
 8007e24:	08007dd9 	.word	0x08007dd9
 8007e28:	08007dd9 	.word	0x08007dd9
 8007e2c:	08007f63 	.word	0x08007f63
 8007e30:	08007dd9 	.word	0x08007dd9
 8007e34:	08007dd9 	.word	0x08007dd9
 8007e38:	08007dd9 	.word	0x08007dd9
 8007e3c:	08007dd9 	.word	0x08007dd9
 8007e40:	08007f1f 	.word	0x08007f1f
 8007e44:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007e48:	e7db      	b.n	8007e02 <_scanf_float+0x92>
 8007e4a:	290e      	cmp	r1, #14
 8007e4c:	d8c4      	bhi.n	8007dd8 <_scanf_float+0x68>
 8007e4e:	a001      	add	r0, pc, #4	@ (adr r0, 8007e54 <_scanf_float+0xe4>)
 8007e50:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007e54:	08007f0f 	.word	0x08007f0f
 8007e58:	08007dd9 	.word	0x08007dd9
 8007e5c:	08007f0f 	.word	0x08007f0f
 8007e60:	08007f9f 	.word	0x08007f9f
 8007e64:	08007dd9 	.word	0x08007dd9
 8007e68:	08007eb1 	.word	0x08007eb1
 8007e6c:	08007ef5 	.word	0x08007ef5
 8007e70:	08007ef5 	.word	0x08007ef5
 8007e74:	08007ef5 	.word	0x08007ef5
 8007e78:	08007ef5 	.word	0x08007ef5
 8007e7c:	08007ef5 	.word	0x08007ef5
 8007e80:	08007ef5 	.word	0x08007ef5
 8007e84:	08007ef5 	.word	0x08007ef5
 8007e88:	08007ef5 	.word	0x08007ef5
 8007e8c:	08007ef5 	.word	0x08007ef5
 8007e90:	2b6e      	cmp	r3, #110	@ 0x6e
 8007e92:	d809      	bhi.n	8007ea8 <_scanf_float+0x138>
 8007e94:	2b60      	cmp	r3, #96	@ 0x60
 8007e96:	d8b2      	bhi.n	8007dfe <_scanf_float+0x8e>
 8007e98:	2b54      	cmp	r3, #84	@ 0x54
 8007e9a:	d07b      	beq.n	8007f94 <_scanf_float+0x224>
 8007e9c:	2b59      	cmp	r3, #89	@ 0x59
 8007e9e:	d19b      	bne.n	8007dd8 <_scanf_float+0x68>
 8007ea0:	2d07      	cmp	r5, #7
 8007ea2:	d199      	bne.n	8007dd8 <_scanf_float+0x68>
 8007ea4:	2508      	movs	r5, #8
 8007ea6:	e02f      	b.n	8007f08 <_scanf_float+0x198>
 8007ea8:	2b74      	cmp	r3, #116	@ 0x74
 8007eaa:	d073      	beq.n	8007f94 <_scanf_float+0x224>
 8007eac:	2b79      	cmp	r3, #121	@ 0x79
 8007eae:	e7f6      	b.n	8007e9e <_scanf_float+0x12e>
 8007eb0:	6821      	ldr	r1, [r4, #0]
 8007eb2:	05c8      	lsls	r0, r1, #23
 8007eb4:	d51e      	bpl.n	8007ef4 <_scanf_float+0x184>
 8007eb6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007eba:	6021      	str	r1, [r4, #0]
 8007ebc:	3701      	adds	r7, #1
 8007ebe:	f1bb 0f00 	cmp.w	fp, #0
 8007ec2:	d003      	beq.n	8007ecc <_scanf_float+0x15c>
 8007ec4:	3201      	adds	r2, #1
 8007ec6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007eca:	60a2      	str	r2, [r4, #8]
 8007ecc:	68a3      	ldr	r3, [r4, #8]
 8007ece:	3b01      	subs	r3, #1
 8007ed0:	60a3      	str	r3, [r4, #8]
 8007ed2:	6923      	ldr	r3, [r4, #16]
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	6123      	str	r3, [r4, #16]
 8007ed8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007edc:	3b01      	subs	r3, #1
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	f8c9 3004 	str.w	r3, [r9, #4]
 8007ee4:	f340 8083 	ble.w	8007fee <_scanf_float+0x27e>
 8007ee8:	f8d9 3000 	ldr.w	r3, [r9]
 8007eec:	3301      	adds	r3, #1
 8007eee:	f8c9 3000 	str.w	r3, [r9]
 8007ef2:	e763      	b.n	8007dbc <_scanf_float+0x4c>
 8007ef4:	eb1a 0105 	adds.w	r1, sl, r5
 8007ef8:	f47f af6e 	bne.w	8007dd8 <_scanf_float+0x68>
 8007efc:	460d      	mov	r5, r1
 8007efe:	468a      	mov	sl, r1
 8007f00:	6822      	ldr	r2, [r4, #0]
 8007f02:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007f06:	6022      	str	r2, [r4, #0]
 8007f08:	f806 3b01 	strb.w	r3, [r6], #1
 8007f0c:	e7de      	b.n	8007ecc <_scanf_float+0x15c>
 8007f0e:	6822      	ldr	r2, [r4, #0]
 8007f10:	0610      	lsls	r0, r2, #24
 8007f12:	f57f af61 	bpl.w	8007dd8 <_scanf_float+0x68>
 8007f16:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007f1a:	6022      	str	r2, [r4, #0]
 8007f1c:	e7f4      	b.n	8007f08 <_scanf_float+0x198>
 8007f1e:	f1ba 0f00 	cmp.w	sl, #0
 8007f22:	d10c      	bne.n	8007f3e <_scanf_float+0x1ce>
 8007f24:	b977      	cbnz	r7, 8007f44 <_scanf_float+0x1d4>
 8007f26:	6822      	ldr	r2, [r4, #0]
 8007f28:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007f2c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007f30:	d108      	bne.n	8007f44 <_scanf_float+0x1d4>
 8007f32:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007f36:	f04f 0a01 	mov.w	sl, #1
 8007f3a:	6022      	str	r2, [r4, #0]
 8007f3c:	e7e4      	b.n	8007f08 <_scanf_float+0x198>
 8007f3e:	f1ba 0f02 	cmp.w	sl, #2
 8007f42:	d051      	beq.n	8007fe8 <_scanf_float+0x278>
 8007f44:	2d01      	cmp	r5, #1
 8007f46:	d002      	beq.n	8007f4e <_scanf_float+0x1de>
 8007f48:	2d04      	cmp	r5, #4
 8007f4a:	f47f af45 	bne.w	8007dd8 <_scanf_float+0x68>
 8007f4e:	3501      	adds	r5, #1
 8007f50:	b2ed      	uxtb	r5, r5
 8007f52:	e7d9      	b.n	8007f08 <_scanf_float+0x198>
 8007f54:	f1ba 0f01 	cmp.w	sl, #1
 8007f58:	f47f af3e 	bne.w	8007dd8 <_scanf_float+0x68>
 8007f5c:	f04f 0a02 	mov.w	sl, #2
 8007f60:	e7d2      	b.n	8007f08 <_scanf_float+0x198>
 8007f62:	b975      	cbnz	r5, 8007f82 <_scanf_float+0x212>
 8007f64:	2f00      	cmp	r7, #0
 8007f66:	f47f af38 	bne.w	8007dda <_scanf_float+0x6a>
 8007f6a:	6822      	ldr	r2, [r4, #0]
 8007f6c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007f70:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007f74:	f040 80ff 	bne.w	8008176 <_scanf_float+0x406>
 8007f78:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007f7c:	2501      	movs	r5, #1
 8007f7e:	6022      	str	r2, [r4, #0]
 8007f80:	e7c2      	b.n	8007f08 <_scanf_float+0x198>
 8007f82:	2d03      	cmp	r5, #3
 8007f84:	d0e3      	beq.n	8007f4e <_scanf_float+0x1de>
 8007f86:	2d05      	cmp	r5, #5
 8007f88:	e7df      	b.n	8007f4a <_scanf_float+0x1da>
 8007f8a:	2d02      	cmp	r5, #2
 8007f8c:	f47f af24 	bne.w	8007dd8 <_scanf_float+0x68>
 8007f90:	2503      	movs	r5, #3
 8007f92:	e7b9      	b.n	8007f08 <_scanf_float+0x198>
 8007f94:	2d06      	cmp	r5, #6
 8007f96:	f47f af1f 	bne.w	8007dd8 <_scanf_float+0x68>
 8007f9a:	2507      	movs	r5, #7
 8007f9c:	e7b4      	b.n	8007f08 <_scanf_float+0x198>
 8007f9e:	6822      	ldr	r2, [r4, #0]
 8007fa0:	0591      	lsls	r1, r2, #22
 8007fa2:	f57f af19 	bpl.w	8007dd8 <_scanf_float+0x68>
 8007fa6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007faa:	6022      	str	r2, [r4, #0]
 8007fac:	9702      	str	r7, [sp, #8]
 8007fae:	e7ab      	b.n	8007f08 <_scanf_float+0x198>
 8007fb0:	6822      	ldr	r2, [r4, #0]
 8007fb2:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007fb6:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007fba:	d005      	beq.n	8007fc8 <_scanf_float+0x258>
 8007fbc:	0550      	lsls	r0, r2, #21
 8007fbe:	f57f af0b 	bpl.w	8007dd8 <_scanf_float+0x68>
 8007fc2:	2f00      	cmp	r7, #0
 8007fc4:	f000 80d7 	beq.w	8008176 <_scanf_float+0x406>
 8007fc8:	0591      	lsls	r1, r2, #22
 8007fca:	bf58      	it	pl
 8007fcc:	9902      	ldrpl	r1, [sp, #8]
 8007fce:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007fd2:	bf58      	it	pl
 8007fd4:	1a79      	subpl	r1, r7, r1
 8007fd6:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007fda:	f04f 0700 	mov.w	r7, #0
 8007fde:	bf58      	it	pl
 8007fe0:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007fe4:	6022      	str	r2, [r4, #0]
 8007fe6:	e78f      	b.n	8007f08 <_scanf_float+0x198>
 8007fe8:	f04f 0a03 	mov.w	sl, #3
 8007fec:	e78c      	b.n	8007f08 <_scanf_float+0x198>
 8007fee:	4649      	mov	r1, r9
 8007ff0:	4640      	mov	r0, r8
 8007ff2:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007ff6:	4798      	blx	r3
 8007ff8:	2800      	cmp	r0, #0
 8007ffa:	f43f aedf 	beq.w	8007dbc <_scanf_float+0x4c>
 8007ffe:	e6eb      	b.n	8007dd8 <_scanf_float+0x68>
 8008000:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008004:	464a      	mov	r2, r9
 8008006:	4640      	mov	r0, r8
 8008008:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800800c:	4798      	blx	r3
 800800e:	6923      	ldr	r3, [r4, #16]
 8008010:	3b01      	subs	r3, #1
 8008012:	6123      	str	r3, [r4, #16]
 8008014:	e6eb      	b.n	8007dee <_scanf_float+0x7e>
 8008016:	1e6b      	subs	r3, r5, #1
 8008018:	2b06      	cmp	r3, #6
 800801a:	d824      	bhi.n	8008066 <_scanf_float+0x2f6>
 800801c:	2d02      	cmp	r5, #2
 800801e:	d836      	bhi.n	800808e <_scanf_float+0x31e>
 8008020:	9b01      	ldr	r3, [sp, #4]
 8008022:	429e      	cmp	r6, r3
 8008024:	f67f aee7 	bls.w	8007df6 <_scanf_float+0x86>
 8008028:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800802c:	464a      	mov	r2, r9
 800802e:	4640      	mov	r0, r8
 8008030:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008034:	4798      	blx	r3
 8008036:	6923      	ldr	r3, [r4, #16]
 8008038:	3b01      	subs	r3, #1
 800803a:	6123      	str	r3, [r4, #16]
 800803c:	e7f0      	b.n	8008020 <_scanf_float+0x2b0>
 800803e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008042:	464a      	mov	r2, r9
 8008044:	4640      	mov	r0, r8
 8008046:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800804a:	4798      	blx	r3
 800804c:	6923      	ldr	r3, [r4, #16]
 800804e:	3b01      	subs	r3, #1
 8008050:	6123      	str	r3, [r4, #16]
 8008052:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008056:	fa5f fa8a 	uxtb.w	sl, sl
 800805a:	f1ba 0f02 	cmp.w	sl, #2
 800805e:	d1ee      	bne.n	800803e <_scanf_float+0x2ce>
 8008060:	3d03      	subs	r5, #3
 8008062:	b2ed      	uxtb	r5, r5
 8008064:	1b76      	subs	r6, r6, r5
 8008066:	6823      	ldr	r3, [r4, #0]
 8008068:	05da      	lsls	r2, r3, #23
 800806a:	d530      	bpl.n	80080ce <_scanf_float+0x35e>
 800806c:	055b      	lsls	r3, r3, #21
 800806e:	d511      	bpl.n	8008094 <_scanf_float+0x324>
 8008070:	9b01      	ldr	r3, [sp, #4]
 8008072:	429e      	cmp	r6, r3
 8008074:	f67f aebf 	bls.w	8007df6 <_scanf_float+0x86>
 8008078:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800807c:	464a      	mov	r2, r9
 800807e:	4640      	mov	r0, r8
 8008080:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008084:	4798      	blx	r3
 8008086:	6923      	ldr	r3, [r4, #16]
 8008088:	3b01      	subs	r3, #1
 800808a:	6123      	str	r3, [r4, #16]
 800808c:	e7f0      	b.n	8008070 <_scanf_float+0x300>
 800808e:	46aa      	mov	sl, r5
 8008090:	46b3      	mov	fp, r6
 8008092:	e7de      	b.n	8008052 <_scanf_float+0x2e2>
 8008094:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008098:	6923      	ldr	r3, [r4, #16]
 800809a:	2965      	cmp	r1, #101	@ 0x65
 800809c:	f103 33ff 	add.w	r3, r3, #4294967295
 80080a0:	f106 35ff 	add.w	r5, r6, #4294967295
 80080a4:	6123      	str	r3, [r4, #16]
 80080a6:	d00c      	beq.n	80080c2 <_scanf_float+0x352>
 80080a8:	2945      	cmp	r1, #69	@ 0x45
 80080aa:	d00a      	beq.n	80080c2 <_scanf_float+0x352>
 80080ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80080b0:	464a      	mov	r2, r9
 80080b2:	4640      	mov	r0, r8
 80080b4:	4798      	blx	r3
 80080b6:	6923      	ldr	r3, [r4, #16]
 80080b8:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80080bc:	3b01      	subs	r3, #1
 80080be:	1eb5      	subs	r5, r6, #2
 80080c0:	6123      	str	r3, [r4, #16]
 80080c2:	464a      	mov	r2, r9
 80080c4:	4640      	mov	r0, r8
 80080c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80080ca:	4798      	blx	r3
 80080cc:	462e      	mov	r6, r5
 80080ce:	6822      	ldr	r2, [r4, #0]
 80080d0:	f012 0210 	ands.w	r2, r2, #16
 80080d4:	d001      	beq.n	80080da <_scanf_float+0x36a>
 80080d6:	2000      	movs	r0, #0
 80080d8:	e68e      	b.n	8007df8 <_scanf_float+0x88>
 80080da:	7032      	strb	r2, [r6, #0]
 80080dc:	6823      	ldr	r3, [r4, #0]
 80080de:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80080e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080e6:	d125      	bne.n	8008134 <_scanf_float+0x3c4>
 80080e8:	9b02      	ldr	r3, [sp, #8]
 80080ea:	429f      	cmp	r7, r3
 80080ec:	d00a      	beq.n	8008104 <_scanf_float+0x394>
 80080ee:	1bda      	subs	r2, r3, r7
 80080f0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80080f4:	429e      	cmp	r6, r3
 80080f6:	bf28      	it	cs
 80080f8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80080fc:	4630      	mov	r0, r6
 80080fe:	491f      	ldr	r1, [pc, #124]	@ (800817c <_scanf_float+0x40c>)
 8008100:	f000 f972 	bl	80083e8 <siprintf>
 8008104:	2200      	movs	r2, #0
 8008106:	4640      	mov	r0, r8
 8008108:	9901      	ldr	r1, [sp, #4]
 800810a:	f002 fced 	bl	800aae8 <_strtod_r>
 800810e:	9b03      	ldr	r3, [sp, #12]
 8008110:	6825      	ldr	r5, [r4, #0]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f015 0f02 	tst.w	r5, #2
 8008118:	4606      	mov	r6, r0
 800811a:	460f      	mov	r7, r1
 800811c:	f103 0204 	add.w	r2, r3, #4
 8008120:	d015      	beq.n	800814e <_scanf_float+0x3de>
 8008122:	9903      	ldr	r1, [sp, #12]
 8008124:	600a      	str	r2, [r1, #0]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	e9c3 6700 	strd	r6, r7, [r3]
 800812c:	68e3      	ldr	r3, [r4, #12]
 800812e:	3301      	adds	r3, #1
 8008130:	60e3      	str	r3, [r4, #12]
 8008132:	e7d0      	b.n	80080d6 <_scanf_float+0x366>
 8008134:	9b04      	ldr	r3, [sp, #16]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d0e4      	beq.n	8008104 <_scanf_float+0x394>
 800813a:	9905      	ldr	r1, [sp, #20]
 800813c:	230a      	movs	r3, #10
 800813e:	4640      	mov	r0, r8
 8008140:	3101      	adds	r1, #1
 8008142:	f002 fd51 	bl	800abe8 <_strtol_r>
 8008146:	9b04      	ldr	r3, [sp, #16]
 8008148:	9e05      	ldr	r6, [sp, #20]
 800814a:	1ac2      	subs	r2, r0, r3
 800814c:	e7d0      	b.n	80080f0 <_scanf_float+0x380>
 800814e:	076d      	lsls	r5, r5, #29
 8008150:	d4e7      	bmi.n	8008122 <_scanf_float+0x3b2>
 8008152:	9d03      	ldr	r5, [sp, #12]
 8008154:	602a      	str	r2, [r5, #0]
 8008156:	681d      	ldr	r5, [r3, #0]
 8008158:	4602      	mov	r2, r0
 800815a:	460b      	mov	r3, r1
 800815c:	f7f8 fc78 	bl	8000a50 <__aeabi_dcmpun>
 8008160:	b120      	cbz	r0, 800816c <_scanf_float+0x3fc>
 8008162:	4807      	ldr	r0, [pc, #28]	@ (8008180 <_scanf_float+0x410>)
 8008164:	f000 fac8 	bl	80086f8 <nanf>
 8008168:	6028      	str	r0, [r5, #0]
 800816a:	e7df      	b.n	800812c <_scanf_float+0x3bc>
 800816c:	4630      	mov	r0, r6
 800816e:	4639      	mov	r1, r7
 8008170:	f7f8 fccc 	bl	8000b0c <__aeabi_d2f>
 8008174:	e7f8      	b.n	8008168 <_scanf_float+0x3f8>
 8008176:	2700      	movs	r7, #0
 8008178:	e633      	b.n	8007de2 <_scanf_float+0x72>
 800817a:	bf00      	nop
 800817c:	0801772c 	.word	0x0801772c
 8008180:	0801786d 	.word	0x0801786d

08008184 <std>:
 8008184:	2300      	movs	r3, #0
 8008186:	b510      	push	{r4, lr}
 8008188:	4604      	mov	r4, r0
 800818a:	e9c0 3300 	strd	r3, r3, [r0]
 800818e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008192:	6083      	str	r3, [r0, #8]
 8008194:	8181      	strh	r1, [r0, #12]
 8008196:	6643      	str	r3, [r0, #100]	@ 0x64
 8008198:	81c2      	strh	r2, [r0, #14]
 800819a:	6183      	str	r3, [r0, #24]
 800819c:	4619      	mov	r1, r3
 800819e:	2208      	movs	r2, #8
 80081a0:	305c      	adds	r0, #92	@ 0x5c
 80081a2:	f000 fa1b 	bl	80085dc <memset>
 80081a6:	4b0d      	ldr	r3, [pc, #52]	@ (80081dc <std+0x58>)
 80081a8:	6224      	str	r4, [r4, #32]
 80081aa:	6263      	str	r3, [r4, #36]	@ 0x24
 80081ac:	4b0c      	ldr	r3, [pc, #48]	@ (80081e0 <std+0x5c>)
 80081ae:	62a3      	str	r3, [r4, #40]	@ 0x28
 80081b0:	4b0c      	ldr	r3, [pc, #48]	@ (80081e4 <std+0x60>)
 80081b2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80081b4:	4b0c      	ldr	r3, [pc, #48]	@ (80081e8 <std+0x64>)
 80081b6:	6323      	str	r3, [r4, #48]	@ 0x30
 80081b8:	4b0c      	ldr	r3, [pc, #48]	@ (80081ec <std+0x68>)
 80081ba:	429c      	cmp	r4, r3
 80081bc:	d006      	beq.n	80081cc <std+0x48>
 80081be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80081c2:	4294      	cmp	r4, r2
 80081c4:	d002      	beq.n	80081cc <std+0x48>
 80081c6:	33d0      	adds	r3, #208	@ 0xd0
 80081c8:	429c      	cmp	r4, r3
 80081ca:	d105      	bne.n	80081d8 <std+0x54>
 80081cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80081d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081d4:	f000 ba7e 	b.w	80086d4 <__retarget_lock_init_recursive>
 80081d8:	bd10      	pop	{r4, pc}
 80081da:	bf00      	nop
 80081dc:	0800842d 	.word	0x0800842d
 80081e0:	0800844f 	.word	0x0800844f
 80081e4:	08008487 	.word	0x08008487
 80081e8:	080084ab 	.word	0x080084ab
 80081ec:	2000103c 	.word	0x2000103c

080081f0 <stdio_exit_handler>:
 80081f0:	4a02      	ldr	r2, [pc, #8]	@ (80081fc <stdio_exit_handler+0xc>)
 80081f2:	4903      	ldr	r1, [pc, #12]	@ (8008200 <stdio_exit_handler+0x10>)
 80081f4:	4803      	ldr	r0, [pc, #12]	@ (8008204 <stdio_exit_handler+0x14>)
 80081f6:	f000 b869 	b.w	80082cc <_fwalk_sglue>
 80081fa:	bf00      	nop
 80081fc:	20000028 	.word	0x20000028
 8008200:	0800b21d 	.word	0x0800b21d
 8008204:	20000038 	.word	0x20000038

08008208 <cleanup_stdio>:
 8008208:	6841      	ldr	r1, [r0, #4]
 800820a:	4b0c      	ldr	r3, [pc, #48]	@ (800823c <cleanup_stdio+0x34>)
 800820c:	b510      	push	{r4, lr}
 800820e:	4299      	cmp	r1, r3
 8008210:	4604      	mov	r4, r0
 8008212:	d001      	beq.n	8008218 <cleanup_stdio+0x10>
 8008214:	f003 f802 	bl	800b21c <_fflush_r>
 8008218:	68a1      	ldr	r1, [r4, #8]
 800821a:	4b09      	ldr	r3, [pc, #36]	@ (8008240 <cleanup_stdio+0x38>)
 800821c:	4299      	cmp	r1, r3
 800821e:	d002      	beq.n	8008226 <cleanup_stdio+0x1e>
 8008220:	4620      	mov	r0, r4
 8008222:	f002 fffb 	bl	800b21c <_fflush_r>
 8008226:	68e1      	ldr	r1, [r4, #12]
 8008228:	4b06      	ldr	r3, [pc, #24]	@ (8008244 <cleanup_stdio+0x3c>)
 800822a:	4299      	cmp	r1, r3
 800822c:	d004      	beq.n	8008238 <cleanup_stdio+0x30>
 800822e:	4620      	mov	r0, r4
 8008230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008234:	f002 bff2 	b.w	800b21c <_fflush_r>
 8008238:	bd10      	pop	{r4, pc}
 800823a:	bf00      	nop
 800823c:	2000103c 	.word	0x2000103c
 8008240:	200010a4 	.word	0x200010a4
 8008244:	2000110c 	.word	0x2000110c

08008248 <global_stdio_init.part.0>:
 8008248:	b510      	push	{r4, lr}
 800824a:	4b0b      	ldr	r3, [pc, #44]	@ (8008278 <global_stdio_init.part.0+0x30>)
 800824c:	4c0b      	ldr	r4, [pc, #44]	@ (800827c <global_stdio_init.part.0+0x34>)
 800824e:	4a0c      	ldr	r2, [pc, #48]	@ (8008280 <global_stdio_init.part.0+0x38>)
 8008250:	4620      	mov	r0, r4
 8008252:	601a      	str	r2, [r3, #0]
 8008254:	2104      	movs	r1, #4
 8008256:	2200      	movs	r2, #0
 8008258:	f7ff ff94 	bl	8008184 <std>
 800825c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008260:	2201      	movs	r2, #1
 8008262:	2109      	movs	r1, #9
 8008264:	f7ff ff8e 	bl	8008184 <std>
 8008268:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800826c:	2202      	movs	r2, #2
 800826e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008272:	2112      	movs	r1, #18
 8008274:	f7ff bf86 	b.w	8008184 <std>
 8008278:	20001174 	.word	0x20001174
 800827c:	2000103c 	.word	0x2000103c
 8008280:	080081f1 	.word	0x080081f1

08008284 <__sfp_lock_acquire>:
 8008284:	4801      	ldr	r0, [pc, #4]	@ (800828c <__sfp_lock_acquire+0x8>)
 8008286:	f000 ba26 	b.w	80086d6 <__retarget_lock_acquire_recursive>
 800828a:	bf00      	nop
 800828c:	2000117d 	.word	0x2000117d

08008290 <__sfp_lock_release>:
 8008290:	4801      	ldr	r0, [pc, #4]	@ (8008298 <__sfp_lock_release+0x8>)
 8008292:	f000 ba21 	b.w	80086d8 <__retarget_lock_release_recursive>
 8008296:	bf00      	nop
 8008298:	2000117d 	.word	0x2000117d

0800829c <__sinit>:
 800829c:	b510      	push	{r4, lr}
 800829e:	4604      	mov	r4, r0
 80082a0:	f7ff fff0 	bl	8008284 <__sfp_lock_acquire>
 80082a4:	6a23      	ldr	r3, [r4, #32]
 80082a6:	b11b      	cbz	r3, 80082b0 <__sinit+0x14>
 80082a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082ac:	f7ff bff0 	b.w	8008290 <__sfp_lock_release>
 80082b0:	4b04      	ldr	r3, [pc, #16]	@ (80082c4 <__sinit+0x28>)
 80082b2:	6223      	str	r3, [r4, #32]
 80082b4:	4b04      	ldr	r3, [pc, #16]	@ (80082c8 <__sinit+0x2c>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d1f5      	bne.n	80082a8 <__sinit+0xc>
 80082bc:	f7ff ffc4 	bl	8008248 <global_stdio_init.part.0>
 80082c0:	e7f2      	b.n	80082a8 <__sinit+0xc>
 80082c2:	bf00      	nop
 80082c4:	08008209 	.word	0x08008209
 80082c8:	20001174 	.word	0x20001174

080082cc <_fwalk_sglue>:
 80082cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082d0:	4607      	mov	r7, r0
 80082d2:	4688      	mov	r8, r1
 80082d4:	4614      	mov	r4, r2
 80082d6:	2600      	movs	r6, #0
 80082d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80082dc:	f1b9 0901 	subs.w	r9, r9, #1
 80082e0:	d505      	bpl.n	80082ee <_fwalk_sglue+0x22>
 80082e2:	6824      	ldr	r4, [r4, #0]
 80082e4:	2c00      	cmp	r4, #0
 80082e6:	d1f7      	bne.n	80082d8 <_fwalk_sglue+0xc>
 80082e8:	4630      	mov	r0, r6
 80082ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082ee:	89ab      	ldrh	r3, [r5, #12]
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d907      	bls.n	8008304 <_fwalk_sglue+0x38>
 80082f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80082f8:	3301      	adds	r3, #1
 80082fa:	d003      	beq.n	8008304 <_fwalk_sglue+0x38>
 80082fc:	4629      	mov	r1, r5
 80082fe:	4638      	mov	r0, r7
 8008300:	47c0      	blx	r8
 8008302:	4306      	orrs	r6, r0
 8008304:	3568      	adds	r5, #104	@ 0x68
 8008306:	e7e9      	b.n	80082dc <_fwalk_sglue+0x10>

08008308 <iprintf>:
 8008308:	b40f      	push	{r0, r1, r2, r3}
 800830a:	b507      	push	{r0, r1, r2, lr}
 800830c:	4906      	ldr	r1, [pc, #24]	@ (8008328 <iprintf+0x20>)
 800830e:	ab04      	add	r3, sp, #16
 8008310:	6808      	ldr	r0, [r1, #0]
 8008312:	f853 2b04 	ldr.w	r2, [r3], #4
 8008316:	6881      	ldr	r1, [r0, #8]
 8008318:	9301      	str	r3, [sp, #4]
 800831a:	f002 fde7 	bl	800aeec <_vfiprintf_r>
 800831e:	b003      	add	sp, #12
 8008320:	f85d eb04 	ldr.w	lr, [sp], #4
 8008324:	b004      	add	sp, #16
 8008326:	4770      	bx	lr
 8008328:	20000034 	.word	0x20000034

0800832c <_puts_r>:
 800832c:	6a03      	ldr	r3, [r0, #32]
 800832e:	b570      	push	{r4, r5, r6, lr}
 8008330:	4605      	mov	r5, r0
 8008332:	460e      	mov	r6, r1
 8008334:	6884      	ldr	r4, [r0, #8]
 8008336:	b90b      	cbnz	r3, 800833c <_puts_r+0x10>
 8008338:	f7ff ffb0 	bl	800829c <__sinit>
 800833c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800833e:	07db      	lsls	r3, r3, #31
 8008340:	d405      	bmi.n	800834e <_puts_r+0x22>
 8008342:	89a3      	ldrh	r3, [r4, #12]
 8008344:	0598      	lsls	r0, r3, #22
 8008346:	d402      	bmi.n	800834e <_puts_r+0x22>
 8008348:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800834a:	f000 f9c4 	bl	80086d6 <__retarget_lock_acquire_recursive>
 800834e:	89a3      	ldrh	r3, [r4, #12]
 8008350:	0719      	lsls	r1, r3, #28
 8008352:	d502      	bpl.n	800835a <_puts_r+0x2e>
 8008354:	6923      	ldr	r3, [r4, #16]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d135      	bne.n	80083c6 <_puts_r+0x9a>
 800835a:	4621      	mov	r1, r4
 800835c:	4628      	mov	r0, r5
 800835e:	f000 f8e7 	bl	8008530 <__swsetup_r>
 8008362:	b380      	cbz	r0, 80083c6 <_puts_r+0x9a>
 8008364:	f04f 35ff 	mov.w	r5, #4294967295
 8008368:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800836a:	07da      	lsls	r2, r3, #31
 800836c:	d405      	bmi.n	800837a <_puts_r+0x4e>
 800836e:	89a3      	ldrh	r3, [r4, #12]
 8008370:	059b      	lsls	r3, r3, #22
 8008372:	d402      	bmi.n	800837a <_puts_r+0x4e>
 8008374:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008376:	f000 f9af 	bl	80086d8 <__retarget_lock_release_recursive>
 800837a:	4628      	mov	r0, r5
 800837c:	bd70      	pop	{r4, r5, r6, pc}
 800837e:	2b00      	cmp	r3, #0
 8008380:	da04      	bge.n	800838c <_puts_r+0x60>
 8008382:	69a2      	ldr	r2, [r4, #24]
 8008384:	429a      	cmp	r2, r3
 8008386:	dc17      	bgt.n	80083b8 <_puts_r+0x8c>
 8008388:	290a      	cmp	r1, #10
 800838a:	d015      	beq.n	80083b8 <_puts_r+0x8c>
 800838c:	6823      	ldr	r3, [r4, #0]
 800838e:	1c5a      	adds	r2, r3, #1
 8008390:	6022      	str	r2, [r4, #0]
 8008392:	7019      	strb	r1, [r3, #0]
 8008394:	68a3      	ldr	r3, [r4, #8]
 8008396:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800839a:	3b01      	subs	r3, #1
 800839c:	60a3      	str	r3, [r4, #8]
 800839e:	2900      	cmp	r1, #0
 80083a0:	d1ed      	bne.n	800837e <_puts_r+0x52>
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	da11      	bge.n	80083ca <_puts_r+0x9e>
 80083a6:	4622      	mov	r2, r4
 80083a8:	210a      	movs	r1, #10
 80083aa:	4628      	mov	r0, r5
 80083ac:	f000 f881 	bl	80084b2 <__swbuf_r>
 80083b0:	3001      	adds	r0, #1
 80083b2:	d0d7      	beq.n	8008364 <_puts_r+0x38>
 80083b4:	250a      	movs	r5, #10
 80083b6:	e7d7      	b.n	8008368 <_puts_r+0x3c>
 80083b8:	4622      	mov	r2, r4
 80083ba:	4628      	mov	r0, r5
 80083bc:	f000 f879 	bl	80084b2 <__swbuf_r>
 80083c0:	3001      	adds	r0, #1
 80083c2:	d1e7      	bne.n	8008394 <_puts_r+0x68>
 80083c4:	e7ce      	b.n	8008364 <_puts_r+0x38>
 80083c6:	3e01      	subs	r6, #1
 80083c8:	e7e4      	b.n	8008394 <_puts_r+0x68>
 80083ca:	6823      	ldr	r3, [r4, #0]
 80083cc:	1c5a      	adds	r2, r3, #1
 80083ce:	6022      	str	r2, [r4, #0]
 80083d0:	220a      	movs	r2, #10
 80083d2:	701a      	strb	r2, [r3, #0]
 80083d4:	e7ee      	b.n	80083b4 <_puts_r+0x88>
	...

080083d8 <puts>:
 80083d8:	4b02      	ldr	r3, [pc, #8]	@ (80083e4 <puts+0xc>)
 80083da:	4601      	mov	r1, r0
 80083dc:	6818      	ldr	r0, [r3, #0]
 80083de:	f7ff bfa5 	b.w	800832c <_puts_r>
 80083e2:	bf00      	nop
 80083e4:	20000034 	.word	0x20000034

080083e8 <siprintf>:
 80083e8:	b40e      	push	{r1, r2, r3}
 80083ea:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80083ee:	b510      	push	{r4, lr}
 80083f0:	2400      	movs	r4, #0
 80083f2:	b09d      	sub	sp, #116	@ 0x74
 80083f4:	ab1f      	add	r3, sp, #124	@ 0x7c
 80083f6:	9002      	str	r0, [sp, #8]
 80083f8:	9006      	str	r0, [sp, #24]
 80083fa:	9107      	str	r1, [sp, #28]
 80083fc:	9104      	str	r1, [sp, #16]
 80083fe:	4809      	ldr	r0, [pc, #36]	@ (8008424 <siprintf+0x3c>)
 8008400:	4909      	ldr	r1, [pc, #36]	@ (8008428 <siprintf+0x40>)
 8008402:	f853 2b04 	ldr.w	r2, [r3], #4
 8008406:	9105      	str	r1, [sp, #20]
 8008408:	6800      	ldr	r0, [r0, #0]
 800840a:	a902      	add	r1, sp, #8
 800840c:	9301      	str	r3, [sp, #4]
 800840e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008410:	f002 fc48 	bl	800aca4 <_svfiprintf_r>
 8008414:	9b02      	ldr	r3, [sp, #8]
 8008416:	701c      	strb	r4, [r3, #0]
 8008418:	b01d      	add	sp, #116	@ 0x74
 800841a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800841e:	b003      	add	sp, #12
 8008420:	4770      	bx	lr
 8008422:	bf00      	nop
 8008424:	20000034 	.word	0x20000034
 8008428:	ffff0208 	.word	0xffff0208

0800842c <__sread>:
 800842c:	b510      	push	{r4, lr}
 800842e:	460c      	mov	r4, r1
 8008430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008434:	f000 f900 	bl	8008638 <_read_r>
 8008438:	2800      	cmp	r0, #0
 800843a:	bfab      	itete	ge
 800843c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800843e:	89a3      	ldrhlt	r3, [r4, #12]
 8008440:	181b      	addge	r3, r3, r0
 8008442:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008446:	bfac      	ite	ge
 8008448:	6563      	strge	r3, [r4, #84]	@ 0x54
 800844a:	81a3      	strhlt	r3, [r4, #12]
 800844c:	bd10      	pop	{r4, pc}

0800844e <__swrite>:
 800844e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008452:	461f      	mov	r7, r3
 8008454:	898b      	ldrh	r3, [r1, #12]
 8008456:	4605      	mov	r5, r0
 8008458:	05db      	lsls	r3, r3, #23
 800845a:	460c      	mov	r4, r1
 800845c:	4616      	mov	r6, r2
 800845e:	d505      	bpl.n	800846c <__swrite+0x1e>
 8008460:	2302      	movs	r3, #2
 8008462:	2200      	movs	r2, #0
 8008464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008468:	f000 f8d4 	bl	8008614 <_lseek_r>
 800846c:	89a3      	ldrh	r3, [r4, #12]
 800846e:	4632      	mov	r2, r6
 8008470:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008474:	81a3      	strh	r3, [r4, #12]
 8008476:	4628      	mov	r0, r5
 8008478:	463b      	mov	r3, r7
 800847a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800847e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008482:	f000 b8eb 	b.w	800865c <_write_r>

08008486 <__sseek>:
 8008486:	b510      	push	{r4, lr}
 8008488:	460c      	mov	r4, r1
 800848a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800848e:	f000 f8c1 	bl	8008614 <_lseek_r>
 8008492:	1c43      	adds	r3, r0, #1
 8008494:	89a3      	ldrh	r3, [r4, #12]
 8008496:	bf15      	itete	ne
 8008498:	6560      	strne	r0, [r4, #84]	@ 0x54
 800849a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800849e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80084a2:	81a3      	strheq	r3, [r4, #12]
 80084a4:	bf18      	it	ne
 80084a6:	81a3      	strhne	r3, [r4, #12]
 80084a8:	bd10      	pop	{r4, pc}

080084aa <__sclose>:
 80084aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084ae:	f000 b8a1 	b.w	80085f4 <_close_r>

080084b2 <__swbuf_r>:
 80084b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084b4:	460e      	mov	r6, r1
 80084b6:	4614      	mov	r4, r2
 80084b8:	4605      	mov	r5, r0
 80084ba:	b118      	cbz	r0, 80084c4 <__swbuf_r+0x12>
 80084bc:	6a03      	ldr	r3, [r0, #32]
 80084be:	b90b      	cbnz	r3, 80084c4 <__swbuf_r+0x12>
 80084c0:	f7ff feec 	bl	800829c <__sinit>
 80084c4:	69a3      	ldr	r3, [r4, #24]
 80084c6:	60a3      	str	r3, [r4, #8]
 80084c8:	89a3      	ldrh	r3, [r4, #12]
 80084ca:	071a      	lsls	r2, r3, #28
 80084cc:	d501      	bpl.n	80084d2 <__swbuf_r+0x20>
 80084ce:	6923      	ldr	r3, [r4, #16]
 80084d0:	b943      	cbnz	r3, 80084e4 <__swbuf_r+0x32>
 80084d2:	4621      	mov	r1, r4
 80084d4:	4628      	mov	r0, r5
 80084d6:	f000 f82b 	bl	8008530 <__swsetup_r>
 80084da:	b118      	cbz	r0, 80084e4 <__swbuf_r+0x32>
 80084dc:	f04f 37ff 	mov.w	r7, #4294967295
 80084e0:	4638      	mov	r0, r7
 80084e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084e4:	6823      	ldr	r3, [r4, #0]
 80084e6:	6922      	ldr	r2, [r4, #16]
 80084e8:	b2f6      	uxtb	r6, r6
 80084ea:	1a98      	subs	r0, r3, r2
 80084ec:	6963      	ldr	r3, [r4, #20]
 80084ee:	4637      	mov	r7, r6
 80084f0:	4283      	cmp	r3, r0
 80084f2:	dc05      	bgt.n	8008500 <__swbuf_r+0x4e>
 80084f4:	4621      	mov	r1, r4
 80084f6:	4628      	mov	r0, r5
 80084f8:	f002 fe90 	bl	800b21c <_fflush_r>
 80084fc:	2800      	cmp	r0, #0
 80084fe:	d1ed      	bne.n	80084dc <__swbuf_r+0x2a>
 8008500:	68a3      	ldr	r3, [r4, #8]
 8008502:	3b01      	subs	r3, #1
 8008504:	60a3      	str	r3, [r4, #8]
 8008506:	6823      	ldr	r3, [r4, #0]
 8008508:	1c5a      	adds	r2, r3, #1
 800850a:	6022      	str	r2, [r4, #0]
 800850c:	701e      	strb	r6, [r3, #0]
 800850e:	6962      	ldr	r2, [r4, #20]
 8008510:	1c43      	adds	r3, r0, #1
 8008512:	429a      	cmp	r2, r3
 8008514:	d004      	beq.n	8008520 <__swbuf_r+0x6e>
 8008516:	89a3      	ldrh	r3, [r4, #12]
 8008518:	07db      	lsls	r3, r3, #31
 800851a:	d5e1      	bpl.n	80084e0 <__swbuf_r+0x2e>
 800851c:	2e0a      	cmp	r6, #10
 800851e:	d1df      	bne.n	80084e0 <__swbuf_r+0x2e>
 8008520:	4621      	mov	r1, r4
 8008522:	4628      	mov	r0, r5
 8008524:	f002 fe7a 	bl	800b21c <_fflush_r>
 8008528:	2800      	cmp	r0, #0
 800852a:	d0d9      	beq.n	80084e0 <__swbuf_r+0x2e>
 800852c:	e7d6      	b.n	80084dc <__swbuf_r+0x2a>
	...

08008530 <__swsetup_r>:
 8008530:	b538      	push	{r3, r4, r5, lr}
 8008532:	4b29      	ldr	r3, [pc, #164]	@ (80085d8 <__swsetup_r+0xa8>)
 8008534:	4605      	mov	r5, r0
 8008536:	6818      	ldr	r0, [r3, #0]
 8008538:	460c      	mov	r4, r1
 800853a:	b118      	cbz	r0, 8008544 <__swsetup_r+0x14>
 800853c:	6a03      	ldr	r3, [r0, #32]
 800853e:	b90b      	cbnz	r3, 8008544 <__swsetup_r+0x14>
 8008540:	f7ff feac 	bl	800829c <__sinit>
 8008544:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008548:	0719      	lsls	r1, r3, #28
 800854a:	d422      	bmi.n	8008592 <__swsetup_r+0x62>
 800854c:	06da      	lsls	r2, r3, #27
 800854e:	d407      	bmi.n	8008560 <__swsetup_r+0x30>
 8008550:	2209      	movs	r2, #9
 8008552:	602a      	str	r2, [r5, #0]
 8008554:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008558:	f04f 30ff 	mov.w	r0, #4294967295
 800855c:	81a3      	strh	r3, [r4, #12]
 800855e:	e033      	b.n	80085c8 <__swsetup_r+0x98>
 8008560:	0758      	lsls	r0, r3, #29
 8008562:	d512      	bpl.n	800858a <__swsetup_r+0x5a>
 8008564:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008566:	b141      	cbz	r1, 800857a <__swsetup_r+0x4a>
 8008568:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800856c:	4299      	cmp	r1, r3
 800856e:	d002      	beq.n	8008576 <__swsetup_r+0x46>
 8008570:	4628      	mov	r0, r5
 8008572:	f000 ff21 	bl	80093b8 <_free_r>
 8008576:	2300      	movs	r3, #0
 8008578:	6363      	str	r3, [r4, #52]	@ 0x34
 800857a:	89a3      	ldrh	r3, [r4, #12]
 800857c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008580:	81a3      	strh	r3, [r4, #12]
 8008582:	2300      	movs	r3, #0
 8008584:	6063      	str	r3, [r4, #4]
 8008586:	6923      	ldr	r3, [r4, #16]
 8008588:	6023      	str	r3, [r4, #0]
 800858a:	89a3      	ldrh	r3, [r4, #12]
 800858c:	f043 0308 	orr.w	r3, r3, #8
 8008590:	81a3      	strh	r3, [r4, #12]
 8008592:	6923      	ldr	r3, [r4, #16]
 8008594:	b94b      	cbnz	r3, 80085aa <__swsetup_r+0x7a>
 8008596:	89a3      	ldrh	r3, [r4, #12]
 8008598:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800859c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085a0:	d003      	beq.n	80085aa <__swsetup_r+0x7a>
 80085a2:	4621      	mov	r1, r4
 80085a4:	4628      	mov	r0, r5
 80085a6:	f002 fe86 	bl	800b2b6 <__smakebuf_r>
 80085aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085ae:	f013 0201 	ands.w	r2, r3, #1
 80085b2:	d00a      	beq.n	80085ca <__swsetup_r+0x9a>
 80085b4:	2200      	movs	r2, #0
 80085b6:	60a2      	str	r2, [r4, #8]
 80085b8:	6962      	ldr	r2, [r4, #20]
 80085ba:	4252      	negs	r2, r2
 80085bc:	61a2      	str	r2, [r4, #24]
 80085be:	6922      	ldr	r2, [r4, #16]
 80085c0:	b942      	cbnz	r2, 80085d4 <__swsetup_r+0xa4>
 80085c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80085c6:	d1c5      	bne.n	8008554 <__swsetup_r+0x24>
 80085c8:	bd38      	pop	{r3, r4, r5, pc}
 80085ca:	0799      	lsls	r1, r3, #30
 80085cc:	bf58      	it	pl
 80085ce:	6962      	ldrpl	r2, [r4, #20]
 80085d0:	60a2      	str	r2, [r4, #8]
 80085d2:	e7f4      	b.n	80085be <__swsetup_r+0x8e>
 80085d4:	2000      	movs	r0, #0
 80085d6:	e7f7      	b.n	80085c8 <__swsetup_r+0x98>
 80085d8:	20000034 	.word	0x20000034

080085dc <memset>:
 80085dc:	4603      	mov	r3, r0
 80085de:	4402      	add	r2, r0
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d100      	bne.n	80085e6 <memset+0xa>
 80085e4:	4770      	bx	lr
 80085e6:	f803 1b01 	strb.w	r1, [r3], #1
 80085ea:	e7f9      	b.n	80085e0 <memset+0x4>

080085ec <_localeconv_r>:
 80085ec:	4800      	ldr	r0, [pc, #0]	@ (80085f0 <_localeconv_r+0x4>)
 80085ee:	4770      	bx	lr
 80085f0:	20000174 	.word	0x20000174

080085f4 <_close_r>:
 80085f4:	b538      	push	{r3, r4, r5, lr}
 80085f6:	2300      	movs	r3, #0
 80085f8:	4d05      	ldr	r5, [pc, #20]	@ (8008610 <_close_r+0x1c>)
 80085fa:	4604      	mov	r4, r0
 80085fc:	4608      	mov	r0, r1
 80085fe:	602b      	str	r3, [r5, #0]
 8008600:	f7fa f867 	bl	80026d2 <_close>
 8008604:	1c43      	adds	r3, r0, #1
 8008606:	d102      	bne.n	800860e <_close_r+0x1a>
 8008608:	682b      	ldr	r3, [r5, #0]
 800860a:	b103      	cbz	r3, 800860e <_close_r+0x1a>
 800860c:	6023      	str	r3, [r4, #0]
 800860e:	bd38      	pop	{r3, r4, r5, pc}
 8008610:	20001178 	.word	0x20001178

08008614 <_lseek_r>:
 8008614:	b538      	push	{r3, r4, r5, lr}
 8008616:	4604      	mov	r4, r0
 8008618:	4608      	mov	r0, r1
 800861a:	4611      	mov	r1, r2
 800861c:	2200      	movs	r2, #0
 800861e:	4d05      	ldr	r5, [pc, #20]	@ (8008634 <_lseek_r+0x20>)
 8008620:	602a      	str	r2, [r5, #0]
 8008622:	461a      	mov	r2, r3
 8008624:	f7fa f879 	bl	800271a <_lseek>
 8008628:	1c43      	adds	r3, r0, #1
 800862a:	d102      	bne.n	8008632 <_lseek_r+0x1e>
 800862c:	682b      	ldr	r3, [r5, #0]
 800862e:	b103      	cbz	r3, 8008632 <_lseek_r+0x1e>
 8008630:	6023      	str	r3, [r4, #0]
 8008632:	bd38      	pop	{r3, r4, r5, pc}
 8008634:	20001178 	.word	0x20001178

08008638 <_read_r>:
 8008638:	b538      	push	{r3, r4, r5, lr}
 800863a:	4604      	mov	r4, r0
 800863c:	4608      	mov	r0, r1
 800863e:	4611      	mov	r1, r2
 8008640:	2200      	movs	r2, #0
 8008642:	4d05      	ldr	r5, [pc, #20]	@ (8008658 <_read_r+0x20>)
 8008644:	602a      	str	r2, [r5, #0]
 8008646:	461a      	mov	r2, r3
 8008648:	f7fa f80a 	bl	8002660 <_read>
 800864c:	1c43      	adds	r3, r0, #1
 800864e:	d102      	bne.n	8008656 <_read_r+0x1e>
 8008650:	682b      	ldr	r3, [r5, #0]
 8008652:	b103      	cbz	r3, 8008656 <_read_r+0x1e>
 8008654:	6023      	str	r3, [r4, #0]
 8008656:	bd38      	pop	{r3, r4, r5, pc}
 8008658:	20001178 	.word	0x20001178

0800865c <_write_r>:
 800865c:	b538      	push	{r3, r4, r5, lr}
 800865e:	4604      	mov	r4, r0
 8008660:	4608      	mov	r0, r1
 8008662:	4611      	mov	r1, r2
 8008664:	2200      	movs	r2, #0
 8008666:	4d05      	ldr	r5, [pc, #20]	@ (800867c <_write_r+0x20>)
 8008668:	602a      	str	r2, [r5, #0]
 800866a:	461a      	mov	r2, r3
 800866c:	f7fa f815 	bl	800269a <_write>
 8008670:	1c43      	adds	r3, r0, #1
 8008672:	d102      	bne.n	800867a <_write_r+0x1e>
 8008674:	682b      	ldr	r3, [r5, #0]
 8008676:	b103      	cbz	r3, 800867a <_write_r+0x1e>
 8008678:	6023      	str	r3, [r4, #0]
 800867a:	bd38      	pop	{r3, r4, r5, pc}
 800867c:	20001178 	.word	0x20001178

08008680 <__errno>:
 8008680:	4b01      	ldr	r3, [pc, #4]	@ (8008688 <__errno+0x8>)
 8008682:	6818      	ldr	r0, [r3, #0]
 8008684:	4770      	bx	lr
 8008686:	bf00      	nop
 8008688:	20000034 	.word	0x20000034

0800868c <__libc_init_array>:
 800868c:	b570      	push	{r4, r5, r6, lr}
 800868e:	2600      	movs	r6, #0
 8008690:	4d0c      	ldr	r5, [pc, #48]	@ (80086c4 <__libc_init_array+0x38>)
 8008692:	4c0d      	ldr	r4, [pc, #52]	@ (80086c8 <__libc_init_array+0x3c>)
 8008694:	1b64      	subs	r4, r4, r5
 8008696:	10a4      	asrs	r4, r4, #2
 8008698:	42a6      	cmp	r6, r4
 800869a:	d109      	bne.n	80086b0 <__libc_init_array+0x24>
 800869c:	f003 fc4c 	bl	800bf38 <_init>
 80086a0:	2600      	movs	r6, #0
 80086a2:	4d0a      	ldr	r5, [pc, #40]	@ (80086cc <__libc_init_array+0x40>)
 80086a4:	4c0a      	ldr	r4, [pc, #40]	@ (80086d0 <__libc_init_array+0x44>)
 80086a6:	1b64      	subs	r4, r4, r5
 80086a8:	10a4      	asrs	r4, r4, #2
 80086aa:	42a6      	cmp	r6, r4
 80086ac:	d105      	bne.n	80086ba <__libc_init_array+0x2e>
 80086ae:	bd70      	pop	{r4, r5, r6, pc}
 80086b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80086b4:	4798      	blx	r3
 80086b6:	3601      	adds	r6, #1
 80086b8:	e7ee      	b.n	8008698 <__libc_init_array+0xc>
 80086ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80086be:	4798      	blx	r3
 80086c0:	3601      	adds	r6, #1
 80086c2:	e7f2      	b.n	80086aa <__libc_init_array+0x1e>
 80086c4:	08017b44 	.word	0x08017b44
 80086c8:	08017b44 	.word	0x08017b44
 80086cc:	08017b44 	.word	0x08017b44
 80086d0:	08017b48 	.word	0x08017b48

080086d4 <__retarget_lock_init_recursive>:
 80086d4:	4770      	bx	lr

080086d6 <__retarget_lock_acquire_recursive>:
 80086d6:	4770      	bx	lr

080086d8 <__retarget_lock_release_recursive>:
 80086d8:	4770      	bx	lr

080086da <memchr>:
 80086da:	4603      	mov	r3, r0
 80086dc:	b510      	push	{r4, lr}
 80086de:	b2c9      	uxtb	r1, r1
 80086e0:	4402      	add	r2, r0
 80086e2:	4293      	cmp	r3, r2
 80086e4:	4618      	mov	r0, r3
 80086e6:	d101      	bne.n	80086ec <memchr+0x12>
 80086e8:	2000      	movs	r0, #0
 80086ea:	e003      	b.n	80086f4 <memchr+0x1a>
 80086ec:	7804      	ldrb	r4, [r0, #0]
 80086ee:	3301      	adds	r3, #1
 80086f0:	428c      	cmp	r4, r1
 80086f2:	d1f6      	bne.n	80086e2 <memchr+0x8>
 80086f4:	bd10      	pop	{r4, pc}
	...

080086f8 <nanf>:
 80086f8:	4800      	ldr	r0, [pc, #0]	@ (80086fc <nanf+0x4>)
 80086fa:	4770      	bx	lr
 80086fc:	7fc00000 	.word	0x7fc00000

08008700 <quorem>:
 8008700:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008704:	6903      	ldr	r3, [r0, #16]
 8008706:	690c      	ldr	r4, [r1, #16]
 8008708:	4607      	mov	r7, r0
 800870a:	42a3      	cmp	r3, r4
 800870c:	db7e      	blt.n	800880c <quorem+0x10c>
 800870e:	3c01      	subs	r4, #1
 8008710:	00a3      	lsls	r3, r4, #2
 8008712:	f100 0514 	add.w	r5, r0, #20
 8008716:	f101 0814 	add.w	r8, r1, #20
 800871a:	9300      	str	r3, [sp, #0]
 800871c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008720:	9301      	str	r3, [sp, #4]
 8008722:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008726:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800872a:	3301      	adds	r3, #1
 800872c:	429a      	cmp	r2, r3
 800872e:	fbb2 f6f3 	udiv	r6, r2, r3
 8008732:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008736:	d32e      	bcc.n	8008796 <quorem+0x96>
 8008738:	f04f 0a00 	mov.w	sl, #0
 800873c:	46c4      	mov	ip, r8
 800873e:	46ae      	mov	lr, r5
 8008740:	46d3      	mov	fp, sl
 8008742:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008746:	b298      	uxth	r0, r3
 8008748:	fb06 a000 	mla	r0, r6, r0, sl
 800874c:	0c1b      	lsrs	r3, r3, #16
 800874e:	0c02      	lsrs	r2, r0, #16
 8008750:	fb06 2303 	mla	r3, r6, r3, r2
 8008754:	f8de 2000 	ldr.w	r2, [lr]
 8008758:	b280      	uxth	r0, r0
 800875a:	b292      	uxth	r2, r2
 800875c:	1a12      	subs	r2, r2, r0
 800875e:	445a      	add	r2, fp
 8008760:	f8de 0000 	ldr.w	r0, [lr]
 8008764:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008768:	b29b      	uxth	r3, r3
 800876a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800876e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008772:	b292      	uxth	r2, r2
 8008774:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008778:	45e1      	cmp	r9, ip
 800877a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800877e:	f84e 2b04 	str.w	r2, [lr], #4
 8008782:	d2de      	bcs.n	8008742 <quorem+0x42>
 8008784:	9b00      	ldr	r3, [sp, #0]
 8008786:	58eb      	ldr	r3, [r5, r3]
 8008788:	b92b      	cbnz	r3, 8008796 <quorem+0x96>
 800878a:	9b01      	ldr	r3, [sp, #4]
 800878c:	3b04      	subs	r3, #4
 800878e:	429d      	cmp	r5, r3
 8008790:	461a      	mov	r2, r3
 8008792:	d32f      	bcc.n	80087f4 <quorem+0xf4>
 8008794:	613c      	str	r4, [r7, #16]
 8008796:	4638      	mov	r0, r7
 8008798:	f001 f9c8 	bl	8009b2c <__mcmp>
 800879c:	2800      	cmp	r0, #0
 800879e:	db25      	blt.n	80087ec <quorem+0xec>
 80087a0:	4629      	mov	r1, r5
 80087a2:	2000      	movs	r0, #0
 80087a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80087a8:	f8d1 c000 	ldr.w	ip, [r1]
 80087ac:	fa1f fe82 	uxth.w	lr, r2
 80087b0:	fa1f f38c 	uxth.w	r3, ip
 80087b4:	eba3 030e 	sub.w	r3, r3, lr
 80087b8:	4403      	add	r3, r0
 80087ba:	0c12      	lsrs	r2, r2, #16
 80087bc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80087c0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087ca:	45c1      	cmp	r9, r8
 80087cc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80087d0:	f841 3b04 	str.w	r3, [r1], #4
 80087d4:	d2e6      	bcs.n	80087a4 <quorem+0xa4>
 80087d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087de:	b922      	cbnz	r2, 80087ea <quorem+0xea>
 80087e0:	3b04      	subs	r3, #4
 80087e2:	429d      	cmp	r5, r3
 80087e4:	461a      	mov	r2, r3
 80087e6:	d30b      	bcc.n	8008800 <quorem+0x100>
 80087e8:	613c      	str	r4, [r7, #16]
 80087ea:	3601      	adds	r6, #1
 80087ec:	4630      	mov	r0, r6
 80087ee:	b003      	add	sp, #12
 80087f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087f4:	6812      	ldr	r2, [r2, #0]
 80087f6:	3b04      	subs	r3, #4
 80087f8:	2a00      	cmp	r2, #0
 80087fa:	d1cb      	bne.n	8008794 <quorem+0x94>
 80087fc:	3c01      	subs	r4, #1
 80087fe:	e7c6      	b.n	800878e <quorem+0x8e>
 8008800:	6812      	ldr	r2, [r2, #0]
 8008802:	3b04      	subs	r3, #4
 8008804:	2a00      	cmp	r2, #0
 8008806:	d1ef      	bne.n	80087e8 <quorem+0xe8>
 8008808:	3c01      	subs	r4, #1
 800880a:	e7ea      	b.n	80087e2 <quorem+0xe2>
 800880c:	2000      	movs	r0, #0
 800880e:	e7ee      	b.n	80087ee <quorem+0xee>

08008810 <_dtoa_r>:
 8008810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008814:	4614      	mov	r4, r2
 8008816:	461d      	mov	r5, r3
 8008818:	69c7      	ldr	r7, [r0, #28]
 800881a:	b097      	sub	sp, #92	@ 0x5c
 800881c:	4681      	mov	r9, r0
 800881e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008822:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8008824:	b97f      	cbnz	r7, 8008846 <_dtoa_r+0x36>
 8008826:	2010      	movs	r0, #16
 8008828:	f000 fe0e 	bl	8009448 <malloc>
 800882c:	4602      	mov	r2, r0
 800882e:	f8c9 001c 	str.w	r0, [r9, #28]
 8008832:	b920      	cbnz	r0, 800883e <_dtoa_r+0x2e>
 8008834:	21ef      	movs	r1, #239	@ 0xef
 8008836:	4bac      	ldr	r3, [pc, #688]	@ (8008ae8 <_dtoa_r+0x2d8>)
 8008838:	48ac      	ldr	r0, [pc, #688]	@ (8008aec <_dtoa_r+0x2dc>)
 800883a:	f002 fdeb 	bl	800b414 <__assert_func>
 800883e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008842:	6007      	str	r7, [r0, #0]
 8008844:	60c7      	str	r7, [r0, #12]
 8008846:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800884a:	6819      	ldr	r1, [r3, #0]
 800884c:	b159      	cbz	r1, 8008866 <_dtoa_r+0x56>
 800884e:	685a      	ldr	r2, [r3, #4]
 8008850:	2301      	movs	r3, #1
 8008852:	4093      	lsls	r3, r2
 8008854:	604a      	str	r2, [r1, #4]
 8008856:	608b      	str	r3, [r1, #8]
 8008858:	4648      	mov	r0, r9
 800885a:	f000 feeb 	bl	8009634 <_Bfree>
 800885e:	2200      	movs	r2, #0
 8008860:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008864:	601a      	str	r2, [r3, #0]
 8008866:	1e2b      	subs	r3, r5, #0
 8008868:	bfaf      	iteee	ge
 800886a:	2300      	movge	r3, #0
 800886c:	2201      	movlt	r2, #1
 800886e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008872:	9307      	strlt	r3, [sp, #28]
 8008874:	bfa8      	it	ge
 8008876:	6033      	strge	r3, [r6, #0]
 8008878:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800887c:	4b9c      	ldr	r3, [pc, #624]	@ (8008af0 <_dtoa_r+0x2e0>)
 800887e:	bfb8      	it	lt
 8008880:	6032      	strlt	r2, [r6, #0]
 8008882:	ea33 0308 	bics.w	r3, r3, r8
 8008886:	d112      	bne.n	80088ae <_dtoa_r+0x9e>
 8008888:	f242 730f 	movw	r3, #9999	@ 0x270f
 800888c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800888e:	6013      	str	r3, [r2, #0]
 8008890:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008894:	4323      	orrs	r3, r4
 8008896:	f000 855e 	beq.w	8009356 <_dtoa_r+0xb46>
 800889a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800889c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008af4 <_dtoa_r+0x2e4>
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	f000 8560 	beq.w	8009366 <_dtoa_r+0xb56>
 80088a6:	f10a 0303 	add.w	r3, sl, #3
 80088aa:	f000 bd5a 	b.w	8009362 <_dtoa_r+0xb52>
 80088ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80088b2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80088b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80088ba:	2200      	movs	r2, #0
 80088bc:	2300      	movs	r3, #0
 80088be:	f7f8 f895 	bl	80009ec <__aeabi_dcmpeq>
 80088c2:	4607      	mov	r7, r0
 80088c4:	b158      	cbz	r0, 80088de <_dtoa_r+0xce>
 80088c6:	2301      	movs	r3, #1
 80088c8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80088ca:	6013      	str	r3, [r2, #0]
 80088cc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80088ce:	b113      	cbz	r3, 80088d6 <_dtoa_r+0xc6>
 80088d0:	4b89      	ldr	r3, [pc, #548]	@ (8008af8 <_dtoa_r+0x2e8>)
 80088d2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80088d4:	6013      	str	r3, [r2, #0]
 80088d6:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8008afc <_dtoa_r+0x2ec>
 80088da:	f000 bd44 	b.w	8009366 <_dtoa_r+0xb56>
 80088de:	ab14      	add	r3, sp, #80	@ 0x50
 80088e0:	9301      	str	r3, [sp, #4]
 80088e2:	ab15      	add	r3, sp, #84	@ 0x54
 80088e4:	9300      	str	r3, [sp, #0]
 80088e6:	4648      	mov	r0, r9
 80088e8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80088ec:	f001 fa36 	bl	8009d5c <__d2b>
 80088f0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80088f4:	9003      	str	r0, [sp, #12]
 80088f6:	2e00      	cmp	r6, #0
 80088f8:	d078      	beq.n	80089ec <_dtoa_r+0x1dc>
 80088fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80088fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008900:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008904:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008908:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800890c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008910:	9712      	str	r7, [sp, #72]	@ 0x48
 8008912:	4619      	mov	r1, r3
 8008914:	2200      	movs	r2, #0
 8008916:	4b7a      	ldr	r3, [pc, #488]	@ (8008b00 <_dtoa_r+0x2f0>)
 8008918:	f7f7 fc48 	bl	80001ac <__aeabi_dsub>
 800891c:	a36c      	add	r3, pc, #432	@ (adr r3, 8008ad0 <_dtoa_r+0x2c0>)
 800891e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008922:	f7f7 fdfb 	bl	800051c <__aeabi_dmul>
 8008926:	a36c      	add	r3, pc, #432	@ (adr r3, 8008ad8 <_dtoa_r+0x2c8>)
 8008928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892c:	f7f7 fc40 	bl	80001b0 <__adddf3>
 8008930:	4604      	mov	r4, r0
 8008932:	4630      	mov	r0, r6
 8008934:	460d      	mov	r5, r1
 8008936:	f7f7 fd87 	bl	8000448 <__aeabi_i2d>
 800893a:	a369      	add	r3, pc, #420	@ (adr r3, 8008ae0 <_dtoa_r+0x2d0>)
 800893c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008940:	f7f7 fdec 	bl	800051c <__aeabi_dmul>
 8008944:	4602      	mov	r2, r0
 8008946:	460b      	mov	r3, r1
 8008948:	4620      	mov	r0, r4
 800894a:	4629      	mov	r1, r5
 800894c:	f7f7 fc30 	bl	80001b0 <__adddf3>
 8008950:	4604      	mov	r4, r0
 8008952:	460d      	mov	r5, r1
 8008954:	f7f8 f892 	bl	8000a7c <__aeabi_d2iz>
 8008958:	2200      	movs	r2, #0
 800895a:	4607      	mov	r7, r0
 800895c:	2300      	movs	r3, #0
 800895e:	4620      	mov	r0, r4
 8008960:	4629      	mov	r1, r5
 8008962:	f7f8 f84d 	bl	8000a00 <__aeabi_dcmplt>
 8008966:	b140      	cbz	r0, 800897a <_dtoa_r+0x16a>
 8008968:	4638      	mov	r0, r7
 800896a:	f7f7 fd6d 	bl	8000448 <__aeabi_i2d>
 800896e:	4622      	mov	r2, r4
 8008970:	462b      	mov	r3, r5
 8008972:	f7f8 f83b 	bl	80009ec <__aeabi_dcmpeq>
 8008976:	b900      	cbnz	r0, 800897a <_dtoa_r+0x16a>
 8008978:	3f01      	subs	r7, #1
 800897a:	2f16      	cmp	r7, #22
 800897c:	d854      	bhi.n	8008a28 <_dtoa_r+0x218>
 800897e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008982:	4b60      	ldr	r3, [pc, #384]	@ (8008b04 <_dtoa_r+0x2f4>)
 8008984:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898c:	f7f8 f838 	bl	8000a00 <__aeabi_dcmplt>
 8008990:	2800      	cmp	r0, #0
 8008992:	d04b      	beq.n	8008a2c <_dtoa_r+0x21c>
 8008994:	2300      	movs	r3, #0
 8008996:	3f01      	subs	r7, #1
 8008998:	930f      	str	r3, [sp, #60]	@ 0x3c
 800899a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800899c:	1b9b      	subs	r3, r3, r6
 800899e:	1e5a      	subs	r2, r3, #1
 80089a0:	bf49      	itett	mi
 80089a2:	f1c3 0301 	rsbmi	r3, r3, #1
 80089a6:	2300      	movpl	r3, #0
 80089a8:	9304      	strmi	r3, [sp, #16]
 80089aa:	2300      	movmi	r3, #0
 80089ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80089ae:	bf54      	ite	pl
 80089b0:	9304      	strpl	r3, [sp, #16]
 80089b2:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80089b4:	2f00      	cmp	r7, #0
 80089b6:	db3b      	blt.n	8008a30 <_dtoa_r+0x220>
 80089b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089ba:	970e      	str	r7, [sp, #56]	@ 0x38
 80089bc:	443b      	add	r3, r7
 80089be:	9309      	str	r3, [sp, #36]	@ 0x24
 80089c0:	2300      	movs	r3, #0
 80089c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80089c4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80089c6:	2b09      	cmp	r3, #9
 80089c8:	d865      	bhi.n	8008a96 <_dtoa_r+0x286>
 80089ca:	2b05      	cmp	r3, #5
 80089cc:	bfc4      	itt	gt
 80089ce:	3b04      	subgt	r3, #4
 80089d0:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80089d2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80089d4:	bfc8      	it	gt
 80089d6:	2400      	movgt	r4, #0
 80089d8:	f1a3 0302 	sub.w	r3, r3, #2
 80089dc:	bfd8      	it	le
 80089de:	2401      	movle	r4, #1
 80089e0:	2b03      	cmp	r3, #3
 80089e2:	d864      	bhi.n	8008aae <_dtoa_r+0x29e>
 80089e4:	e8df f003 	tbb	[pc, r3]
 80089e8:	2c385553 	.word	0x2c385553
 80089ec:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80089f0:	441e      	add	r6, r3
 80089f2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80089f6:	2b20      	cmp	r3, #32
 80089f8:	bfc1      	itttt	gt
 80089fa:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80089fe:	fa08 f803 	lslgt.w	r8, r8, r3
 8008a02:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008a06:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008a0a:	bfd6      	itet	le
 8008a0c:	f1c3 0320 	rsble	r3, r3, #32
 8008a10:	ea48 0003 	orrgt.w	r0, r8, r3
 8008a14:	fa04 f003 	lslle.w	r0, r4, r3
 8008a18:	f7f7 fd06 	bl	8000428 <__aeabi_ui2d>
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008a22:	3e01      	subs	r6, #1
 8008a24:	9212      	str	r2, [sp, #72]	@ 0x48
 8008a26:	e774      	b.n	8008912 <_dtoa_r+0x102>
 8008a28:	2301      	movs	r3, #1
 8008a2a:	e7b5      	b.n	8008998 <_dtoa_r+0x188>
 8008a2c:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008a2e:	e7b4      	b.n	800899a <_dtoa_r+0x18a>
 8008a30:	9b04      	ldr	r3, [sp, #16]
 8008a32:	1bdb      	subs	r3, r3, r7
 8008a34:	9304      	str	r3, [sp, #16]
 8008a36:	427b      	negs	r3, r7
 8008a38:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	930e      	str	r3, [sp, #56]	@ 0x38
 8008a3e:	e7c1      	b.n	80089c4 <_dtoa_r+0x1b4>
 8008a40:	2301      	movs	r3, #1
 8008a42:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a44:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008a46:	eb07 0b03 	add.w	fp, r7, r3
 8008a4a:	f10b 0301 	add.w	r3, fp, #1
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	9308      	str	r3, [sp, #32]
 8008a52:	bfb8      	it	lt
 8008a54:	2301      	movlt	r3, #1
 8008a56:	e006      	b.n	8008a66 <_dtoa_r+0x256>
 8008a58:	2301      	movs	r3, #1
 8008a5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a5c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	dd28      	ble.n	8008ab4 <_dtoa_r+0x2a4>
 8008a62:	469b      	mov	fp, r3
 8008a64:	9308      	str	r3, [sp, #32]
 8008a66:	2100      	movs	r1, #0
 8008a68:	2204      	movs	r2, #4
 8008a6a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008a6e:	f102 0514 	add.w	r5, r2, #20
 8008a72:	429d      	cmp	r5, r3
 8008a74:	d926      	bls.n	8008ac4 <_dtoa_r+0x2b4>
 8008a76:	6041      	str	r1, [r0, #4]
 8008a78:	4648      	mov	r0, r9
 8008a7a:	f000 fd9b 	bl	80095b4 <_Balloc>
 8008a7e:	4682      	mov	sl, r0
 8008a80:	2800      	cmp	r0, #0
 8008a82:	d143      	bne.n	8008b0c <_dtoa_r+0x2fc>
 8008a84:	4602      	mov	r2, r0
 8008a86:	f240 11af 	movw	r1, #431	@ 0x1af
 8008a8a:	4b1f      	ldr	r3, [pc, #124]	@ (8008b08 <_dtoa_r+0x2f8>)
 8008a8c:	e6d4      	b.n	8008838 <_dtoa_r+0x28>
 8008a8e:	2300      	movs	r3, #0
 8008a90:	e7e3      	b.n	8008a5a <_dtoa_r+0x24a>
 8008a92:	2300      	movs	r3, #0
 8008a94:	e7d5      	b.n	8008a42 <_dtoa_r+0x232>
 8008a96:	2401      	movs	r4, #1
 8008a98:	2300      	movs	r3, #0
 8008a9a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008a9c:	9320      	str	r3, [sp, #128]	@ 0x80
 8008a9e:	f04f 3bff 	mov.w	fp, #4294967295
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	2312      	movs	r3, #18
 8008aa6:	f8cd b020 	str.w	fp, [sp, #32]
 8008aaa:	9221      	str	r2, [sp, #132]	@ 0x84
 8008aac:	e7db      	b.n	8008a66 <_dtoa_r+0x256>
 8008aae:	2301      	movs	r3, #1
 8008ab0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ab2:	e7f4      	b.n	8008a9e <_dtoa_r+0x28e>
 8008ab4:	f04f 0b01 	mov.w	fp, #1
 8008ab8:	465b      	mov	r3, fp
 8008aba:	f8cd b020 	str.w	fp, [sp, #32]
 8008abe:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8008ac2:	e7d0      	b.n	8008a66 <_dtoa_r+0x256>
 8008ac4:	3101      	adds	r1, #1
 8008ac6:	0052      	lsls	r2, r2, #1
 8008ac8:	e7d1      	b.n	8008a6e <_dtoa_r+0x25e>
 8008aca:	bf00      	nop
 8008acc:	f3af 8000 	nop.w
 8008ad0:	636f4361 	.word	0x636f4361
 8008ad4:	3fd287a7 	.word	0x3fd287a7
 8008ad8:	8b60c8b3 	.word	0x8b60c8b3
 8008adc:	3fc68a28 	.word	0x3fc68a28
 8008ae0:	509f79fb 	.word	0x509f79fb
 8008ae4:	3fd34413 	.word	0x3fd34413
 8008ae8:	0801773e 	.word	0x0801773e
 8008aec:	08017755 	.word	0x08017755
 8008af0:	7ff00000 	.word	0x7ff00000
 8008af4:	0801773a 	.word	0x0801773a
 8008af8:	08017709 	.word	0x08017709
 8008afc:	08017708 	.word	0x08017708
 8008b00:	3ff80000 	.word	0x3ff80000
 8008b04:	08017908 	.word	0x08017908
 8008b08:	080177ad 	.word	0x080177ad
 8008b0c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008b10:	6018      	str	r0, [r3, #0]
 8008b12:	9b08      	ldr	r3, [sp, #32]
 8008b14:	2b0e      	cmp	r3, #14
 8008b16:	f200 80a1 	bhi.w	8008c5c <_dtoa_r+0x44c>
 8008b1a:	2c00      	cmp	r4, #0
 8008b1c:	f000 809e 	beq.w	8008c5c <_dtoa_r+0x44c>
 8008b20:	2f00      	cmp	r7, #0
 8008b22:	dd33      	ble.n	8008b8c <_dtoa_r+0x37c>
 8008b24:	4b9c      	ldr	r3, [pc, #624]	@ (8008d98 <_dtoa_r+0x588>)
 8008b26:	f007 020f 	and.w	r2, r7, #15
 8008b2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b2e:	05f8      	lsls	r0, r7, #23
 8008b30:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008b34:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8008b38:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008b3c:	d516      	bpl.n	8008b6c <_dtoa_r+0x35c>
 8008b3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b42:	4b96      	ldr	r3, [pc, #600]	@ (8008d9c <_dtoa_r+0x58c>)
 8008b44:	2603      	movs	r6, #3
 8008b46:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b4a:	f7f7 fe11 	bl	8000770 <__aeabi_ddiv>
 8008b4e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008b52:	f004 040f 	and.w	r4, r4, #15
 8008b56:	4d91      	ldr	r5, [pc, #580]	@ (8008d9c <_dtoa_r+0x58c>)
 8008b58:	b954      	cbnz	r4, 8008b70 <_dtoa_r+0x360>
 8008b5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008b5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b62:	f7f7 fe05 	bl	8000770 <__aeabi_ddiv>
 8008b66:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008b6a:	e028      	b.n	8008bbe <_dtoa_r+0x3ae>
 8008b6c:	2602      	movs	r6, #2
 8008b6e:	e7f2      	b.n	8008b56 <_dtoa_r+0x346>
 8008b70:	07e1      	lsls	r1, r4, #31
 8008b72:	d508      	bpl.n	8008b86 <_dtoa_r+0x376>
 8008b74:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008b78:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008b7c:	f7f7 fcce 	bl	800051c <__aeabi_dmul>
 8008b80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008b84:	3601      	adds	r6, #1
 8008b86:	1064      	asrs	r4, r4, #1
 8008b88:	3508      	adds	r5, #8
 8008b8a:	e7e5      	b.n	8008b58 <_dtoa_r+0x348>
 8008b8c:	f000 80af 	beq.w	8008cee <_dtoa_r+0x4de>
 8008b90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b94:	427c      	negs	r4, r7
 8008b96:	4b80      	ldr	r3, [pc, #512]	@ (8008d98 <_dtoa_r+0x588>)
 8008b98:	f004 020f 	and.w	r2, r4, #15
 8008b9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba4:	f7f7 fcba 	bl	800051c <__aeabi_dmul>
 8008ba8:	2602      	movs	r6, #2
 8008baa:	2300      	movs	r3, #0
 8008bac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008bb0:	4d7a      	ldr	r5, [pc, #488]	@ (8008d9c <_dtoa_r+0x58c>)
 8008bb2:	1124      	asrs	r4, r4, #4
 8008bb4:	2c00      	cmp	r4, #0
 8008bb6:	f040 808f 	bne.w	8008cd8 <_dtoa_r+0x4c8>
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d1d3      	bne.n	8008b66 <_dtoa_r+0x356>
 8008bbe:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8008bc2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	f000 8094 	beq.w	8008cf2 <_dtoa_r+0x4e2>
 8008bca:	2200      	movs	r2, #0
 8008bcc:	4620      	mov	r0, r4
 8008bce:	4629      	mov	r1, r5
 8008bd0:	4b73      	ldr	r3, [pc, #460]	@ (8008da0 <_dtoa_r+0x590>)
 8008bd2:	f7f7 ff15 	bl	8000a00 <__aeabi_dcmplt>
 8008bd6:	2800      	cmp	r0, #0
 8008bd8:	f000 808b 	beq.w	8008cf2 <_dtoa_r+0x4e2>
 8008bdc:	9b08      	ldr	r3, [sp, #32]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	f000 8087 	beq.w	8008cf2 <_dtoa_r+0x4e2>
 8008be4:	f1bb 0f00 	cmp.w	fp, #0
 8008be8:	dd34      	ble.n	8008c54 <_dtoa_r+0x444>
 8008bea:	4620      	mov	r0, r4
 8008bec:	2200      	movs	r2, #0
 8008bee:	4629      	mov	r1, r5
 8008bf0:	4b6c      	ldr	r3, [pc, #432]	@ (8008da4 <_dtoa_r+0x594>)
 8008bf2:	f7f7 fc93 	bl	800051c <__aeabi_dmul>
 8008bf6:	465c      	mov	r4, fp
 8008bf8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008bfc:	f107 38ff 	add.w	r8, r7, #4294967295
 8008c00:	3601      	adds	r6, #1
 8008c02:	4630      	mov	r0, r6
 8008c04:	f7f7 fc20 	bl	8000448 <__aeabi_i2d>
 8008c08:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c0c:	f7f7 fc86 	bl	800051c <__aeabi_dmul>
 8008c10:	2200      	movs	r2, #0
 8008c12:	4b65      	ldr	r3, [pc, #404]	@ (8008da8 <_dtoa_r+0x598>)
 8008c14:	f7f7 facc 	bl	80001b0 <__adddf3>
 8008c18:	4605      	mov	r5, r0
 8008c1a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008c1e:	2c00      	cmp	r4, #0
 8008c20:	d16a      	bne.n	8008cf8 <_dtoa_r+0x4e8>
 8008c22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c26:	2200      	movs	r2, #0
 8008c28:	4b60      	ldr	r3, [pc, #384]	@ (8008dac <_dtoa_r+0x59c>)
 8008c2a:	f7f7 fabf 	bl	80001ac <__aeabi_dsub>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	460b      	mov	r3, r1
 8008c32:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008c36:	462a      	mov	r2, r5
 8008c38:	4633      	mov	r3, r6
 8008c3a:	f7f7 feff 	bl	8000a3c <__aeabi_dcmpgt>
 8008c3e:	2800      	cmp	r0, #0
 8008c40:	f040 8298 	bne.w	8009174 <_dtoa_r+0x964>
 8008c44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c48:	462a      	mov	r2, r5
 8008c4a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008c4e:	f7f7 fed7 	bl	8000a00 <__aeabi_dcmplt>
 8008c52:	bb38      	cbnz	r0, 8008ca4 <_dtoa_r+0x494>
 8008c54:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008c58:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008c5c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	f2c0 8157 	blt.w	8008f12 <_dtoa_r+0x702>
 8008c64:	2f0e      	cmp	r7, #14
 8008c66:	f300 8154 	bgt.w	8008f12 <_dtoa_r+0x702>
 8008c6a:	4b4b      	ldr	r3, [pc, #300]	@ (8008d98 <_dtoa_r+0x588>)
 8008c6c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008c70:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008c74:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008c78:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	f280 80e5 	bge.w	8008e4a <_dtoa_r+0x63a>
 8008c80:	9b08      	ldr	r3, [sp, #32]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	f300 80e1 	bgt.w	8008e4a <_dtoa_r+0x63a>
 8008c88:	d10c      	bne.n	8008ca4 <_dtoa_r+0x494>
 8008c8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	4b46      	ldr	r3, [pc, #280]	@ (8008dac <_dtoa_r+0x59c>)
 8008c92:	f7f7 fc43 	bl	800051c <__aeabi_dmul>
 8008c96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c9a:	f7f7 fec5 	bl	8000a28 <__aeabi_dcmpge>
 8008c9e:	2800      	cmp	r0, #0
 8008ca0:	f000 8266 	beq.w	8009170 <_dtoa_r+0x960>
 8008ca4:	2400      	movs	r4, #0
 8008ca6:	4625      	mov	r5, r4
 8008ca8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008caa:	4656      	mov	r6, sl
 8008cac:	ea6f 0803 	mvn.w	r8, r3
 8008cb0:	2700      	movs	r7, #0
 8008cb2:	4621      	mov	r1, r4
 8008cb4:	4648      	mov	r0, r9
 8008cb6:	f000 fcbd 	bl	8009634 <_Bfree>
 8008cba:	2d00      	cmp	r5, #0
 8008cbc:	f000 80bd 	beq.w	8008e3a <_dtoa_r+0x62a>
 8008cc0:	b12f      	cbz	r7, 8008cce <_dtoa_r+0x4be>
 8008cc2:	42af      	cmp	r7, r5
 8008cc4:	d003      	beq.n	8008cce <_dtoa_r+0x4be>
 8008cc6:	4639      	mov	r1, r7
 8008cc8:	4648      	mov	r0, r9
 8008cca:	f000 fcb3 	bl	8009634 <_Bfree>
 8008cce:	4629      	mov	r1, r5
 8008cd0:	4648      	mov	r0, r9
 8008cd2:	f000 fcaf 	bl	8009634 <_Bfree>
 8008cd6:	e0b0      	b.n	8008e3a <_dtoa_r+0x62a>
 8008cd8:	07e2      	lsls	r2, r4, #31
 8008cda:	d505      	bpl.n	8008ce8 <_dtoa_r+0x4d8>
 8008cdc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008ce0:	f7f7 fc1c 	bl	800051c <__aeabi_dmul>
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	3601      	adds	r6, #1
 8008ce8:	1064      	asrs	r4, r4, #1
 8008cea:	3508      	adds	r5, #8
 8008cec:	e762      	b.n	8008bb4 <_dtoa_r+0x3a4>
 8008cee:	2602      	movs	r6, #2
 8008cf0:	e765      	b.n	8008bbe <_dtoa_r+0x3ae>
 8008cf2:	46b8      	mov	r8, r7
 8008cf4:	9c08      	ldr	r4, [sp, #32]
 8008cf6:	e784      	b.n	8008c02 <_dtoa_r+0x3f2>
 8008cf8:	4b27      	ldr	r3, [pc, #156]	@ (8008d98 <_dtoa_r+0x588>)
 8008cfa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008cfc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008d00:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008d04:	4454      	add	r4, sl
 8008d06:	2900      	cmp	r1, #0
 8008d08:	d054      	beq.n	8008db4 <_dtoa_r+0x5a4>
 8008d0a:	2000      	movs	r0, #0
 8008d0c:	4928      	ldr	r1, [pc, #160]	@ (8008db0 <_dtoa_r+0x5a0>)
 8008d0e:	f7f7 fd2f 	bl	8000770 <__aeabi_ddiv>
 8008d12:	4633      	mov	r3, r6
 8008d14:	462a      	mov	r2, r5
 8008d16:	f7f7 fa49 	bl	80001ac <__aeabi_dsub>
 8008d1a:	4656      	mov	r6, sl
 8008d1c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008d20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d24:	f7f7 feaa 	bl	8000a7c <__aeabi_d2iz>
 8008d28:	4605      	mov	r5, r0
 8008d2a:	f7f7 fb8d 	bl	8000448 <__aeabi_i2d>
 8008d2e:	4602      	mov	r2, r0
 8008d30:	460b      	mov	r3, r1
 8008d32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d36:	f7f7 fa39 	bl	80001ac <__aeabi_dsub>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	460b      	mov	r3, r1
 8008d3e:	3530      	adds	r5, #48	@ 0x30
 8008d40:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008d44:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008d48:	f806 5b01 	strb.w	r5, [r6], #1
 8008d4c:	f7f7 fe58 	bl	8000a00 <__aeabi_dcmplt>
 8008d50:	2800      	cmp	r0, #0
 8008d52:	d172      	bne.n	8008e3a <_dtoa_r+0x62a>
 8008d54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008d58:	2000      	movs	r0, #0
 8008d5a:	4911      	ldr	r1, [pc, #68]	@ (8008da0 <_dtoa_r+0x590>)
 8008d5c:	f7f7 fa26 	bl	80001ac <__aeabi_dsub>
 8008d60:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008d64:	f7f7 fe4c 	bl	8000a00 <__aeabi_dcmplt>
 8008d68:	2800      	cmp	r0, #0
 8008d6a:	f040 80b4 	bne.w	8008ed6 <_dtoa_r+0x6c6>
 8008d6e:	42a6      	cmp	r6, r4
 8008d70:	f43f af70 	beq.w	8008c54 <_dtoa_r+0x444>
 8008d74:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008d78:	2200      	movs	r2, #0
 8008d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8008da4 <_dtoa_r+0x594>)
 8008d7c:	f7f7 fbce 	bl	800051c <__aeabi_dmul>
 8008d80:	2200      	movs	r2, #0
 8008d82:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008d86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d8a:	4b06      	ldr	r3, [pc, #24]	@ (8008da4 <_dtoa_r+0x594>)
 8008d8c:	f7f7 fbc6 	bl	800051c <__aeabi_dmul>
 8008d90:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008d94:	e7c4      	b.n	8008d20 <_dtoa_r+0x510>
 8008d96:	bf00      	nop
 8008d98:	08017908 	.word	0x08017908
 8008d9c:	080178e0 	.word	0x080178e0
 8008da0:	3ff00000 	.word	0x3ff00000
 8008da4:	40240000 	.word	0x40240000
 8008da8:	401c0000 	.word	0x401c0000
 8008dac:	40140000 	.word	0x40140000
 8008db0:	3fe00000 	.word	0x3fe00000
 8008db4:	4631      	mov	r1, r6
 8008db6:	4628      	mov	r0, r5
 8008db8:	f7f7 fbb0 	bl	800051c <__aeabi_dmul>
 8008dbc:	4656      	mov	r6, sl
 8008dbe:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008dc2:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008dc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008dc8:	f7f7 fe58 	bl	8000a7c <__aeabi_d2iz>
 8008dcc:	4605      	mov	r5, r0
 8008dce:	f7f7 fb3b 	bl	8000448 <__aeabi_i2d>
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008dda:	f7f7 f9e7 	bl	80001ac <__aeabi_dsub>
 8008dde:	4602      	mov	r2, r0
 8008de0:	460b      	mov	r3, r1
 8008de2:	3530      	adds	r5, #48	@ 0x30
 8008de4:	f806 5b01 	strb.w	r5, [r6], #1
 8008de8:	42a6      	cmp	r6, r4
 8008dea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008dee:	f04f 0200 	mov.w	r2, #0
 8008df2:	d124      	bne.n	8008e3e <_dtoa_r+0x62e>
 8008df4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008df8:	4bae      	ldr	r3, [pc, #696]	@ (80090b4 <_dtoa_r+0x8a4>)
 8008dfa:	f7f7 f9d9 	bl	80001b0 <__adddf3>
 8008dfe:	4602      	mov	r2, r0
 8008e00:	460b      	mov	r3, r1
 8008e02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e06:	f7f7 fe19 	bl	8000a3c <__aeabi_dcmpgt>
 8008e0a:	2800      	cmp	r0, #0
 8008e0c:	d163      	bne.n	8008ed6 <_dtoa_r+0x6c6>
 8008e0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008e12:	2000      	movs	r0, #0
 8008e14:	49a7      	ldr	r1, [pc, #668]	@ (80090b4 <_dtoa_r+0x8a4>)
 8008e16:	f7f7 f9c9 	bl	80001ac <__aeabi_dsub>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e22:	f7f7 fded 	bl	8000a00 <__aeabi_dcmplt>
 8008e26:	2800      	cmp	r0, #0
 8008e28:	f43f af14 	beq.w	8008c54 <_dtoa_r+0x444>
 8008e2c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008e2e:	1e73      	subs	r3, r6, #1
 8008e30:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008e32:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008e36:	2b30      	cmp	r3, #48	@ 0x30
 8008e38:	d0f8      	beq.n	8008e2c <_dtoa_r+0x61c>
 8008e3a:	4647      	mov	r7, r8
 8008e3c:	e03b      	b.n	8008eb6 <_dtoa_r+0x6a6>
 8008e3e:	4b9e      	ldr	r3, [pc, #632]	@ (80090b8 <_dtoa_r+0x8a8>)
 8008e40:	f7f7 fb6c 	bl	800051c <__aeabi_dmul>
 8008e44:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008e48:	e7bc      	b.n	8008dc4 <_dtoa_r+0x5b4>
 8008e4a:	4656      	mov	r6, sl
 8008e4c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8008e50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e54:	4620      	mov	r0, r4
 8008e56:	4629      	mov	r1, r5
 8008e58:	f7f7 fc8a 	bl	8000770 <__aeabi_ddiv>
 8008e5c:	f7f7 fe0e 	bl	8000a7c <__aeabi_d2iz>
 8008e60:	4680      	mov	r8, r0
 8008e62:	f7f7 faf1 	bl	8000448 <__aeabi_i2d>
 8008e66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e6a:	f7f7 fb57 	bl	800051c <__aeabi_dmul>
 8008e6e:	4602      	mov	r2, r0
 8008e70:	460b      	mov	r3, r1
 8008e72:	4620      	mov	r0, r4
 8008e74:	4629      	mov	r1, r5
 8008e76:	f7f7 f999 	bl	80001ac <__aeabi_dsub>
 8008e7a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008e7e:	9d08      	ldr	r5, [sp, #32]
 8008e80:	f806 4b01 	strb.w	r4, [r6], #1
 8008e84:	eba6 040a 	sub.w	r4, r6, sl
 8008e88:	42a5      	cmp	r5, r4
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	d133      	bne.n	8008ef8 <_dtoa_r+0x6e8>
 8008e90:	f7f7 f98e 	bl	80001b0 <__adddf3>
 8008e94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e98:	4604      	mov	r4, r0
 8008e9a:	460d      	mov	r5, r1
 8008e9c:	f7f7 fdce 	bl	8000a3c <__aeabi_dcmpgt>
 8008ea0:	b9c0      	cbnz	r0, 8008ed4 <_dtoa_r+0x6c4>
 8008ea2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	4629      	mov	r1, r5
 8008eaa:	f7f7 fd9f 	bl	80009ec <__aeabi_dcmpeq>
 8008eae:	b110      	cbz	r0, 8008eb6 <_dtoa_r+0x6a6>
 8008eb0:	f018 0f01 	tst.w	r8, #1
 8008eb4:	d10e      	bne.n	8008ed4 <_dtoa_r+0x6c4>
 8008eb6:	4648      	mov	r0, r9
 8008eb8:	9903      	ldr	r1, [sp, #12]
 8008eba:	f000 fbbb 	bl	8009634 <_Bfree>
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	7033      	strb	r3, [r6, #0]
 8008ec2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008ec4:	3701      	adds	r7, #1
 8008ec6:	601f      	str	r7, [r3, #0]
 8008ec8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	f000 824b 	beq.w	8009366 <_dtoa_r+0xb56>
 8008ed0:	601e      	str	r6, [r3, #0]
 8008ed2:	e248      	b.n	8009366 <_dtoa_r+0xb56>
 8008ed4:	46b8      	mov	r8, r7
 8008ed6:	4633      	mov	r3, r6
 8008ed8:	461e      	mov	r6, r3
 8008eda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ede:	2a39      	cmp	r2, #57	@ 0x39
 8008ee0:	d106      	bne.n	8008ef0 <_dtoa_r+0x6e0>
 8008ee2:	459a      	cmp	sl, r3
 8008ee4:	d1f8      	bne.n	8008ed8 <_dtoa_r+0x6c8>
 8008ee6:	2230      	movs	r2, #48	@ 0x30
 8008ee8:	f108 0801 	add.w	r8, r8, #1
 8008eec:	f88a 2000 	strb.w	r2, [sl]
 8008ef0:	781a      	ldrb	r2, [r3, #0]
 8008ef2:	3201      	adds	r2, #1
 8008ef4:	701a      	strb	r2, [r3, #0]
 8008ef6:	e7a0      	b.n	8008e3a <_dtoa_r+0x62a>
 8008ef8:	2200      	movs	r2, #0
 8008efa:	4b6f      	ldr	r3, [pc, #444]	@ (80090b8 <_dtoa_r+0x8a8>)
 8008efc:	f7f7 fb0e 	bl	800051c <__aeabi_dmul>
 8008f00:	2200      	movs	r2, #0
 8008f02:	2300      	movs	r3, #0
 8008f04:	4604      	mov	r4, r0
 8008f06:	460d      	mov	r5, r1
 8008f08:	f7f7 fd70 	bl	80009ec <__aeabi_dcmpeq>
 8008f0c:	2800      	cmp	r0, #0
 8008f0e:	d09f      	beq.n	8008e50 <_dtoa_r+0x640>
 8008f10:	e7d1      	b.n	8008eb6 <_dtoa_r+0x6a6>
 8008f12:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008f14:	2a00      	cmp	r2, #0
 8008f16:	f000 80ea 	beq.w	80090ee <_dtoa_r+0x8de>
 8008f1a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008f1c:	2a01      	cmp	r2, #1
 8008f1e:	f300 80cd 	bgt.w	80090bc <_dtoa_r+0x8ac>
 8008f22:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008f24:	2a00      	cmp	r2, #0
 8008f26:	f000 80c1 	beq.w	80090ac <_dtoa_r+0x89c>
 8008f2a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008f2e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008f30:	9e04      	ldr	r6, [sp, #16]
 8008f32:	9a04      	ldr	r2, [sp, #16]
 8008f34:	2101      	movs	r1, #1
 8008f36:	441a      	add	r2, r3
 8008f38:	9204      	str	r2, [sp, #16]
 8008f3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f3c:	4648      	mov	r0, r9
 8008f3e:	441a      	add	r2, r3
 8008f40:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f42:	f000 fc75 	bl	8009830 <__i2b>
 8008f46:	4605      	mov	r5, r0
 8008f48:	b166      	cbz	r6, 8008f64 <_dtoa_r+0x754>
 8008f4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	dd09      	ble.n	8008f64 <_dtoa_r+0x754>
 8008f50:	42b3      	cmp	r3, r6
 8008f52:	bfa8      	it	ge
 8008f54:	4633      	movge	r3, r6
 8008f56:	9a04      	ldr	r2, [sp, #16]
 8008f58:	1af6      	subs	r6, r6, r3
 8008f5a:	1ad2      	subs	r2, r2, r3
 8008f5c:	9204      	str	r2, [sp, #16]
 8008f5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f60:	1ad3      	subs	r3, r2, r3
 8008f62:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f66:	b30b      	cbz	r3, 8008fac <_dtoa_r+0x79c>
 8008f68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	f000 80c6 	beq.w	80090fc <_dtoa_r+0x8ec>
 8008f70:	2c00      	cmp	r4, #0
 8008f72:	f000 80c0 	beq.w	80090f6 <_dtoa_r+0x8e6>
 8008f76:	4629      	mov	r1, r5
 8008f78:	4622      	mov	r2, r4
 8008f7a:	4648      	mov	r0, r9
 8008f7c:	f000 fd10 	bl	80099a0 <__pow5mult>
 8008f80:	9a03      	ldr	r2, [sp, #12]
 8008f82:	4601      	mov	r1, r0
 8008f84:	4605      	mov	r5, r0
 8008f86:	4648      	mov	r0, r9
 8008f88:	f000 fc68 	bl	800985c <__multiply>
 8008f8c:	9903      	ldr	r1, [sp, #12]
 8008f8e:	4680      	mov	r8, r0
 8008f90:	4648      	mov	r0, r9
 8008f92:	f000 fb4f 	bl	8009634 <_Bfree>
 8008f96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f98:	1b1b      	subs	r3, r3, r4
 8008f9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f9c:	f000 80b1 	beq.w	8009102 <_dtoa_r+0x8f2>
 8008fa0:	4641      	mov	r1, r8
 8008fa2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008fa4:	4648      	mov	r0, r9
 8008fa6:	f000 fcfb 	bl	80099a0 <__pow5mult>
 8008faa:	9003      	str	r0, [sp, #12]
 8008fac:	2101      	movs	r1, #1
 8008fae:	4648      	mov	r0, r9
 8008fb0:	f000 fc3e 	bl	8009830 <__i2b>
 8008fb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008fb6:	4604      	mov	r4, r0
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	f000 81d8 	beq.w	800936e <_dtoa_r+0xb5e>
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	4601      	mov	r1, r0
 8008fc2:	4648      	mov	r0, r9
 8008fc4:	f000 fcec 	bl	80099a0 <__pow5mult>
 8008fc8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008fca:	4604      	mov	r4, r0
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	f300 809f 	bgt.w	8009110 <_dtoa_r+0x900>
 8008fd2:	9b06      	ldr	r3, [sp, #24]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	f040 8097 	bne.w	8009108 <_dtoa_r+0x8f8>
 8008fda:	9b07      	ldr	r3, [sp, #28]
 8008fdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	f040 8093 	bne.w	800910c <_dtoa_r+0x8fc>
 8008fe6:	9b07      	ldr	r3, [sp, #28]
 8008fe8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008fec:	0d1b      	lsrs	r3, r3, #20
 8008fee:	051b      	lsls	r3, r3, #20
 8008ff0:	b133      	cbz	r3, 8009000 <_dtoa_r+0x7f0>
 8008ff2:	9b04      	ldr	r3, [sp, #16]
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	9304      	str	r3, [sp, #16]
 8008ff8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ffe:	2301      	movs	r3, #1
 8009000:	930a      	str	r3, [sp, #40]	@ 0x28
 8009002:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009004:	2b00      	cmp	r3, #0
 8009006:	f000 81b8 	beq.w	800937a <_dtoa_r+0xb6a>
 800900a:	6923      	ldr	r3, [r4, #16]
 800900c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009010:	6918      	ldr	r0, [r3, #16]
 8009012:	f000 fbc1 	bl	8009798 <__hi0bits>
 8009016:	f1c0 0020 	rsb	r0, r0, #32
 800901a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800901c:	4418      	add	r0, r3
 800901e:	f010 001f 	ands.w	r0, r0, #31
 8009022:	f000 8082 	beq.w	800912a <_dtoa_r+0x91a>
 8009026:	f1c0 0320 	rsb	r3, r0, #32
 800902a:	2b04      	cmp	r3, #4
 800902c:	dd73      	ble.n	8009116 <_dtoa_r+0x906>
 800902e:	9b04      	ldr	r3, [sp, #16]
 8009030:	f1c0 001c 	rsb	r0, r0, #28
 8009034:	4403      	add	r3, r0
 8009036:	9304      	str	r3, [sp, #16]
 8009038:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800903a:	4406      	add	r6, r0
 800903c:	4403      	add	r3, r0
 800903e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009040:	9b04      	ldr	r3, [sp, #16]
 8009042:	2b00      	cmp	r3, #0
 8009044:	dd05      	ble.n	8009052 <_dtoa_r+0x842>
 8009046:	461a      	mov	r2, r3
 8009048:	4648      	mov	r0, r9
 800904a:	9903      	ldr	r1, [sp, #12]
 800904c:	f000 fd02 	bl	8009a54 <__lshift>
 8009050:	9003      	str	r0, [sp, #12]
 8009052:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009054:	2b00      	cmp	r3, #0
 8009056:	dd05      	ble.n	8009064 <_dtoa_r+0x854>
 8009058:	4621      	mov	r1, r4
 800905a:	461a      	mov	r2, r3
 800905c:	4648      	mov	r0, r9
 800905e:	f000 fcf9 	bl	8009a54 <__lshift>
 8009062:	4604      	mov	r4, r0
 8009064:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009066:	2b00      	cmp	r3, #0
 8009068:	d061      	beq.n	800912e <_dtoa_r+0x91e>
 800906a:	4621      	mov	r1, r4
 800906c:	9803      	ldr	r0, [sp, #12]
 800906e:	f000 fd5d 	bl	8009b2c <__mcmp>
 8009072:	2800      	cmp	r0, #0
 8009074:	da5b      	bge.n	800912e <_dtoa_r+0x91e>
 8009076:	2300      	movs	r3, #0
 8009078:	220a      	movs	r2, #10
 800907a:	4648      	mov	r0, r9
 800907c:	9903      	ldr	r1, [sp, #12]
 800907e:	f000 fafb 	bl	8009678 <__multadd>
 8009082:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009084:	f107 38ff 	add.w	r8, r7, #4294967295
 8009088:	9003      	str	r0, [sp, #12]
 800908a:	2b00      	cmp	r3, #0
 800908c:	f000 8177 	beq.w	800937e <_dtoa_r+0xb6e>
 8009090:	4629      	mov	r1, r5
 8009092:	2300      	movs	r3, #0
 8009094:	220a      	movs	r2, #10
 8009096:	4648      	mov	r0, r9
 8009098:	f000 faee 	bl	8009678 <__multadd>
 800909c:	f1bb 0f00 	cmp.w	fp, #0
 80090a0:	4605      	mov	r5, r0
 80090a2:	dc6f      	bgt.n	8009184 <_dtoa_r+0x974>
 80090a4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80090a6:	2b02      	cmp	r3, #2
 80090a8:	dc49      	bgt.n	800913e <_dtoa_r+0x92e>
 80090aa:	e06b      	b.n	8009184 <_dtoa_r+0x974>
 80090ac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80090ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80090b2:	e73c      	b.n	8008f2e <_dtoa_r+0x71e>
 80090b4:	3fe00000 	.word	0x3fe00000
 80090b8:	40240000 	.word	0x40240000
 80090bc:	9b08      	ldr	r3, [sp, #32]
 80090be:	1e5c      	subs	r4, r3, #1
 80090c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090c2:	42a3      	cmp	r3, r4
 80090c4:	db09      	blt.n	80090da <_dtoa_r+0x8ca>
 80090c6:	1b1c      	subs	r4, r3, r4
 80090c8:	9b08      	ldr	r3, [sp, #32]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	f6bf af30 	bge.w	8008f30 <_dtoa_r+0x720>
 80090d0:	9b04      	ldr	r3, [sp, #16]
 80090d2:	9a08      	ldr	r2, [sp, #32]
 80090d4:	1a9e      	subs	r6, r3, r2
 80090d6:	2300      	movs	r3, #0
 80090d8:	e72b      	b.n	8008f32 <_dtoa_r+0x722>
 80090da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80090de:	1ae3      	subs	r3, r4, r3
 80090e0:	441a      	add	r2, r3
 80090e2:	940a      	str	r4, [sp, #40]	@ 0x28
 80090e4:	9e04      	ldr	r6, [sp, #16]
 80090e6:	2400      	movs	r4, #0
 80090e8:	9b08      	ldr	r3, [sp, #32]
 80090ea:	920e      	str	r2, [sp, #56]	@ 0x38
 80090ec:	e721      	b.n	8008f32 <_dtoa_r+0x722>
 80090ee:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80090f0:	9e04      	ldr	r6, [sp, #16]
 80090f2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80090f4:	e728      	b.n	8008f48 <_dtoa_r+0x738>
 80090f6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80090fa:	e751      	b.n	8008fa0 <_dtoa_r+0x790>
 80090fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80090fe:	9903      	ldr	r1, [sp, #12]
 8009100:	e750      	b.n	8008fa4 <_dtoa_r+0x794>
 8009102:	f8cd 800c 	str.w	r8, [sp, #12]
 8009106:	e751      	b.n	8008fac <_dtoa_r+0x79c>
 8009108:	2300      	movs	r3, #0
 800910a:	e779      	b.n	8009000 <_dtoa_r+0x7f0>
 800910c:	9b06      	ldr	r3, [sp, #24]
 800910e:	e777      	b.n	8009000 <_dtoa_r+0x7f0>
 8009110:	2300      	movs	r3, #0
 8009112:	930a      	str	r3, [sp, #40]	@ 0x28
 8009114:	e779      	b.n	800900a <_dtoa_r+0x7fa>
 8009116:	d093      	beq.n	8009040 <_dtoa_r+0x830>
 8009118:	9a04      	ldr	r2, [sp, #16]
 800911a:	331c      	adds	r3, #28
 800911c:	441a      	add	r2, r3
 800911e:	9204      	str	r2, [sp, #16]
 8009120:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009122:	441e      	add	r6, r3
 8009124:	441a      	add	r2, r3
 8009126:	9209      	str	r2, [sp, #36]	@ 0x24
 8009128:	e78a      	b.n	8009040 <_dtoa_r+0x830>
 800912a:	4603      	mov	r3, r0
 800912c:	e7f4      	b.n	8009118 <_dtoa_r+0x908>
 800912e:	9b08      	ldr	r3, [sp, #32]
 8009130:	46b8      	mov	r8, r7
 8009132:	2b00      	cmp	r3, #0
 8009134:	dc20      	bgt.n	8009178 <_dtoa_r+0x968>
 8009136:	469b      	mov	fp, r3
 8009138:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800913a:	2b02      	cmp	r3, #2
 800913c:	dd1e      	ble.n	800917c <_dtoa_r+0x96c>
 800913e:	f1bb 0f00 	cmp.w	fp, #0
 8009142:	f47f adb1 	bne.w	8008ca8 <_dtoa_r+0x498>
 8009146:	4621      	mov	r1, r4
 8009148:	465b      	mov	r3, fp
 800914a:	2205      	movs	r2, #5
 800914c:	4648      	mov	r0, r9
 800914e:	f000 fa93 	bl	8009678 <__multadd>
 8009152:	4601      	mov	r1, r0
 8009154:	4604      	mov	r4, r0
 8009156:	9803      	ldr	r0, [sp, #12]
 8009158:	f000 fce8 	bl	8009b2c <__mcmp>
 800915c:	2800      	cmp	r0, #0
 800915e:	f77f ada3 	ble.w	8008ca8 <_dtoa_r+0x498>
 8009162:	4656      	mov	r6, sl
 8009164:	2331      	movs	r3, #49	@ 0x31
 8009166:	f108 0801 	add.w	r8, r8, #1
 800916a:	f806 3b01 	strb.w	r3, [r6], #1
 800916e:	e59f      	b.n	8008cb0 <_dtoa_r+0x4a0>
 8009170:	46b8      	mov	r8, r7
 8009172:	9c08      	ldr	r4, [sp, #32]
 8009174:	4625      	mov	r5, r4
 8009176:	e7f4      	b.n	8009162 <_dtoa_r+0x952>
 8009178:	f8dd b020 	ldr.w	fp, [sp, #32]
 800917c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800917e:	2b00      	cmp	r3, #0
 8009180:	f000 8101 	beq.w	8009386 <_dtoa_r+0xb76>
 8009184:	2e00      	cmp	r6, #0
 8009186:	dd05      	ble.n	8009194 <_dtoa_r+0x984>
 8009188:	4629      	mov	r1, r5
 800918a:	4632      	mov	r2, r6
 800918c:	4648      	mov	r0, r9
 800918e:	f000 fc61 	bl	8009a54 <__lshift>
 8009192:	4605      	mov	r5, r0
 8009194:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009196:	2b00      	cmp	r3, #0
 8009198:	d05c      	beq.n	8009254 <_dtoa_r+0xa44>
 800919a:	4648      	mov	r0, r9
 800919c:	6869      	ldr	r1, [r5, #4]
 800919e:	f000 fa09 	bl	80095b4 <_Balloc>
 80091a2:	4606      	mov	r6, r0
 80091a4:	b928      	cbnz	r0, 80091b2 <_dtoa_r+0x9a2>
 80091a6:	4602      	mov	r2, r0
 80091a8:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80091ac:	4b80      	ldr	r3, [pc, #512]	@ (80093b0 <_dtoa_r+0xba0>)
 80091ae:	f7ff bb43 	b.w	8008838 <_dtoa_r+0x28>
 80091b2:	692a      	ldr	r2, [r5, #16]
 80091b4:	f105 010c 	add.w	r1, r5, #12
 80091b8:	3202      	adds	r2, #2
 80091ba:	0092      	lsls	r2, r2, #2
 80091bc:	300c      	adds	r0, #12
 80091be:	f002 f915 	bl	800b3ec <memcpy>
 80091c2:	2201      	movs	r2, #1
 80091c4:	4631      	mov	r1, r6
 80091c6:	4648      	mov	r0, r9
 80091c8:	f000 fc44 	bl	8009a54 <__lshift>
 80091cc:	462f      	mov	r7, r5
 80091ce:	4605      	mov	r5, r0
 80091d0:	f10a 0301 	add.w	r3, sl, #1
 80091d4:	9304      	str	r3, [sp, #16]
 80091d6:	eb0a 030b 	add.w	r3, sl, fp
 80091da:	930a      	str	r3, [sp, #40]	@ 0x28
 80091dc:	9b06      	ldr	r3, [sp, #24]
 80091de:	f003 0301 	and.w	r3, r3, #1
 80091e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80091e4:	9b04      	ldr	r3, [sp, #16]
 80091e6:	4621      	mov	r1, r4
 80091e8:	9803      	ldr	r0, [sp, #12]
 80091ea:	f103 3bff 	add.w	fp, r3, #4294967295
 80091ee:	f7ff fa87 	bl	8008700 <quorem>
 80091f2:	4603      	mov	r3, r0
 80091f4:	4639      	mov	r1, r7
 80091f6:	3330      	adds	r3, #48	@ 0x30
 80091f8:	9006      	str	r0, [sp, #24]
 80091fa:	9803      	ldr	r0, [sp, #12]
 80091fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80091fe:	f000 fc95 	bl	8009b2c <__mcmp>
 8009202:	462a      	mov	r2, r5
 8009204:	9008      	str	r0, [sp, #32]
 8009206:	4621      	mov	r1, r4
 8009208:	4648      	mov	r0, r9
 800920a:	f000 fcab 	bl	8009b64 <__mdiff>
 800920e:	68c2      	ldr	r2, [r0, #12]
 8009210:	4606      	mov	r6, r0
 8009212:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009214:	bb02      	cbnz	r2, 8009258 <_dtoa_r+0xa48>
 8009216:	4601      	mov	r1, r0
 8009218:	9803      	ldr	r0, [sp, #12]
 800921a:	f000 fc87 	bl	8009b2c <__mcmp>
 800921e:	4602      	mov	r2, r0
 8009220:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009222:	4631      	mov	r1, r6
 8009224:	4648      	mov	r0, r9
 8009226:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800922a:	f000 fa03 	bl	8009634 <_Bfree>
 800922e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009230:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009232:	9e04      	ldr	r6, [sp, #16]
 8009234:	ea42 0103 	orr.w	r1, r2, r3
 8009238:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800923a:	4319      	orrs	r1, r3
 800923c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800923e:	d10d      	bne.n	800925c <_dtoa_r+0xa4c>
 8009240:	2b39      	cmp	r3, #57	@ 0x39
 8009242:	d027      	beq.n	8009294 <_dtoa_r+0xa84>
 8009244:	9a08      	ldr	r2, [sp, #32]
 8009246:	2a00      	cmp	r2, #0
 8009248:	dd01      	ble.n	800924e <_dtoa_r+0xa3e>
 800924a:	9b06      	ldr	r3, [sp, #24]
 800924c:	3331      	adds	r3, #49	@ 0x31
 800924e:	f88b 3000 	strb.w	r3, [fp]
 8009252:	e52e      	b.n	8008cb2 <_dtoa_r+0x4a2>
 8009254:	4628      	mov	r0, r5
 8009256:	e7b9      	b.n	80091cc <_dtoa_r+0x9bc>
 8009258:	2201      	movs	r2, #1
 800925a:	e7e2      	b.n	8009222 <_dtoa_r+0xa12>
 800925c:	9908      	ldr	r1, [sp, #32]
 800925e:	2900      	cmp	r1, #0
 8009260:	db04      	blt.n	800926c <_dtoa_r+0xa5c>
 8009262:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8009264:	4301      	orrs	r1, r0
 8009266:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009268:	4301      	orrs	r1, r0
 800926a:	d120      	bne.n	80092ae <_dtoa_r+0xa9e>
 800926c:	2a00      	cmp	r2, #0
 800926e:	ddee      	ble.n	800924e <_dtoa_r+0xa3e>
 8009270:	2201      	movs	r2, #1
 8009272:	9903      	ldr	r1, [sp, #12]
 8009274:	4648      	mov	r0, r9
 8009276:	9304      	str	r3, [sp, #16]
 8009278:	f000 fbec 	bl	8009a54 <__lshift>
 800927c:	4621      	mov	r1, r4
 800927e:	9003      	str	r0, [sp, #12]
 8009280:	f000 fc54 	bl	8009b2c <__mcmp>
 8009284:	2800      	cmp	r0, #0
 8009286:	9b04      	ldr	r3, [sp, #16]
 8009288:	dc02      	bgt.n	8009290 <_dtoa_r+0xa80>
 800928a:	d1e0      	bne.n	800924e <_dtoa_r+0xa3e>
 800928c:	07da      	lsls	r2, r3, #31
 800928e:	d5de      	bpl.n	800924e <_dtoa_r+0xa3e>
 8009290:	2b39      	cmp	r3, #57	@ 0x39
 8009292:	d1da      	bne.n	800924a <_dtoa_r+0xa3a>
 8009294:	2339      	movs	r3, #57	@ 0x39
 8009296:	f88b 3000 	strb.w	r3, [fp]
 800929a:	4633      	mov	r3, r6
 800929c:	461e      	mov	r6, r3
 800929e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80092a2:	3b01      	subs	r3, #1
 80092a4:	2a39      	cmp	r2, #57	@ 0x39
 80092a6:	d04e      	beq.n	8009346 <_dtoa_r+0xb36>
 80092a8:	3201      	adds	r2, #1
 80092aa:	701a      	strb	r2, [r3, #0]
 80092ac:	e501      	b.n	8008cb2 <_dtoa_r+0x4a2>
 80092ae:	2a00      	cmp	r2, #0
 80092b0:	dd03      	ble.n	80092ba <_dtoa_r+0xaaa>
 80092b2:	2b39      	cmp	r3, #57	@ 0x39
 80092b4:	d0ee      	beq.n	8009294 <_dtoa_r+0xa84>
 80092b6:	3301      	adds	r3, #1
 80092b8:	e7c9      	b.n	800924e <_dtoa_r+0xa3e>
 80092ba:	9a04      	ldr	r2, [sp, #16]
 80092bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80092be:	f802 3c01 	strb.w	r3, [r2, #-1]
 80092c2:	428a      	cmp	r2, r1
 80092c4:	d028      	beq.n	8009318 <_dtoa_r+0xb08>
 80092c6:	2300      	movs	r3, #0
 80092c8:	220a      	movs	r2, #10
 80092ca:	9903      	ldr	r1, [sp, #12]
 80092cc:	4648      	mov	r0, r9
 80092ce:	f000 f9d3 	bl	8009678 <__multadd>
 80092d2:	42af      	cmp	r7, r5
 80092d4:	9003      	str	r0, [sp, #12]
 80092d6:	f04f 0300 	mov.w	r3, #0
 80092da:	f04f 020a 	mov.w	r2, #10
 80092de:	4639      	mov	r1, r7
 80092e0:	4648      	mov	r0, r9
 80092e2:	d107      	bne.n	80092f4 <_dtoa_r+0xae4>
 80092e4:	f000 f9c8 	bl	8009678 <__multadd>
 80092e8:	4607      	mov	r7, r0
 80092ea:	4605      	mov	r5, r0
 80092ec:	9b04      	ldr	r3, [sp, #16]
 80092ee:	3301      	adds	r3, #1
 80092f0:	9304      	str	r3, [sp, #16]
 80092f2:	e777      	b.n	80091e4 <_dtoa_r+0x9d4>
 80092f4:	f000 f9c0 	bl	8009678 <__multadd>
 80092f8:	4629      	mov	r1, r5
 80092fa:	4607      	mov	r7, r0
 80092fc:	2300      	movs	r3, #0
 80092fe:	220a      	movs	r2, #10
 8009300:	4648      	mov	r0, r9
 8009302:	f000 f9b9 	bl	8009678 <__multadd>
 8009306:	4605      	mov	r5, r0
 8009308:	e7f0      	b.n	80092ec <_dtoa_r+0xadc>
 800930a:	f1bb 0f00 	cmp.w	fp, #0
 800930e:	bfcc      	ite	gt
 8009310:	465e      	movgt	r6, fp
 8009312:	2601      	movle	r6, #1
 8009314:	2700      	movs	r7, #0
 8009316:	4456      	add	r6, sl
 8009318:	2201      	movs	r2, #1
 800931a:	9903      	ldr	r1, [sp, #12]
 800931c:	4648      	mov	r0, r9
 800931e:	9304      	str	r3, [sp, #16]
 8009320:	f000 fb98 	bl	8009a54 <__lshift>
 8009324:	4621      	mov	r1, r4
 8009326:	9003      	str	r0, [sp, #12]
 8009328:	f000 fc00 	bl	8009b2c <__mcmp>
 800932c:	2800      	cmp	r0, #0
 800932e:	dcb4      	bgt.n	800929a <_dtoa_r+0xa8a>
 8009330:	d102      	bne.n	8009338 <_dtoa_r+0xb28>
 8009332:	9b04      	ldr	r3, [sp, #16]
 8009334:	07db      	lsls	r3, r3, #31
 8009336:	d4b0      	bmi.n	800929a <_dtoa_r+0xa8a>
 8009338:	4633      	mov	r3, r6
 800933a:	461e      	mov	r6, r3
 800933c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009340:	2a30      	cmp	r2, #48	@ 0x30
 8009342:	d0fa      	beq.n	800933a <_dtoa_r+0xb2a>
 8009344:	e4b5      	b.n	8008cb2 <_dtoa_r+0x4a2>
 8009346:	459a      	cmp	sl, r3
 8009348:	d1a8      	bne.n	800929c <_dtoa_r+0xa8c>
 800934a:	2331      	movs	r3, #49	@ 0x31
 800934c:	f108 0801 	add.w	r8, r8, #1
 8009350:	f88a 3000 	strb.w	r3, [sl]
 8009354:	e4ad      	b.n	8008cb2 <_dtoa_r+0x4a2>
 8009356:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009358:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80093b4 <_dtoa_r+0xba4>
 800935c:	b11b      	cbz	r3, 8009366 <_dtoa_r+0xb56>
 800935e:	f10a 0308 	add.w	r3, sl, #8
 8009362:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009364:	6013      	str	r3, [r2, #0]
 8009366:	4650      	mov	r0, sl
 8009368:	b017      	add	sp, #92	@ 0x5c
 800936a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800936e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009370:	2b01      	cmp	r3, #1
 8009372:	f77f ae2e 	ble.w	8008fd2 <_dtoa_r+0x7c2>
 8009376:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009378:	930a      	str	r3, [sp, #40]	@ 0x28
 800937a:	2001      	movs	r0, #1
 800937c:	e64d      	b.n	800901a <_dtoa_r+0x80a>
 800937e:	f1bb 0f00 	cmp.w	fp, #0
 8009382:	f77f aed9 	ble.w	8009138 <_dtoa_r+0x928>
 8009386:	4656      	mov	r6, sl
 8009388:	4621      	mov	r1, r4
 800938a:	9803      	ldr	r0, [sp, #12]
 800938c:	f7ff f9b8 	bl	8008700 <quorem>
 8009390:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009394:	f806 3b01 	strb.w	r3, [r6], #1
 8009398:	eba6 020a 	sub.w	r2, r6, sl
 800939c:	4593      	cmp	fp, r2
 800939e:	ddb4      	ble.n	800930a <_dtoa_r+0xafa>
 80093a0:	2300      	movs	r3, #0
 80093a2:	220a      	movs	r2, #10
 80093a4:	4648      	mov	r0, r9
 80093a6:	9903      	ldr	r1, [sp, #12]
 80093a8:	f000 f966 	bl	8009678 <__multadd>
 80093ac:	9003      	str	r0, [sp, #12]
 80093ae:	e7eb      	b.n	8009388 <_dtoa_r+0xb78>
 80093b0:	080177ad 	.word	0x080177ad
 80093b4:	08017731 	.word	0x08017731

080093b8 <_free_r>:
 80093b8:	b538      	push	{r3, r4, r5, lr}
 80093ba:	4605      	mov	r5, r0
 80093bc:	2900      	cmp	r1, #0
 80093be:	d040      	beq.n	8009442 <_free_r+0x8a>
 80093c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093c4:	1f0c      	subs	r4, r1, #4
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	bfb8      	it	lt
 80093ca:	18e4      	addlt	r4, r4, r3
 80093cc:	f000 f8e6 	bl	800959c <__malloc_lock>
 80093d0:	4a1c      	ldr	r2, [pc, #112]	@ (8009444 <_free_r+0x8c>)
 80093d2:	6813      	ldr	r3, [r2, #0]
 80093d4:	b933      	cbnz	r3, 80093e4 <_free_r+0x2c>
 80093d6:	6063      	str	r3, [r4, #4]
 80093d8:	6014      	str	r4, [r2, #0]
 80093da:	4628      	mov	r0, r5
 80093dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093e0:	f000 b8e2 	b.w	80095a8 <__malloc_unlock>
 80093e4:	42a3      	cmp	r3, r4
 80093e6:	d908      	bls.n	80093fa <_free_r+0x42>
 80093e8:	6820      	ldr	r0, [r4, #0]
 80093ea:	1821      	adds	r1, r4, r0
 80093ec:	428b      	cmp	r3, r1
 80093ee:	bf01      	itttt	eq
 80093f0:	6819      	ldreq	r1, [r3, #0]
 80093f2:	685b      	ldreq	r3, [r3, #4]
 80093f4:	1809      	addeq	r1, r1, r0
 80093f6:	6021      	streq	r1, [r4, #0]
 80093f8:	e7ed      	b.n	80093d6 <_free_r+0x1e>
 80093fa:	461a      	mov	r2, r3
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	b10b      	cbz	r3, 8009404 <_free_r+0x4c>
 8009400:	42a3      	cmp	r3, r4
 8009402:	d9fa      	bls.n	80093fa <_free_r+0x42>
 8009404:	6811      	ldr	r1, [r2, #0]
 8009406:	1850      	adds	r0, r2, r1
 8009408:	42a0      	cmp	r0, r4
 800940a:	d10b      	bne.n	8009424 <_free_r+0x6c>
 800940c:	6820      	ldr	r0, [r4, #0]
 800940e:	4401      	add	r1, r0
 8009410:	1850      	adds	r0, r2, r1
 8009412:	4283      	cmp	r3, r0
 8009414:	6011      	str	r1, [r2, #0]
 8009416:	d1e0      	bne.n	80093da <_free_r+0x22>
 8009418:	6818      	ldr	r0, [r3, #0]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	4408      	add	r0, r1
 800941e:	6010      	str	r0, [r2, #0]
 8009420:	6053      	str	r3, [r2, #4]
 8009422:	e7da      	b.n	80093da <_free_r+0x22>
 8009424:	d902      	bls.n	800942c <_free_r+0x74>
 8009426:	230c      	movs	r3, #12
 8009428:	602b      	str	r3, [r5, #0]
 800942a:	e7d6      	b.n	80093da <_free_r+0x22>
 800942c:	6820      	ldr	r0, [r4, #0]
 800942e:	1821      	adds	r1, r4, r0
 8009430:	428b      	cmp	r3, r1
 8009432:	bf01      	itttt	eq
 8009434:	6819      	ldreq	r1, [r3, #0]
 8009436:	685b      	ldreq	r3, [r3, #4]
 8009438:	1809      	addeq	r1, r1, r0
 800943a:	6021      	streq	r1, [r4, #0]
 800943c:	6063      	str	r3, [r4, #4]
 800943e:	6054      	str	r4, [r2, #4]
 8009440:	e7cb      	b.n	80093da <_free_r+0x22>
 8009442:	bd38      	pop	{r3, r4, r5, pc}
 8009444:	20001184 	.word	0x20001184

08009448 <malloc>:
 8009448:	4b02      	ldr	r3, [pc, #8]	@ (8009454 <malloc+0xc>)
 800944a:	4601      	mov	r1, r0
 800944c:	6818      	ldr	r0, [r3, #0]
 800944e:	f000 b825 	b.w	800949c <_malloc_r>
 8009452:	bf00      	nop
 8009454:	20000034 	.word	0x20000034

08009458 <sbrk_aligned>:
 8009458:	b570      	push	{r4, r5, r6, lr}
 800945a:	4e0f      	ldr	r6, [pc, #60]	@ (8009498 <sbrk_aligned+0x40>)
 800945c:	460c      	mov	r4, r1
 800945e:	6831      	ldr	r1, [r6, #0]
 8009460:	4605      	mov	r5, r0
 8009462:	b911      	cbnz	r1, 800946a <sbrk_aligned+0x12>
 8009464:	f001 ffb2 	bl	800b3cc <_sbrk_r>
 8009468:	6030      	str	r0, [r6, #0]
 800946a:	4621      	mov	r1, r4
 800946c:	4628      	mov	r0, r5
 800946e:	f001 ffad 	bl	800b3cc <_sbrk_r>
 8009472:	1c43      	adds	r3, r0, #1
 8009474:	d103      	bne.n	800947e <sbrk_aligned+0x26>
 8009476:	f04f 34ff 	mov.w	r4, #4294967295
 800947a:	4620      	mov	r0, r4
 800947c:	bd70      	pop	{r4, r5, r6, pc}
 800947e:	1cc4      	adds	r4, r0, #3
 8009480:	f024 0403 	bic.w	r4, r4, #3
 8009484:	42a0      	cmp	r0, r4
 8009486:	d0f8      	beq.n	800947a <sbrk_aligned+0x22>
 8009488:	1a21      	subs	r1, r4, r0
 800948a:	4628      	mov	r0, r5
 800948c:	f001 ff9e 	bl	800b3cc <_sbrk_r>
 8009490:	3001      	adds	r0, #1
 8009492:	d1f2      	bne.n	800947a <sbrk_aligned+0x22>
 8009494:	e7ef      	b.n	8009476 <sbrk_aligned+0x1e>
 8009496:	bf00      	nop
 8009498:	20001180 	.word	0x20001180

0800949c <_malloc_r>:
 800949c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094a0:	1ccd      	adds	r5, r1, #3
 80094a2:	f025 0503 	bic.w	r5, r5, #3
 80094a6:	3508      	adds	r5, #8
 80094a8:	2d0c      	cmp	r5, #12
 80094aa:	bf38      	it	cc
 80094ac:	250c      	movcc	r5, #12
 80094ae:	2d00      	cmp	r5, #0
 80094b0:	4606      	mov	r6, r0
 80094b2:	db01      	blt.n	80094b8 <_malloc_r+0x1c>
 80094b4:	42a9      	cmp	r1, r5
 80094b6:	d904      	bls.n	80094c2 <_malloc_r+0x26>
 80094b8:	230c      	movs	r3, #12
 80094ba:	6033      	str	r3, [r6, #0]
 80094bc:	2000      	movs	r0, #0
 80094be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009598 <_malloc_r+0xfc>
 80094c6:	f000 f869 	bl	800959c <__malloc_lock>
 80094ca:	f8d8 3000 	ldr.w	r3, [r8]
 80094ce:	461c      	mov	r4, r3
 80094d0:	bb44      	cbnz	r4, 8009524 <_malloc_r+0x88>
 80094d2:	4629      	mov	r1, r5
 80094d4:	4630      	mov	r0, r6
 80094d6:	f7ff ffbf 	bl	8009458 <sbrk_aligned>
 80094da:	1c43      	adds	r3, r0, #1
 80094dc:	4604      	mov	r4, r0
 80094de:	d158      	bne.n	8009592 <_malloc_r+0xf6>
 80094e0:	f8d8 4000 	ldr.w	r4, [r8]
 80094e4:	4627      	mov	r7, r4
 80094e6:	2f00      	cmp	r7, #0
 80094e8:	d143      	bne.n	8009572 <_malloc_r+0xd6>
 80094ea:	2c00      	cmp	r4, #0
 80094ec:	d04b      	beq.n	8009586 <_malloc_r+0xea>
 80094ee:	6823      	ldr	r3, [r4, #0]
 80094f0:	4639      	mov	r1, r7
 80094f2:	4630      	mov	r0, r6
 80094f4:	eb04 0903 	add.w	r9, r4, r3
 80094f8:	f001 ff68 	bl	800b3cc <_sbrk_r>
 80094fc:	4581      	cmp	r9, r0
 80094fe:	d142      	bne.n	8009586 <_malloc_r+0xea>
 8009500:	6821      	ldr	r1, [r4, #0]
 8009502:	4630      	mov	r0, r6
 8009504:	1a6d      	subs	r5, r5, r1
 8009506:	4629      	mov	r1, r5
 8009508:	f7ff ffa6 	bl	8009458 <sbrk_aligned>
 800950c:	3001      	adds	r0, #1
 800950e:	d03a      	beq.n	8009586 <_malloc_r+0xea>
 8009510:	6823      	ldr	r3, [r4, #0]
 8009512:	442b      	add	r3, r5
 8009514:	6023      	str	r3, [r4, #0]
 8009516:	f8d8 3000 	ldr.w	r3, [r8]
 800951a:	685a      	ldr	r2, [r3, #4]
 800951c:	bb62      	cbnz	r2, 8009578 <_malloc_r+0xdc>
 800951e:	f8c8 7000 	str.w	r7, [r8]
 8009522:	e00f      	b.n	8009544 <_malloc_r+0xa8>
 8009524:	6822      	ldr	r2, [r4, #0]
 8009526:	1b52      	subs	r2, r2, r5
 8009528:	d420      	bmi.n	800956c <_malloc_r+0xd0>
 800952a:	2a0b      	cmp	r2, #11
 800952c:	d917      	bls.n	800955e <_malloc_r+0xc2>
 800952e:	1961      	adds	r1, r4, r5
 8009530:	42a3      	cmp	r3, r4
 8009532:	6025      	str	r5, [r4, #0]
 8009534:	bf18      	it	ne
 8009536:	6059      	strne	r1, [r3, #4]
 8009538:	6863      	ldr	r3, [r4, #4]
 800953a:	bf08      	it	eq
 800953c:	f8c8 1000 	streq.w	r1, [r8]
 8009540:	5162      	str	r2, [r4, r5]
 8009542:	604b      	str	r3, [r1, #4]
 8009544:	4630      	mov	r0, r6
 8009546:	f000 f82f 	bl	80095a8 <__malloc_unlock>
 800954a:	f104 000b 	add.w	r0, r4, #11
 800954e:	1d23      	adds	r3, r4, #4
 8009550:	f020 0007 	bic.w	r0, r0, #7
 8009554:	1ac2      	subs	r2, r0, r3
 8009556:	bf1c      	itt	ne
 8009558:	1a1b      	subne	r3, r3, r0
 800955a:	50a3      	strne	r3, [r4, r2]
 800955c:	e7af      	b.n	80094be <_malloc_r+0x22>
 800955e:	6862      	ldr	r2, [r4, #4]
 8009560:	42a3      	cmp	r3, r4
 8009562:	bf0c      	ite	eq
 8009564:	f8c8 2000 	streq.w	r2, [r8]
 8009568:	605a      	strne	r2, [r3, #4]
 800956a:	e7eb      	b.n	8009544 <_malloc_r+0xa8>
 800956c:	4623      	mov	r3, r4
 800956e:	6864      	ldr	r4, [r4, #4]
 8009570:	e7ae      	b.n	80094d0 <_malloc_r+0x34>
 8009572:	463c      	mov	r4, r7
 8009574:	687f      	ldr	r7, [r7, #4]
 8009576:	e7b6      	b.n	80094e6 <_malloc_r+0x4a>
 8009578:	461a      	mov	r2, r3
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	42a3      	cmp	r3, r4
 800957e:	d1fb      	bne.n	8009578 <_malloc_r+0xdc>
 8009580:	2300      	movs	r3, #0
 8009582:	6053      	str	r3, [r2, #4]
 8009584:	e7de      	b.n	8009544 <_malloc_r+0xa8>
 8009586:	230c      	movs	r3, #12
 8009588:	4630      	mov	r0, r6
 800958a:	6033      	str	r3, [r6, #0]
 800958c:	f000 f80c 	bl	80095a8 <__malloc_unlock>
 8009590:	e794      	b.n	80094bc <_malloc_r+0x20>
 8009592:	6005      	str	r5, [r0, #0]
 8009594:	e7d6      	b.n	8009544 <_malloc_r+0xa8>
 8009596:	bf00      	nop
 8009598:	20001184 	.word	0x20001184

0800959c <__malloc_lock>:
 800959c:	4801      	ldr	r0, [pc, #4]	@ (80095a4 <__malloc_lock+0x8>)
 800959e:	f7ff b89a 	b.w	80086d6 <__retarget_lock_acquire_recursive>
 80095a2:	bf00      	nop
 80095a4:	2000117c 	.word	0x2000117c

080095a8 <__malloc_unlock>:
 80095a8:	4801      	ldr	r0, [pc, #4]	@ (80095b0 <__malloc_unlock+0x8>)
 80095aa:	f7ff b895 	b.w	80086d8 <__retarget_lock_release_recursive>
 80095ae:	bf00      	nop
 80095b0:	2000117c 	.word	0x2000117c

080095b4 <_Balloc>:
 80095b4:	b570      	push	{r4, r5, r6, lr}
 80095b6:	69c6      	ldr	r6, [r0, #28]
 80095b8:	4604      	mov	r4, r0
 80095ba:	460d      	mov	r5, r1
 80095bc:	b976      	cbnz	r6, 80095dc <_Balloc+0x28>
 80095be:	2010      	movs	r0, #16
 80095c0:	f7ff ff42 	bl	8009448 <malloc>
 80095c4:	4602      	mov	r2, r0
 80095c6:	61e0      	str	r0, [r4, #28]
 80095c8:	b920      	cbnz	r0, 80095d4 <_Balloc+0x20>
 80095ca:	216b      	movs	r1, #107	@ 0x6b
 80095cc:	4b17      	ldr	r3, [pc, #92]	@ (800962c <_Balloc+0x78>)
 80095ce:	4818      	ldr	r0, [pc, #96]	@ (8009630 <_Balloc+0x7c>)
 80095d0:	f001 ff20 	bl	800b414 <__assert_func>
 80095d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095d8:	6006      	str	r6, [r0, #0]
 80095da:	60c6      	str	r6, [r0, #12]
 80095dc:	69e6      	ldr	r6, [r4, #28]
 80095de:	68f3      	ldr	r3, [r6, #12]
 80095e0:	b183      	cbz	r3, 8009604 <_Balloc+0x50>
 80095e2:	69e3      	ldr	r3, [r4, #28]
 80095e4:	68db      	ldr	r3, [r3, #12]
 80095e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80095ea:	b9b8      	cbnz	r0, 800961c <_Balloc+0x68>
 80095ec:	2101      	movs	r1, #1
 80095ee:	fa01 f605 	lsl.w	r6, r1, r5
 80095f2:	1d72      	adds	r2, r6, #5
 80095f4:	4620      	mov	r0, r4
 80095f6:	0092      	lsls	r2, r2, #2
 80095f8:	f001 ff2a 	bl	800b450 <_calloc_r>
 80095fc:	b160      	cbz	r0, 8009618 <_Balloc+0x64>
 80095fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009602:	e00e      	b.n	8009622 <_Balloc+0x6e>
 8009604:	2221      	movs	r2, #33	@ 0x21
 8009606:	2104      	movs	r1, #4
 8009608:	4620      	mov	r0, r4
 800960a:	f001 ff21 	bl	800b450 <_calloc_r>
 800960e:	69e3      	ldr	r3, [r4, #28]
 8009610:	60f0      	str	r0, [r6, #12]
 8009612:	68db      	ldr	r3, [r3, #12]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d1e4      	bne.n	80095e2 <_Balloc+0x2e>
 8009618:	2000      	movs	r0, #0
 800961a:	bd70      	pop	{r4, r5, r6, pc}
 800961c:	6802      	ldr	r2, [r0, #0]
 800961e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009622:	2300      	movs	r3, #0
 8009624:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009628:	e7f7      	b.n	800961a <_Balloc+0x66>
 800962a:	bf00      	nop
 800962c:	0801773e 	.word	0x0801773e
 8009630:	080177be 	.word	0x080177be

08009634 <_Bfree>:
 8009634:	b570      	push	{r4, r5, r6, lr}
 8009636:	69c6      	ldr	r6, [r0, #28]
 8009638:	4605      	mov	r5, r0
 800963a:	460c      	mov	r4, r1
 800963c:	b976      	cbnz	r6, 800965c <_Bfree+0x28>
 800963e:	2010      	movs	r0, #16
 8009640:	f7ff ff02 	bl	8009448 <malloc>
 8009644:	4602      	mov	r2, r0
 8009646:	61e8      	str	r0, [r5, #28]
 8009648:	b920      	cbnz	r0, 8009654 <_Bfree+0x20>
 800964a:	218f      	movs	r1, #143	@ 0x8f
 800964c:	4b08      	ldr	r3, [pc, #32]	@ (8009670 <_Bfree+0x3c>)
 800964e:	4809      	ldr	r0, [pc, #36]	@ (8009674 <_Bfree+0x40>)
 8009650:	f001 fee0 	bl	800b414 <__assert_func>
 8009654:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009658:	6006      	str	r6, [r0, #0]
 800965a:	60c6      	str	r6, [r0, #12]
 800965c:	b13c      	cbz	r4, 800966e <_Bfree+0x3a>
 800965e:	69eb      	ldr	r3, [r5, #28]
 8009660:	6862      	ldr	r2, [r4, #4]
 8009662:	68db      	ldr	r3, [r3, #12]
 8009664:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009668:	6021      	str	r1, [r4, #0]
 800966a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800966e:	bd70      	pop	{r4, r5, r6, pc}
 8009670:	0801773e 	.word	0x0801773e
 8009674:	080177be 	.word	0x080177be

08009678 <__multadd>:
 8009678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800967c:	4607      	mov	r7, r0
 800967e:	460c      	mov	r4, r1
 8009680:	461e      	mov	r6, r3
 8009682:	2000      	movs	r0, #0
 8009684:	690d      	ldr	r5, [r1, #16]
 8009686:	f101 0c14 	add.w	ip, r1, #20
 800968a:	f8dc 3000 	ldr.w	r3, [ip]
 800968e:	3001      	adds	r0, #1
 8009690:	b299      	uxth	r1, r3
 8009692:	fb02 6101 	mla	r1, r2, r1, r6
 8009696:	0c1e      	lsrs	r6, r3, #16
 8009698:	0c0b      	lsrs	r3, r1, #16
 800969a:	fb02 3306 	mla	r3, r2, r6, r3
 800969e:	b289      	uxth	r1, r1
 80096a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80096a4:	4285      	cmp	r5, r0
 80096a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80096aa:	f84c 1b04 	str.w	r1, [ip], #4
 80096ae:	dcec      	bgt.n	800968a <__multadd+0x12>
 80096b0:	b30e      	cbz	r6, 80096f6 <__multadd+0x7e>
 80096b2:	68a3      	ldr	r3, [r4, #8]
 80096b4:	42ab      	cmp	r3, r5
 80096b6:	dc19      	bgt.n	80096ec <__multadd+0x74>
 80096b8:	6861      	ldr	r1, [r4, #4]
 80096ba:	4638      	mov	r0, r7
 80096bc:	3101      	adds	r1, #1
 80096be:	f7ff ff79 	bl	80095b4 <_Balloc>
 80096c2:	4680      	mov	r8, r0
 80096c4:	b928      	cbnz	r0, 80096d2 <__multadd+0x5a>
 80096c6:	4602      	mov	r2, r0
 80096c8:	21ba      	movs	r1, #186	@ 0xba
 80096ca:	4b0c      	ldr	r3, [pc, #48]	@ (80096fc <__multadd+0x84>)
 80096cc:	480c      	ldr	r0, [pc, #48]	@ (8009700 <__multadd+0x88>)
 80096ce:	f001 fea1 	bl	800b414 <__assert_func>
 80096d2:	6922      	ldr	r2, [r4, #16]
 80096d4:	f104 010c 	add.w	r1, r4, #12
 80096d8:	3202      	adds	r2, #2
 80096da:	0092      	lsls	r2, r2, #2
 80096dc:	300c      	adds	r0, #12
 80096de:	f001 fe85 	bl	800b3ec <memcpy>
 80096e2:	4621      	mov	r1, r4
 80096e4:	4638      	mov	r0, r7
 80096e6:	f7ff ffa5 	bl	8009634 <_Bfree>
 80096ea:	4644      	mov	r4, r8
 80096ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80096f0:	3501      	adds	r5, #1
 80096f2:	615e      	str	r6, [r3, #20]
 80096f4:	6125      	str	r5, [r4, #16]
 80096f6:	4620      	mov	r0, r4
 80096f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096fc:	080177ad 	.word	0x080177ad
 8009700:	080177be 	.word	0x080177be

08009704 <__s2b>:
 8009704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009708:	4615      	mov	r5, r2
 800970a:	2209      	movs	r2, #9
 800970c:	461f      	mov	r7, r3
 800970e:	3308      	adds	r3, #8
 8009710:	460c      	mov	r4, r1
 8009712:	fb93 f3f2 	sdiv	r3, r3, r2
 8009716:	4606      	mov	r6, r0
 8009718:	2201      	movs	r2, #1
 800971a:	2100      	movs	r1, #0
 800971c:	429a      	cmp	r2, r3
 800971e:	db09      	blt.n	8009734 <__s2b+0x30>
 8009720:	4630      	mov	r0, r6
 8009722:	f7ff ff47 	bl	80095b4 <_Balloc>
 8009726:	b940      	cbnz	r0, 800973a <__s2b+0x36>
 8009728:	4602      	mov	r2, r0
 800972a:	21d3      	movs	r1, #211	@ 0xd3
 800972c:	4b18      	ldr	r3, [pc, #96]	@ (8009790 <__s2b+0x8c>)
 800972e:	4819      	ldr	r0, [pc, #100]	@ (8009794 <__s2b+0x90>)
 8009730:	f001 fe70 	bl	800b414 <__assert_func>
 8009734:	0052      	lsls	r2, r2, #1
 8009736:	3101      	adds	r1, #1
 8009738:	e7f0      	b.n	800971c <__s2b+0x18>
 800973a:	9b08      	ldr	r3, [sp, #32]
 800973c:	2d09      	cmp	r5, #9
 800973e:	6143      	str	r3, [r0, #20]
 8009740:	f04f 0301 	mov.w	r3, #1
 8009744:	6103      	str	r3, [r0, #16]
 8009746:	dd16      	ble.n	8009776 <__s2b+0x72>
 8009748:	f104 0909 	add.w	r9, r4, #9
 800974c:	46c8      	mov	r8, r9
 800974e:	442c      	add	r4, r5
 8009750:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009754:	4601      	mov	r1, r0
 8009756:	220a      	movs	r2, #10
 8009758:	4630      	mov	r0, r6
 800975a:	3b30      	subs	r3, #48	@ 0x30
 800975c:	f7ff ff8c 	bl	8009678 <__multadd>
 8009760:	45a0      	cmp	r8, r4
 8009762:	d1f5      	bne.n	8009750 <__s2b+0x4c>
 8009764:	f1a5 0408 	sub.w	r4, r5, #8
 8009768:	444c      	add	r4, r9
 800976a:	1b2d      	subs	r5, r5, r4
 800976c:	1963      	adds	r3, r4, r5
 800976e:	42bb      	cmp	r3, r7
 8009770:	db04      	blt.n	800977c <__s2b+0x78>
 8009772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009776:	2509      	movs	r5, #9
 8009778:	340a      	adds	r4, #10
 800977a:	e7f6      	b.n	800976a <__s2b+0x66>
 800977c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009780:	4601      	mov	r1, r0
 8009782:	220a      	movs	r2, #10
 8009784:	4630      	mov	r0, r6
 8009786:	3b30      	subs	r3, #48	@ 0x30
 8009788:	f7ff ff76 	bl	8009678 <__multadd>
 800978c:	e7ee      	b.n	800976c <__s2b+0x68>
 800978e:	bf00      	nop
 8009790:	080177ad 	.word	0x080177ad
 8009794:	080177be 	.word	0x080177be

08009798 <__hi0bits>:
 8009798:	4603      	mov	r3, r0
 800979a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800979e:	bf3a      	itte	cc
 80097a0:	0403      	lslcc	r3, r0, #16
 80097a2:	2010      	movcc	r0, #16
 80097a4:	2000      	movcs	r0, #0
 80097a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80097aa:	bf3c      	itt	cc
 80097ac:	021b      	lslcc	r3, r3, #8
 80097ae:	3008      	addcc	r0, #8
 80097b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097b4:	bf3c      	itt	cc
 80097b6:	011b      	lslcc	r3, r3, #4
 80097b8:	3004      	addcc	r0, #4
 80097ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097be:	bf3c      	itt	cc
 80097c0:	009b      	lslcc	r3, r3, #2
 80097c2:	3002      	addcc	r0, #2
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	db05      	blt.n	80097d4 <__hi0bits+0x3c>
 80097c8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80097cc:	f100 0001 	add.w	r0, r0, #1
 80097d0:	bf08      	it	eq
 80097d2:	2020      	moveq	r0, #32
 80097d4:	4770      	bx	lr

080097d6 <__lo0bits>:
 80097d6:	6803      	ldr	r3, [r0, #0]
 80097d8:	4602      	mov	r2, r0
 80097da:	f013 0007 	ands.w	r0, r3, #7
 80097de:	d00b      	beq.n	80097f8 <__lo0bits+0x22>
 80097e0:	07d9      	lsls	r1, r3, #31
 80097e2:	d421      	bmi.n	8009828 <__lo0bits+0x52>
 80097e4:	0798      	lsls	r0, r3, #30
 80097e6:	bf49      	itett	mi
 80097e8:	085b      	lsrmi	r3, r3, #1
 80097ea:	089b      	lsrpl	r3, r3, #2
 80097ec:	2001      	movmi	r0, #1
 80097ee:	6013      	strmi	r3, [r2, #0]
 80097f0:	bf5c      	itt	pl
 80097f2:	2002      	movpl	r0, #2
 80097f4:	6013      	strpl	r3, [r2, #0]
 80097f6:	4770      	bx	lr
 80097f8:	b299      	uxth	r1, r3
 80097fa:	b909      	cbnz	r1, 8009800 <__lo0bits+0x2a>
 80097fc:	2010      	movs	r0, #16
 80097fe:	0c1b      	lsrs	r3, r3, #16
 8009800:	b2d9      	uxtb	r1, r3
 8009802:	b909      	cbnz	r1, 8009808 <__lo0bits+0x32>
 8009804:	3008      	adds	r0, #8
 8009806:	0a1b      	lsrs	r3, r3, #8
 8009808:	0719      	lsls	r1, r3, #28
 800980a:	bf04      	itt	eq
 800980c:	091b      	lsreq	r3, r3, #4
 800980e:	3004      	addeq	r0, #4
 8009810:	0799      	lsls	r1, r3, #30
 8009812:	bf04      	itt	eq
 8009814:	089b      	lsreq	r3, r3, #2
 8009816:	3002      	addeq	r0, #2
 8009818:	07d9      	lsls	r1, r3, #31
 800981a:	d403      	bmi.n	8009824 <__lo0bits+0x4e>
 800981c:	085b      	lsrs	r3, r3, #1
 800981e:	f100 0001 	add.w	r0, r0, #1
 8009822:	d003      	beq.n	800982c <__lo0bits+0x56>
 8009824:	6013      	str	r3, [r2, #0]
 8009826:	4770      	bx	lr
 8009828:	2000      	movs	r0, #0
 800982a:	4770      	bx	lr
 800982c:	2020      	movs	r0, #32
 800982e:	4770      	bx	lr

08009830 <__i2b>:
 8009830:	b510      	push	{r4, lr}
 8009832:	460c      	mov	r4, r1
 8009834:	2101      	movs	r1, #1
 8009836:	f7ff febd 	bl	80095b4 <_Balloc>
 800983a:	4602      	mov	r2, r0
 800983c:	b928      	cbnz	r0, 800984a <__i2b+0x1a>
 800983e:	f240 1145 	movw	r1, #325	@ 0x145
 8009842:	4b04      	ldr	r3, [pc, #16]	@ (8009854 <__i2b+0x24>)
 8009844:	4804      	ldr	r0, [pc, #16]	@ (8009858 <__i2b+0x28>)
 8009846:	f001 fde5 	bl	800b414 <__assert_func>
 800984a:	2301      	movs	r3, #1
 800984c:	6144      	str	r4, [r0, #20]
 800984e:	6103      	str	r3, [r0, #16]
 8009850:	bd10      	pop	{r4, pc}
 8009852:	bf00      	nop
 8009854:	080177ad 	.word	0x080177ad
 8009858:	080177be 	.word	0x080177be

0800985c <__multiply>:
 800985c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009860:	4617      	mov	r7, r2
 8009862:	690a      	ldr	r2, [r1, #16]
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	4689      	mov	r9, r1
 8009868:	429a      	cmp	r2, r3
 800986a:	bfa2      	ittt	ge
 800986c:	463b      	movge	r3, r7
 800986e:	460f      	movge	r7, r1
 8009870:	4699      	movge	r9, r3
 8009872:	693d      	ldr	r5, [r7, #16]
 8009874:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	6879      	ldr	r1, [r7, #4]
 800987c:	eb05 060a 	add.w	r6, r5, sl
 8009880:	42b3      	cmp	r3, r6
 8009882:	b085      	sub	sp, #20
 8009884:	bfb8      	it	lt
 8009886:	3101      	addlt	r1, #1
 8009888:	f7ff fe94 	bl	80095b4 <_Balloc>
 800988c:	b930      	cbnz	r0, 800989c <__multiply+0x40>
 800988e:	4602      	mov	r2, r0
 8009890:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009894:	4b40      	ldr	r3, [pc, #256]	@ (8009998 <__multiply+0x13c>)
 8009896:	4841      	ldr	r0, [pc, #260]	@ (800999c <__multiply+0x140>)
 8009898:	f001 fdbc 	bl	800b414 <__assert_func>
 800989c:	f100 0414 	add.w	r4, r0, #20
 80098a0:	4623      	mov	r3, r4
 80098a2:	2200      	movs	r2, #0
 80098a4:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80098a8:	4573      	cmp	r3, lr
 80098aa:	d320      	bcc.n	80098ee <__multiply+0x92>
 80098ac:	f107 0814 	add.w	r8, r7, #20
 80098b0:	f109 0114 	add.w	r1, r9, #20
 80098b4:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80098b8:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80098bc:	9302      	str	r3, [sp, #8]
 80098be:	1beb      	subs	r3, r5, r7
 80098c0:	3b15      	subs	r3, #21
 80098c2:	f023 0303 	bic.w	r3, r3, #3
 80098c6:	3304      	adds	r3, #4
 80098c8:	3715      	adds	r7, #21
 80098ca:	42bd      	cmp	r5, r7
 80098cc:	bf38      	it	cc
 80098ce:	2304      	movcc	r3, #4
 80098d0:	9301      	str	r3, [sp, #4]
 80098d2:	9b02      	ldr	r3, [sp, #8]
 80098d4:	9103      	str	r1, [sp, #12]
 80098d6:	428b      	cmp	r3, r1
 80098d8:	d80c      	bhi.n	80098f4 <__multiply+0x98>
 80098da:	2e00      	cmp	r6, #0
 80098dc:	dd03      	ble.n	80098e6 <__multiply+0x8a>
 80098de:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d055      	beq.n	8009992 <__multiply+0x136>
 80098e6:	6106      	str	r6, [r0, #16]
 80098e8:	b005      	add	sp, #20
 80098ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ee:	f843 2b04 	str.w	r2, [r3], #4
 80098f2:	e7d9      	b.n	80098a8 <__multiply+0x4c>
 80098f4:	f8b1 a000 	ldrh.w	sl, [r1]
 80098f8:	f1ba 0f00 	cmp.w	sl, #0
 80098fc:	d01f      	beq.n	800993e <__multiply+0xe2>
 80098fe:	46c4      	mov	ip, r8
 8009900:	46a1      	mov	r9, r4
 8009902:	2700      	movs	r7, #0
 8009904:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009908:	f8d9 3000 	ldr.w	r3, [r9]
 800990c:	fa1f fb82 	uxth.w	fp, r2
 8009910:	b29b      	uxth	r3, r3
 8009912:	fb0a 330b 	mla	r3, sl, fp, r3
 8009916:	443b      	add	r3, r7
 8009918:	f8d9 7000 	ldr.w	r7, [r9]
 800991c:	0c12      	lsrs	r2, r2, #16
 800991e:	0c3f      	lsrs	r7, r7, #16
 8009920:	fb0a 7202 	mla	r2, sl, r2, r7
 8009924:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009928:	b29b      	uxth	r3, r3
 800992a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800992e:	4565      	cmp	r5, ip
 8009930:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009934:	f849 3b04 	str.w	r3, [r9], #4
 8009938:	d8e4      	bhi.n	8009904 <__multiply+0xa8>
 800993a:	9b01      	ldr	r3, [sp, #4]
 800993c:	50e7      	str	r7, [r4, r3]
 800993e:	9b03      	ldr	r3, [sp, #12]
 8009940:	3104      	adds	r1, #4
 8009942:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009946:	f1b9 0f00 	cmp.w	r9, #0
 800994a:	d020      	beq.n	800998e <__multiply+0x132>
 800994c:	4647      	mov	r7, r8
 800994e:	46a4      	mov	ip, r4
 8009950:	f04f 0a00 	mov.w	sl, #0
 8009954:	6823      	ldr	r3, [r4, #0]
 8009956:	f8b7 b000 	ldrh.w	fp, [r7]
 800995a:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800995e:	b29b      	uxth	r3, r3
 8009960:	fb09 220b 	mla	r2, r9, fp, r2
 8009964:	4452      	add	r2, sl
 8009966:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800996a:	f84c 3b04 	str.w	r3, [ip], #4
 800996e:	f857 3b04 	ldr.w	r3, [r7], #4
 8009972:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009976:	f8bc 3000 	ldrh.w	r3, [ip]
 800997a:	42bd      	cmp	r5, r7
 800997c:	fb09 330a 	mla	r3, r9, sl, r3
 8009980:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009984:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009988:	d8e5      	bhi.n	8009956 <__multiply+0xfa>
 800998a:	9a01      	ldr	r2, [sp, #4]
 800998c:	50a3      	str	r3, [r4, r2]
 800998e:	3404      	adds	r4, #4
 8009990:	e79f      	b.n	80098d2 <__multiply+0x76>
 8009992:	3e01      	subs	r6, #1
 8009994:	e7a1      	b.n	80098da <__multiply+0x7e>
 8009996:	bf00      	nop
 8009998:	080177ad 	.word	0x080177ad
 800999c:	080177be 	.word	0x080177be

080099a0 <__pow5mult>:
 80099a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099a4:	4615      	mov	r5, r2
 80099a6:	f012 0203 	ands.w	r2, r2, #3
 80099aa:	4607      	mov	r7, r0
 80099ac:	460e      	mov	r6, r1
 80099ae:	d007      	beq.n	80099c0 <__pow5mult+0x20>
 80099b0:	4c25      	ldr	r4, [pc, #148]	@ (8009a48 <__pow5mult+0xa8>)
 80099b2:	3a01      	subs	r2, #1
 80099b4:	2300      	movs	r3, #0
 80099b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80099ba:	f7ff fe5d 	bl	8009678 <__multadd>
 80099be:	4606      	mov	r6, r0
 80099c0:	10ad      	asrs	r5, r5, #2
 80099c2:	d03d      	beq.n	8009a40 <__pow5mult+0xa0>
 80099c4:	69fc      	ldr	r4, [r7, #28]
 80099c6:	b97c      	cbnz	r4, 80099e8 <__pow5mult+0x48>
 80099c8:	2010      	movs	r0, #16
 80099ca:	f7ff fd3d 	bl	8009448 <malloc>
 80099ce:	4602      	mov	r2, r0
 80099d0:	61f8      	str	r0, [r7, #28]
 80099d2:	b928      	cbnz	r0, 80099e0 <__pow5mult+0x40>
 80099d4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80099d8:	4b1c      	ldr	r3, [pc, #112]	@ (8009a4c <__pow5mult+0xac>)
 80099da:	481d      	ldr	r0, [pc, #116]	@ (8009a50 <__pow5mult+0xb0>)
 80099dc:	f001 fd1a 	bl	800b414 <__assert_func>
 80099e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80099e4:	6004      	str	r4, [r0, #0]
 80099e6:	60c4      	str	r4, [r0, #12]
 80099e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80099ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80099f0:	b94c      	cbnz	r4, 8009a06 <__pow5mult+0x66>
 80099f2:	f240 2171 	movw	r1, #625	@ 0x271
 80099f6:	4638      	mov	r0, r7
 80099f8:	f7ff ff1a 	bl	8009830 <__i2b>
 80099fc:	2300      	movs	r3, #0
 80099fe:	4604      	mov	r4, r0
 8009a00:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a04:	6003      	str	r3, [r0, #0]
 8009a06:	f04f 0900 	mov.w	r9, #0
 8009a0a:	07eb      	lsls	r3, r5, #31
 8009a0c:	d50a      	bpl.n	8009a24 <__pow5mult+0x84>
 8009a0e:	4631      	mov	r1, r6
 8009a10:	4622      	mov	r2, r4
 8009a12:	4638      	mov	r0, r7
 8009a14:	f7ff ff22 	bl	800985c <__multiply>
 8009a18:	4680      	mov	r8, r0
 8009a1a:	4631      	mov	r1, r6
 8009a1c:	4638      	mov	r0, r7
 8009a1e:	f7ff fe09 	bl	8009634 <_Bfree>
 8009a22:	4646      	mov	r6, r8
 8009a24:	106d      	asrs	r5, r5, #1
 8009a26:	d00b      	beq.n	8009a40 <__pow5mult+0xa0>
 8009a28:	6820      	ldr	r0, [r4, #0]
 8009a2a:	b938      	cbnz	r0, 8009a3c <__pow5mult+0x9c>
 8009a2c:	4622      	mov	r2, r4
 8009a2e:	4621      	mov	r1, r4
 8009a30:	4638      	mov	r0, r7
 8009a32:	f7ff ff13 	bl	800985c <__multiply>
 8009a36:	6020      	str	r0, [r4, #0]
 8009a38:	f8c0 9000 	str.w	r9, [r0]
 8009a3c:	4604      	mov	r4, r0
 8009a3e:	e7e4      	b.n	8009a0a <__pow5mult+0x6a>
 8009a40:	4630      	mov	r0, r6
 8009a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a46:	bf00      	nop
 8009a48:	080178d0 	.word	0x080178d0
 8009a4c:	0801773e 	.word	0x0801773e
 8009a50:	080177be 	.word	0x080177be

08009a54 <__lshift>:
 8009a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a58:	460c      	mov	r4, r1
 8009a5a:	4607      	mov	r7, r0
 8009a5c:	4691      	mov	r9, r2
 8009a5e:	6923      	ldr	r3, [r4, #16]
 8009a60:	6849      	ldr	r1, [r1, #4]
 8009a62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009a66:	68a3      	ldr	r3, [r4, #8]
 8009a68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a6c:	f108 0601 	add.w	r6, r8, #1
 8009a70:	42b3      	cmp	r3, r6
 8009a72:	db0b      	blt.n	8009a8c <__lshift+0x38>
 8009a74:	4638      	mov	r0, r7
 8009a76:	f7ff fd9d 	bl	80095b4 <_Balloc>
 8009a7a:	4605      	mov	r5, r0
 8009a7c:	b948      	cbnz	r0, 8009a92 <__lshift+0x3e>
 8009a7e:	4602      	mov	r2, r0
 8009a80:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009a84:	4b27      	ldr	r3, [pc, #156]	@ (8009b24 <__lshift+0xd0>)
 8009a86:	4828      	ldr	r0, [pc, #160]	@ (8009b28 <__lshift+0xd4>)
 8009a88:	f001 fcc4 	bl	800b414 <__assert_func>
 8009a8c:	3101      	adds	r1, #1
 8009a8e:	005b      	lsls	r3, r3, #1
 8009a90:	e7ee      	b.n	8009a70 <__lshift+0x1c>
 8009a92:	2300      	movs	r3, #0
 8009a94:	f100 0114 	add.w	r1, r0, #20
 8009a98:	f100 0210 	add.w	r2, r0, #16
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	4553      	cmp	r3, sl
 8009aa0:	db33      	blt.n	8009b0a <__lshift+0xb6>
 8009aa2:	6920      	ldr	r0, [r4, #16]
 8009aa4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009aa8:	f104 0314 	add.w	r3, r4, #20
 8009aac:	f019 091f 	ands.w	r9, r9, #31
 8009ab0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ab4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009ab8:	d02b      	beq.n	8009b12 <__lshift+0xbe>
 8009aba:	468a      	mov	sl, r1
 8009abc:	2200      	movs	r2, #0
 8009abe:	f1c9 0e20 	rsb	lr, r9, #32
 8009ac2:	6818      	ldr	r0, [r3, #0]
 8009ac4:	fa00 f009 	lsl.w	r0, r0, r9
 8009ac8:	4310      	orrs	r0, r2
 8009aca:	f84a 0b04 	str.w	r0, [sl], #4
 8009ace:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ad2:	459c      	cmp	ip, r3
 8009ad4:	fa22 f20e 	lsr.w	r2, r2, lr
 8009ad8:	d8f3      	bhi.n	8009ac2 <__lshift+0x6e>
 8009ada:	ebac 0304 	sub.w	r3, ip, r4
 8009ade:	3b15      	subs	r3, #21
 8009ae0:	f023 0303 	bic.w	r3, r3, #3
 8009ae4:	3304      	adds	r3, #4
 8009ae6:	f104 0015 	add.w	r0, r4, #21
 8009aea:	4560      	cmp	r0, ip
 8009aec:	bf88      	it	hi
 8009aee:	2304      	movhi	r3, #4
 8009af0:	50ca      	str	r2, [r1, r3]
 8009af2:	b10a      	cbz	r2, 8009af8 <__lshift+0xa4>
 8009af4:	f108 0602 	add.w	r6, r8, #2
 8009af8:	3e01      	subs	r6, #1
 8009afa:	4638      	mov	r0, r7
 8009afc:	4621      	mov	r1, r4
 8009afe:	612e      	str	r6, [r5, #16]
 8009b00:	f7ff fd98 	bl	8009634 <_Bfree>
 8009b04:	4628      	mov	r0, r5
 8009b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b0e:	3301      	adds	r3, #1
 8009b10:	e7c5      	b.n	8009a9e <__lshift+0x4a>
 8009b12:	3904      	subs	r1, #4
 8009b14:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b18:	459c      	cmp	ip, r3
 8009b1a:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b1e:	d8f9      	bhi.n	8009b14 <__lshift+0xc0>
 8009b20:	e7ea      	b.n	8009af8 <__lshift+0xa4>
 8009b22:	bf00      	nop
 8009b24:	080177ad 	.word	0x080177ad
 8009b28:	080177be 	.word	0x080177be

08009b2c <__mcmp>:
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	690a      	ldr	r2, [r1, #16]
 8009b30:	6900      	ldr	r0, [r0, #16]
 8009b32:	b530      	push	{r4, r5, lr}
 8009b34:	1a80      	subs	r0, r0, r2
 8009b36:	d10e      	bne.n	8009b56 <__mcmp+0x2a>
 8009b38:	3314      	adds	r3, #20
 8009b3a:	3114      	adds	r1, #20
 8009b3c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009b40:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009b44:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009b48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009b4c:	4295      	cmp	r5, r2
 8009b4e:	d003      	beq.n	8009b58 <__mcmp+0x2c>
 8009b50:	d205      	bcs.n	8009b5e <__mcmp+0x32>
 8009b52:	f04f 30ff 	mov.w	r0, #4294967295
 8009b56:	bd30      	pop	{r4, r5, pc}
 8009b58:	42a3      	cmp	r3, r4
 8009b5a:	d3f3      	bcc.n	8009b44 <__mcmp+0x18>
 8009b5c:	e7fb      	b.n	8009b56 <__mcmp+0x2a>
 8009b5e:	2001      	movs	r0, #1
 8009b60:	e7f9      	b.n	8009b56 <__mcmp+0x2a>
	...

08009b64 <__mdiff>:
 8009b64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b68:	4689      	mov	r9, r1
 8009b6a:	4606      	mov	r6, r0
 8009b6c:	4611      	mov	r1, r2
 8009b6e:	4648      	mov	r0, r9
 8009b70:	4614      	mov	r4, r2
 8009b72:	f7ff ffdb 	bl	8009b2c <__mcmp>
 8009b76:	1e05      	subs	r5, r0, #0
 8009b78:	d112      	bne.n	8009ba0 <__mdiff+0x3c>
 8009b7a:	4629      	mov	r1, r5
 8009b7c:	4630      	mov	r0, r6
 8009b7e:	f7ff fd19 	bl	80095b4 <_Balloc>
 8009b82:	4602      	mov	r2, r0
 8009b84:	b928      	cbnz	r0, 8009b92 <__mdiff+0x2e>
 8009b86:	f240 2137 	movw	r1, #567	@ 0x237
 8009b8a:	4b3e      	ldr	r3, [pc, #248]	@ (8009c84 <__mdiff+0x120>)
 8009b8c:	483e      	ldr	r0, [pc, #248]	@ (8009c88 <__mdiff+0x124>)
 8009b8e:	f001 fc41 	bl	800b414 <__assert_func>
 8009b92:	2301      	movs	r3, #1
 8009b94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009b98:	4610      	mov	r0, r2
 8009b9a:	b003      	add	sp, #12
 8009b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ba0:	bfbc      	itt	lt
 8009ba2:	464b      	movlt	r3, r9
 8009ba4:	46a1      	movlt	r9, r4
 8009ba6:	4630      	mov	r0, r6
 8009ba8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009bac:	bfba      	itte	lt
 8009bae:	461c      	movlt	r4, r3
 8009bb0:	2501      	movlt	r5, #1
 8009bb2:	2500      	movge	r5, #0
 8009bb4:	f7ff fcfe 	bl	80095b4 <_Balloc>
 8009bb8:	4602      	mov	r2, r0
 8009bba:	b918      	cbnz	r0, 8009bc4 <__mdiff+0x60>
 8009bbc:	f240 2145 	movw	r1, #581	@ 0x245
 8009bc0:	4b30      	ldr	r3, [pc, #192]	@ (8009c84 <__mdiff+0x120>)
 8009bc2:	e7e3      	b.n	8009b8c <__mdiff+0x28>
 8009bc4:	f100 0b14 	add.w	fp, r0, #20
 8009bc8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009bcc:	f109 0310 	add.w	r3, r9, #16
 8009bd0:	60c5      	str	r5, [r0, #12]
 8009bd2:	f04f 0c00 	mov.w	ip, #0
 8009bd6:	f109 0514 	add.w	r5, r9, #20
 8009bda:	46d9      	mov	r9, fp
 8009bdc:	6926      	ldr	r6, [r4, #16]
 8009bde:	f104 0e14 	add.w	lr, r4, #20
 8009be2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009be6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009bea:	9301      	str	r3, [sp, #4]
 8009bec:	9b01      	ldr	r3, [sp, #4]
 8009bee:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009bf2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009bf6:	b281      	uxth	r1, r0
 8009bf8:	9301      	str	r3, [sp, #4]
 8009bfa:	fa1f f38a 	uxth.w	r3, sl
 8009bfe:	1a5b      	subs	r3, r3, r1
 8009c00:	0c00      	lsrs	r0, r0, #16
 8009c02:	4463      	add	r3, ip
 8009c04:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009c08:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009c12:	4576      	cmp	r6, lr
 8009c14:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009c18:	f849 3b04 	str.w	r3, [r9], #4
 8009c1c:	d8e6      	bhi.n	8009bec <__mdiff+0x88>
 8009c1e:	1b33      	subs	r3, r6, r4
 8009c20:	3b15      	subs	r3, #21
 8009c22:	f023 0303 	bic.w	r3, r3, #3
 8009c26:	3415      	adds	r4, #21
 8009c28:	3304      	adds	r3, #4
 8009c2a:	42a6      	cmp	r6, r4
 8009c2c:	bf38      	it	cc
 8009c2e:	2304      	movcc	r3, #4
 8009c30:	441d      	add	r5, r3
 8009c32:	445b      	add	r3, fp
 8009c34:	461e      	mov	r6, r3
 8009c36:	462c      	mov	r4, r5
 8009c38:	4544      	cmp	r4, r8
 8009c3a:	d30e      	bcc.n	8009c5a <__mdiff+0xf6>
 8009c3c:	f108 0103 	add.w	r1, r8, #3
 8009c40:	1b49      	subs	r1, r1, r5
 8009c42:	f021 0103 	bic.w	r1, r1, #3
 8009c46:	3d03      	subs	r5, #3
 8009c48:	45a8      	cmp	r8, r5
 8009c4a:	bf38      	it	cc
 8009c4c:	2100      	movcc	r1, #0
 8009c4e:	440b      	add	r3, r1
 8009c50:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009c54:	b199      	cbz	r1, 8009c7e <__mdiff+0x11a>
 8009c56:	6117      	str	r7, [r2, #16]
 8009c58:	e79e      	b.n	8009b98 <__mdiff+0x34>
 8009c5a:	46e6      	mov	lr, ip
 8009c5c:	f854 1b04 	ldr.w	r1, [r4], #4
 8009c60:	fa1f fc81 	uxth.w	ip, r1
 8009c64:	44f4      	add	ip, lr
 8009c66:	0c08      	lsrs	r0, r1, #16
 8009c68:	4471      	add	r1, lr
 8009c6a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009c6e:	b289      	uxth	r1, r1
 8009c70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009c74:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009c78:	f846 1b04 	str.w	r1, [r6], #4
 8009c7c:	e7dc      	b.n	8009c38 <__mdiff+0xd4>
 8009c7e:	3f01      	subs	r7, #1
 8009c80:	e7e6      	b.n	8009c50 <__mdiff+0xec>
 8009c82:	bf00      	nop
 8009c84:	080177ad 	.word	0x080177ad
 8009c88:	080177be 	.word	0x080177be

08009c8c <__ulp>:
 8009c8c:	4b0e      	ldr	r3, [pc, #56]	@ (8009cc8 <__ulp+0x3c>)
 8009c8e:	400b      	ands	r3, r1
 8009c90:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	dc08      	bgt.n	8009caa <__ulp+0x1e>
 8009c98:	425b      	negs	r3, r3
 8009c9a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009c9e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009ca2:	da04      	bge.n	8009cae <__ulp+0x22>
 8009ca4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009ca8:	4113      	asrs	r3, r2
 8009caa:	2200      	movs	r2, #0
 8009cac:	e008      	b.n	8009cc0 <__ulp+0x34>
 8009cae:	f1a2 0314 	sub.w	r3, r2, #20
 8009cb2:	2b1e      	cmp	r3, #30
 8009cb4:	bfd6      	itet	le
 8009cb6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009cba:	2201      	movgt	r2, #1
 8009cbc:	40da      	lsrle	r2, r3
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	4610      	mov	r0, r2
 8009cc4:	4770      	bx	lr
 8009cc6:	bf00      	nop
 8009cc8:	7ff00000 	.word	0x7ff00000

08009ccc <__b2d>:
 8009ccc:	6902      	ldr	r2, [r0, #16]
 8009cce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cd0:	f100 0614 	add.w	r6, r0, #20
 8009cd4:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8009cd8:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8009cdc:	4f1e      	ldr	r7, [pc, #120]	@ (8009d58 <__b2d+0x8c>)
 8009cde:	4620      	mov	r0, r4
 8009ce0:	f7ff fd5a 	bl	8009798 <__hi0bits>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	f1c0 0020 	rsb	r0, r0, #32
 8009cea:	2b0a      	cmp	r3, #10
 8009cec:	f1a2 0504 	sub.w	r5, r2, #4
 8009cf0:	6008      	str	r0, [r1, #0]
 8009cf2:	dc12      	bgt.n	8009d1a <__b2d+0x4e>
 8009cf4:	42ae      	cmp	r6, r5
 8009cf6:	bf2c      	ite	cs
 8009cf8:	2200      	movcs	r2, #0
 8009cfa:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009cfe:	f1c3 0c0b 	rsb	ip, r3, #11
 8009d02:	3315      	adds	r3, #21
 8009d04:	fa24 fe0c 	lsr.w	lr, r4, ip
 8009d08:	fa04 f303 	lsl.w	r3, r4, r3
 8009d0c:	fa22 f20c 	lsr.w	r2, r2, ip
 8009d10:	ea4e 0107 	orr.w	r1, lr, r7
 8009d14:	431a      	orrs	r2, r3
 8009d16:	4610      	mov	r0, r2
 8009d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d1a:	42ae      	cmp	r6, r5
 8009d1c:	bf36      	itet	cc
 8009d1e:	f1a2 0508 	subcc.w	r5, r2, #8
 8009d22:	2200      	movcs	r2, #0
 8009d24:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009d28:	3b0b      	subs	r3, #11
 8009d2a:	d012      	beq.n	8009d52 <__b2d+0x86>
 8009d2c:	f1c3 0720 	rsb	r7, r3, #32
 8009d30:	fa22 f107 	lsr.w	r1, r2, r7
 8009d34:	409c      	lsls	r4, r3
 8009d36:	430c      	orrs	r4, r1
 8009d38:	42b5      	cmp	r5, r6
 8009d3a:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8009d3e:	bf94      	ite	ls
 8009d40:	2400      	movls	r4, #0
 8009d42:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8009d46:	409a      	lsls	r2, r3
 8009d48:	40fc      	lsrs	r4, r7
 8009d4a:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009d4e:	4322      	orrs	r2, r4
 8009d50:	e7e1      	b.n	8009d16 <__b2d+0x4a>
 8009d52:	ea44 0107 	orr.w	r1, r4, r7
 8009d56:	e7de      	b.n	8009d16 <__b2d+0x4a>
 8009d58:	3ff00000 	.word	0x3ff00000

08009d5c <__d2b>:
 8009d5c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009d60:	2101      	movs	r1, #1
 8009d62:	4690      	mov	r8, r2
 8009d64:	4699      	mov	r9, r3
 8009d66:	9e08      	ldr	r6, [sp, #32]
 8009d68:	f7ff fc24 	bl	80095b4 <_Balloc>
 8009d6c:	4604      	mov	r4, r0
 8009d6e:	b930      	cbnz	r0, 8009d7e <__d2b+0x22>
 8009d70:	4602      	mov	r2, r0
 8009d72:	f240 310f 	movw	r1, #783	@ 0x30f
 8009d76:	4b23      	ldr	r3, [pc, #140]	@ (8009e04 <__d2b+0xa8>)
 8009d78:	4823      	ldr	r0, [pc, #140]	@ (8009e08 <__d2b+0xac>)
 8009d7a:	f001 fb4b 	bl	800b414 <__assert_func>
 8009d7e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009d82:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d86:	b10d      	cbz	r5, 8009d8c <__d2b+0x30>
 8009d88:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009d8c:	9301      	str	r3, [sp, #4]
 8009d8e:	f1b8 0300 	subs.w	r3, r8, #0
 8009d92:	d024      	beq.n	8009dde <__d2b+0x82>
 8009d94:	4668      	mov	r0, sp
 8009d96:	9300      	str	r3, [sp, #0]
 8009d98:	f7ff fd1d 	bl	80097d6 <__lo0bits>
 8009d9c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009da0:	b1d8      	cbz	r0, 8009dda <__d2b+0x7e>
 8009da2:	f1c0 0320 	rsb	r3, r0, #32
 8009da6:	fa02 f303 	lsl.w	r3, r2, r3
 8009daa:	430b      	orrs	r3, r1
 8009dac:	40c2      	lsrs	r2, r0
 8009dae:	6163      	str	r3, [r4, #20]
 8009db0:	9201      	str	r2, [sp, #4]
 8009db2:	9b01      	ldr	r3, [sp, #4]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	bf0c      	ite	eq
 8009db8:	2201      	moveq	r2, #1
 8009dba:	2202      	movne	r2, #2
 8009dbc:	61a3      	str	r3, [r4, #24]
 8009dbe:	6122      	str	r2, [r4, #16]
 8009dc0:	b1ad      	cbz	r5, 8009dee <__d2b+0x92>
 8009dc2:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009dc6:	4405      	add	r5, r0
 8009dc8:	6035      	str	r5, [r6, #0]
 8009dca:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009dce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dd0:	6018      	str	r0, [r3, #0]
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	b002      	add	sp, #8
 8009dd6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8009dda:	6161      	str	r1, [r4, #20]
 8009ddc:	e7e9      	b.n	8009db2 <__d2b+0x56>
 8009dde:	a801      	add	r0, sp, #4
 8009de0:	f7ff fcf9 	bl	80097d6 <__lo0bits>
 8009de4:	9b01      	ldr	r3, [sp, #4]
 8009de6:	2201      	movs	r2, #1
 8009de8:	6163      	str	r3, [r4, #20]
 8009dea:	3020      	adds	r0, #32
 8009dec:	e7e7      	b.n	8009dbe <__d2b+0x62>
 8009dee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009df2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009df6:	6030      	str	r0, [r6, #0]
 8009df8:	6918      	ldr	r0, [r3, #16]
 8009dfa:	f7ff fccd 	bl	8009798 <__hi0bits>
 8009dfe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009e02:	e7e4      	b.n	8009dce <__d2b+0x72>
 8009e04:	080177ad 	.word	0x080177ad
 8009e08:	080177be 	.word	0x080177be

08009e0c <__ratio>:
 8009e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e10:	b085      	sub	sp, #20
 8009e12:	e9cd 1000 	strd	r1, r0, [sp]
 8009e16:	a902      	add	r1, sp, #8
 8009e18:	f7ff ff58 	bl	8009ccc <__b2d>
 8009e1c:	468b      	mov	fp, r1
 8009e1e:	4606      	mov	r6, r0
 8009e20:	460f      	mov	r7, r1
 8009e22:	9800      	ldr	r0, [sp, #0]
 8009e24:	a903      	add	r1, sp, #12
 8009e26:	f7ff ff51 	bl	8009ccc <__b2d>
 8009e2a:	460d      	mov	r5, r1
 8009e2c:	9b01      	ldr	r3, [sp, #4]
 8009e2e:	4689      	mov	r9, r1
 8009e30:	6919      	ldr	r1, [r3, #16]
 8009e32:	9b00      	ldr	r3, [sp, #0]
 8009e34:	4604      	mov	r4, r0
 8009e36:	691b      	ldr	r3, [r3, #16]
 8009e38:	4630      	mov	r0, r6
 8009e3a:	1ac9      	subs	r1, r1, r3
 8009e3c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009e40:	1a9b      	subs	r3, r3, r2
 8009e42:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	bfcd      	iteet	gt
 8009e4a:	463a      	movgt	r2, r7
 8009e4c:	462a      	movle	r2, r5
 8009e4e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009e52:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8009e56:	bfd8      	it	le
 8009e58:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009e5c:	464b      	mov	r3, r9
 8009e5e:	4622      	mov	r2, r4
 8009e60:	4659      	mov	r1, fp
 8009e62:	f7f6 fc85 	bl	8000770 <__aeabi_ddiv>
 8009e66:	b005      	add	sp, #20
 8009e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009e6c <__copybits>:
 8009e6c:	3901      	subs	r1, #1
 8009e6e:	b570      	push	{r4, r5, r6, lr}
 8009e70:	1149      	asrs	r1, r1, #5
 8009e72:	6914      	ldr	r4, [r2, #16]
 8009e74:	3101      	adds	r1, #1
 8009e76:	f102 0314 	add.w	r3, r2, #20
 8009e7a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009e7e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009e82:	1f05      	subs	r5, r0, #4
 8009e84:	42a3      	cmp	r3, r4
 8009e86:	d30c      	bcc.n	8009ea2 <__copybits+0x36>
 8009e88:	1aa3      	subs	r3, r4, r2
 8009e8a:	3b11      	subs	r3, #17
 8009e8c:	f023 0303 	bic.w	r3, r3, #3
 8009e90:	3211      	adds	r2, #17
 8009e92:	42a2      	cmp	r2, r4
 8009e94:	bf88      	it	hi
 8009e96:	2300      	movhi	r3, #0
 8009e98:	4418      	add	r0, r3
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	4288      	cmp	r0, r1
 8009e9e:	d305      	bcc.n	8009eac <__copybits+0x40>
 8009ea0:	bd70      	pop	{r4, r5, r6, pc}
 8009ea2:	f853 6b04 	ldr.w	r6, [r3], #4
 8009ea6:	f845 6f04 	str.w	r6, [r5, #4]!
 8009eaa:	e7eb      	b.n	8009e84 <__copybits+0x18>
 8009eac:	f840 3b04 	str.w	r3, [r0], #4
 8009eb0:	e7f4      	b.n	8009e9c <__copybits+0x30>

08009eb2 <__any_on>:
 8009eb2:	f100 0214 	add.w	r2, r0, #20
 8009eb6:	6900      	ldr	r0, [r0, #16]
 8009eb8:	114b      	asrs	r3, r1, #5
 8009eba:	4298      	cmp	r0, r3
 8009ebc:	b510      	push	{r4, lr}
 8009ebe:	db11      	blt.n	8009ee4 <__any_on+0x32>
 8009ec0:	dd0a      	ble.n	8009ed8 <__any_on+0x26>
 8009ec2:	f011 011f 	ands.w	r1, r1, #31
 8009ec6:	d007      	beq.n	8009ed8 <__any_on+0x26>
 8009ec8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009ecc:	fa24 f001 	lsr.w	r0, r4, r1
 8009ed0:	fa00 f101 	lsl.w	r1, r0, r1
 8009ed4:	428c      	cmp	r4, r1
 8009ed6:	d10b      	bne.n	8009ef0 <__any_on+0x3e>
 8009ed8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d803      	bhi.n	8009ee8 <__any_on+0x36>
 8009ee0:	2000      	movs	r0, #0
 8009ee2:	bd10      	pop	{r4, pc}
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	e7f7      	b.n	8009ed8 <__any_on+0x26>
 8009ee8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009eec:	2900      	cmp	r1, #0
 8009eee:	d0f5      	beq.n	8009edc <__any_on+0x2a>
 8009ef0:	2001      	movs	r0, #1
 8009ef2:	e7f6      	b.n	8009ee2 <__any_on+0x30>

08009ef4 <sulp>:
 8009ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ef8:	460f      	mov	r7, r1
 8009efa:	4690      	mov	r8, r2
 8009efc:	f7ff fec6 	bl	8009c8c <__ulp>
 8009f00:	4604      	mov	r4, r0
 8009f02:	460d      	mov	r5, r1
 8009f04:	f1b8 0f00 	cmp.w	r8, #0
 8009f08:	d011      	beq.n	8009f2e <sulp+0x3a>
 8009f0a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009f0e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	dd0b      	ble.n	8009f2e <sulp+0x3a>
 8009f16:	2400      	movs	r4, #0
 8009f18:	051b      	lsls	r3, r3, #20
 8009f1a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009f1e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009f22:	4622      	mov	r2, r4
 8009f24:	462b      	mov	r3, r5
 8009f26:	f7f6 faf9 	bl	800051c <__aeabi_dmul>
 8009f2a:	4604      	mov	r4, r0
 8009f2c:	460d      	mov	r5, r1
 8009f2e:	4620      	mov	r0, r4
 8009f30:	4629      	mov	r1, r5
 8009f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08009f38 <_strtod_l>:
 8009f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f3c:	b09f      	sub	sp, #124	@ 0x7c
 8009f3e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009f40:	2200      	movs	r2, #0
 8009f42:	460c      	mov	r4, r1
 8009f44:	921a      	str	r2, [sp, #104]	@ 0x68
 8009f46:	f04f 0a00 	mov.w	sl, #0
 8009f4a:	f04f 0b00 	mov.w	fp, #0
 8009f4e:	460a      	mov	r2, r1
 8009f50:	9005      	str	r0, [sp, #20]
 8009f52:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f54:	7811      	ldrb	r1, [r2, #0]
 8009f56:	292b      	cmp	r1, #43	@ 0x2b
 8009f58:	d048      	beq.n	8009fec <_strtod_l+0xb4>
 8009f5a:	d836      	bhi.n	8009fca <_strtod_l+0x92>
 8009f5c:	290d      	cmp	r1, #13
 8009f5e:	d830      	bhi.n	8009fc2 <_strtod_l+0x8a>
 8009f60:	2908      	cmp	r1, #8
 8009f62:	d830      	bhi.n	8009fc6 <_strtod_l+0x8e>
 8009f64:	2900      	cmp	r1, #0
 8009f66:	d039      	beq.n	8009fdc <_strtod_l+0xa4>
 8009f68:	2200      	movs	r2, #0
 8009f6a:	920e      	str	r2, [sp, #56]	@ 0x38
 8009f6c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009f6e:	782a      	ldrb	r2, [r5, #0]
 8009f70:	2a30      	cmp	r2, #48	@ 0x30
 8009f72:	f040 80b0 	bne.w	800a0d6 <_strtod_l+0x19e>
 8009f76:	786a      	ldrb	r2, [r5, #1]
 8009f78:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009f7c:	2a58      	cmp	r2, #88	@ 0x58
 8009f7e:	d16c      	bne.n	800a05a <_strtod_l+0x122>
 8009f80:	9302      	str	r3, [sp, #8]
 8009f82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f84:	4a8f      	ldr	r2, [pc, #572]	@ (800a1c4 <_strtod_l+0x28c>)
 8009f86:	9301      	str	r3, [sp, #4]
 8009f88:	ab1a      	add	r3, sp, #104	@ 0x68
 8009f8a:	9300      	str	r3, [sp, #0]
 8009f8c:	9805      	ldr	r0, [sp, #20]
 8009f8e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009f90:	a919      	add	r1, sp, #100	@ 0x64
 8009f92:	f001 fad9 	bl	800b548 <__gethex>
 8009f96:	f010 060f 	ands.w	r6, r0, #15
 8009f9a:	4604      	mov	r4, r0
 8009f9c:	d005      	beq.n	8009faa <_strtod_l+0x72>
 8009f9e:	2e06      	cmp	r6, #6
 8009fa0:	d126      	bne.n	8009ff0 <_strtod_l+0xb8>
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	3501      	adds	r5, #1
 8009fa6:	9519      	str	r5, [sp, #100]	@ 0x64
 8009fa8:	930e      	str	r3, [sp, #56]	@ 0x38
 8009faa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	f040 8582 	bne.w	800aab6 <_strtod_l+0xb7e>
 8009fb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fb4:	b1bb      	cbz	r3, 8009fe6 <_strtod_l+0xae>
 8009fb6:	4650      	mov	r0, sl
 8009fb8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8009fbc:	b01f      	add	sp, #124	@ 0x7c
 8009fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fc2:	2920      	cmp	r1, #32
 8009fc4:	d1d0      	bne.n	8009f68 <_strtod_l+0x30>
 8009fc6:	3201      	adds	r2, #1
 8009fc8:	e7c3      	b.n	8009f52 <_strtod_l+0x1a>
 8009fca:	292d      	cmp	r1, #45	@ 0x2d
 8009fcc:	d1cc      	bne.n	8009f68 <_strtod_l+0x30>
 8009fce:	2101      	movs	r1, #1
 8009fd0:	910e      	str	r1, [sp, #56]	@ 0x38
 8009fd2:	1c51      	adds	r1, r2, #1
 8009fd4:	9119      	str	r1, [sp, #100]	@ 0x64
 8009fd6:	7852      	ldrb	r2, [r2, #1]
 8009fd8:	2a00      	cmp	r2, #0
 8009fda:	d1c7      	bne.n	8009f6c <_strtod_l+0x34>
 8009fdc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009fde:	9419      	str	r4, [sp, #100]	@ 0x64
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	f040 8566 	bne.w	800aab2 <_strtod_l+0xb7a>
 8009fe6:	4650      	mov	r0, sl
 8009fe8:	4659      	mov	r1, fp
 8009fea:	e7e7      	b.n	8009fbc <_strtod_l+0x84>
 8009fec:	2100      	movs	r1, #0
 8009fee:	e7ef      	b.n	8009fd0 <_strtod_l+0x98>
 8009ff0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009ff2:	b13a      	cbz	r2, 800a004 <_strtod_l+0xcc>
 8009ff4:	2135      	movs	r1, #53	@ 0x35
 8009ff6:	a81c      	add	r0, sp, #112	@ 0x70
 8009ff8:	f7ff ff38 	bl	8009e6c <__copybits>
 8009ffc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009ffe:	9805      	ldr	r0, [sp, #20]
 800a000:	f7ff fb18 	bl	8009634 <_Bfree>
 800a004:	3e01      	subs	r6, #1
 800a006:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a008:	2e04      	cmp	r6, #4
 800a00a:	d806      	bhi.n	800a01a <_strtod_l+0xe2>
 800a00c:	e8df f006 	tbb	[pc, r6]
 800a010:	201d0314 	.word	0x201d0314
 800a014:	14          	.byte	0x14
 800a015:	00          	.byte	0x00
 800a016:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a01a:	05e1      	lsls	r1, r4, #23
 800a01c:	bf48      	it	mi
 800a01e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a022:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a026:	0d1b      	lsrs	r3, r3, #20
 800a028:	051b      	lsls	r3, r3, #20
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d1bd      	bne.n	8009faa <_strtod_l+0x72>
 800a02e:	f7fe fb27 	bl	8008680 <__errno>
 800a032:	2322      	movs	r3, #34	@ 0x22
 800a034:	6003      	str	r3, [r0, #0]
 800a036:	e7b8      	b.n	8009faa <_strtod_l+0x72>
 800a038:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a03c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a040:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a044:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a048:	e7e7      	b.n	800a01a <_strtod_l+0xe2>
 800a04a:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a1c8 <_strtod_l+0x290>
 800a04e:	e7e4      	b.n	800a01a <_strtod_l+0xe2>
 800a050:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a054:	f04f 3aff 	mov.w	sl, #4294967295
 800a058:	e7df      	b.n	800a01a <_strtod_l+0xe2>
 800a05a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a05c:	1c5a      	adds	r2, r3, #1
 800a05e:	9219      	str	r2, [sp, #100]	@ 0x64
 800a060:	785b      	ldrb	r3, [r3, #1]
 800a062:	2b30      	cmp	r3, #48	@ 0x30
 800a064:	d0f9      	beq.n	800a05a <_strtod_l+0x122>
 800a066:	2b00      	cmp	r3, #0
 800a068:	d09f      	beq.n	8009faa <_strtod_l+0x72>
 800a06a:	2301      	movs	r3, #1
 800a06c:	2700      	movs	r7, #0
 800a06e:	220a      	movs	r2, #10
 800a070:	46b9      	mov	r9, r7
 800a072:	9308      	str	r3, [sp, #32]
 800a074:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a076:	970b      	str	r7, [sp, #44]	@ 0x2c
 800a078:	930c      	str	r3, [sp, #48]	@ 0x30
 800a07a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a07c:	7805      	ldrb	r5, [r0, #0]
 800a07e:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a082:	b2d9      	uxtb	r1, r3
 800a084:	2909      	cmp	r1, #9
 800a086:	d928      	bls.n	800a0da <_strtod_l+0x1a2>
 800a088:	2201      	movs	r2, #1
 800a08a:	4950      	ldr	r1, [pc, #320]	@ (800a1cc <_strtod_l+0x294>)
 800a08c:	f001 f969 	bl	800b362 <strncmp>
 800a090:	2800      	cmp	r0, #0
 800a092:	d032      	beq.n	800a0fa <_strtod_l+0x1c2>
 800a094:	2000      	movs	r0, #0
 800a096:	462a      	mov	r2, r5
 800a098:	4603      	mov	r3, r0
 800a09a:	464d      	mov	r5, r9
 800a09c:	900a      	str	r0, [sp, #40]	@ 0x28
 800a09e:	2a65      	cmp	r2, #101	@ 0x65
 800a0a0:	d001      	beq.n	800a0a6 <_strtod_l+0x16e>
 800a0a2:	2a45      	cmp	r2, #69	@ 0x45
 800a0a4:	d114      	bne.n	800a0d0 <_strtod_l+0x198>
 800a0a6:	b91d      	cbnz	r5, 800a0b0 <_strtod_l+0x178>
 800a0a8:	9a08      	ldr	r2, [sp, #32]
 800a0aa:	4302      	orrs	r2, r0
 800a0ac:	d096      	beq.n	8009fdc <_strtod_l+0xa4>
 800a0ae:	2500      	movs	r5, #0
 800a0b0:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a0b2:	1c62      	adds	r2, r4, #1
 800a0b4:	9219      	str	r2, [sp, #100]	@ 0x64
 800a0b6:	7862      	ldrb	r2, [r4, #1]
 800a0b8:	2a2b      	cmp	r2, #43	@ 0x2b
 800a0ba:	d07a      	beq.n	800a1b2 <_strtod_l+0x27a>
 800a0bc:	2a2d      	cmp	r2, #45	@ 0x2d
 800a0be:	d07e      	beq.n	800a1be <_strtod_l+0x286>
 800a0c0:	f04f 0c00 	mov.w	ip, #0
 800a0c4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a0c8:	2909      	cmp	r1, #9
 800a0ca:	f240 8085 	bls.w	800a1d8 <_strtod_l+0x2a0>
 800a0ce:	9419      	str	r4, [sp, #100]	@ 0x64
 800a0d0:	f04f 0800 	mov.w	r8, #0
 800a0d4:	e0a5      	b.n	800a222 <_strtod_l+0x2ea>
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	e7c8      	b.n	800a06c <_strtod_l+0x134>
 800a0da:	f1b9 0f08 	cmp.w	r9, #8
 800a0de:	bfd8      	it	le
 800a0e0:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800a0e2:	f100 0001 	add.w	r0, r0, #1
 800a0e6:	bfd6      	itet	le
 800a0e8:	fb02 3301 	mlale	r3, r2, r1, r3
 800a0ec:	fb02 3707 	mlagt	r7, r2, r7, r3
 800a0f0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800a0f2:	f109 0901 	add.w	r9, r9, #1
 800a0f6:	9019      	str	r0, [sp, #100]	@ 0x64
 800a0f8:	e7bf      	b.n	800a07a <_strtod_l+0x142>
 800a0fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a0fc:	1c5a      	adds	r2, r3, #1
 800a0fe:	9219      	str	r2, [sp, #100]	@ 0x64
 800a100:	785a      	ldrb	r2, [r3, #1]
 800a102:	f1b9 0f00 	cmp.w	r9, #0
 800a106:	d03b      	beq.n	800a180 <_strtod_l+0x248>
 800a108:	464d      	mov	r5, r9
 800a10a:	900a      	str	r0, [sp, #40]	@ 0x28
 800a10c:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a110:	2b09      	cmp	r3, #9
 800a112:	d912      	bls.n	800a13a <_strtod_l+0x202>
 800a114:	2301      	movs	r3, #1
 800a116:	e7c2      	b.n	800a09e <_strtod_l+0x166>
 800a118:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a11a:	3001      	adds	r0, #1
 800a11c:	1c5a      	adds	r2, r3, #1
 800a11e:	9219      	str	r2, [sp, #100]	@ 0x64
 800a120:	785a      	ldrb	r2, [r3, #1]
 800a122:	2a30      	cmp	r2, #48	@ 0x30
 800a124:	d0f8      	beq.n	800a118 <_strtod_l+0x1e0>
 800a126:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a12a:	2b08      	cmp	r3, #8
 800a12c:	f200 84c8 	bhi.w	800aac0 <_strtod_l+0xb88>
 800a130:	900a      	str	r0, [sp, #40]	@ 0x28
 800a132:	2000      	movs	r0, #0
 800a134:	4605      	mov	r5, r0
 800a136:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a138:	930c      	str	r3, [sp, #48]	@ 0x30
 800a13a:	3a30      	subs	r2, #48	@ 0x30
 800a13c:	f100 0301 	add.w	r3, r0, #1
 800a140:	d018      	beq.n	800a174 <_strtod_l+0x23c>
 800a142:	462e      	mov	r6, r5
 800a144:	f04f 0e0a 	mov.w	lr, #10
 800a148:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a14a:	4419      	add	r1, r3
 800a14c:	910a      	str	r1, [sp, #40]	@ 0x28
 800a14e:	1c71      	adds	r1, r6, #1
 800a150:	eba1 0c05 	sub.w	ip, r1, r5
 800a154:	4563      	cmp	r3, ip
 800a156:	dc15      	bgt.n	800a184 <_strtod_l+0x24c>
 800a158:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800a15c:	182b      	adds	r3, r5, r0
 800a15e:	2b08      	cmp	r3, #8
 800a160:	f105 0501 	add.w	r5, r5, #1
 800a164:	4405      	add	r5, r0
 800a166:	dc1a      	bgt.n	800a19e <_strtod_l+0x266>
 800a168:	230a      	movs	r3, #10
 800a16a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a16c:	fb03 2301 	mla	r3, r3, r1, r2
 800a170:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a172:	2300      	movs	r3, #0
 800a174:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a176:	4618      	mov	r0, r3
 800a178:	1c51      	adds	r1, r2, #1
 800a17a:	9119      	str	r1, [sp, #100]	@ 0x64
 800a17c:	7852      	ldrb	r2, [r2, #1]
 800a17e:	e7c5      	b.n	800a10c <_strtod_l+0x1d4>
 800a180:	4648      	mov	r0, r9
 800a182:	e7ce      	b.n	800a122 <_strtod_l+0x1ea>
 800a184:	2e08      	cmp	r6, #8
 800a186:	dc05      	bgt.n	800a194 <_strtod_l+0x25c>
 800a188:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a18a:	fb0e f606 	mul.w	r6, lr, r6
 800a18e:	960b      	str	r6, [sp, #44]	@ 0x2c
 800a190:	460e      	mov	r6, r1
 800a192:	e7dc      	b.n	800a14e <_strtod_l+0x216>
 800a194:	2910      	cmp	r1, #16
 800a196:	bfd8      	it	le
 800a198:	fb0e f707 	mulle.w	r7, lr, r7
 800a19c:	e7f8      	b.n	800a190 <_strtod_l+0x258>
 800a19e:	2b0f      	cmp	r3, #15
 800a1a0:	bfdc      	itt	le
 800a1a2:	230a      	movle	r3, #10
 800a1a4:	fb03 2707 	mlale	r7, r3, r7, r2
 800a1a8:	e7e3      	b.n	800a172 <_strtod_l+0x23a>
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	930a      	str	r3, [sp, #40]	@ 0x28
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	e77a      	b.n	800a0a8 <_strtod_l+0x170>
 800a1b2:	f04f 0c00 	mov.w	ip, #0
 800a1b6:	1ca2      	adds	r2, r4, #2
 800a1b8:	9219      	str	r2, [sp, #100]	@ 0x64
 800a1ba:	78a2      	ldrb	r2, [r4, #2]
 800a1bc:	e782      	b.n	800a0c4 <_strtod_l+0x18c>
 800a1be:	f04f 0c01 	mov.w	ip, #1
 800a1c2:	e7f8      	b.n	800a1b6 <_strtod_l+0x27e>
 800a1c4:	080179e4 	.word	0x080179e4
 800a1c8:	7ff00000 	.word	0x7ff00000
 800a1cc:	08017817 	.word	0x08017817
 800a1d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a1d2:	1c51      	adds	r1, r2, #1
 800a1d4:	9119      	str	r1, [sp, #100]	@ 0x64
 800a1d6:	7852      	ldrb	r2, [r2, #1]
 800a1d8:	2a30      	cmp	r2, #48	@ 0x30
 800a1da:	d0f9      	beq.n	800a1d0 <_strtod_l+0x298>
 800a1dc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a1e0:	2908      	cmp	r1, #8
 800a1e2:	f63f af75 	bhi.w	800a0d0 <_strtod_l+0x198>
 800a1e6:	f04f 080a 	mov.w	r8, #10
 800a1ea:	3a30      	subs	r2, #48	@ 0x30
 800a1ec:	9209      	str	r2, [sp, #36]	@ 0x24
 800a1ee:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a1f0:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a1f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a1f4:	1c56      	adds	r6, r2, #1
 800a1f6:	9619      	str	r6, [sp, #100]	@ 0x64
 800a1f8:	7852      	ldrb	r2, [r2, #1]
 800a1fa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a1fe:	f1be 0f09 	cmp.w	lr, #9
 800a202:	d939      	bls.n	800a278 <_strtod_l+0x340>
 800a204:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a206:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a20a:	1a76      	subs	r6, r6, r1
 800a20c:	2e08      	cmp	r6, #8
 800a20e:	dc03      	bgt.n	800a218 <_strtod_l+0x2e0>
 800a210:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a212:	4588      	cmp	r8, r1
 800a214:	bfa8      	it	ge
 800a216:	4688      	movge	r8, r1
 800a218:	f1bc 0f00 	cmp.w	ip, #0
 800a21c:	d001      	beq.n	800a222 <_strtod_l+0x2ea>
 800a21e:	f1c8 0800 	rsb	r8, r8, #0
 800a222:	2d00      	cmp	r5, #0
 800a224:	d14e      	bne.n	800a2c4 <_strtod_l+0x38c>
 800a226:	9908      	ldr	r1, [sp, #32]
 800a228:	4308      	orrs	r0, r1
 800a22a:	f47f aebe 	bne.w	8009faa <_strtod_l+0x72>
 800a22e:	2b00      	cmp	r3, #0
 800a230:	f47f aed4 	bne.w	8009fdc <_strtod_l+0xa4>
 800a234:	2a69      	cmp	r2, #105	@ 0x69
 800a236:	d028      	beq.n	800a28a <_strtod_l+0x352>
 800a238:	dc25      	bgt.n	800a286 <_strtod_l+0x34e>
 800a23a:	2a49      	cmp	r2, #73	@ 0x49
 800a23c:	d025      	beq.n	800a28a <_strtod_l+0x352>
 800a23e:	2a4e      	cmp	r2, #78	@ 0x4e
 800a240:	f47f aecc 	bne.w	8009fdc <_strtod_l+0xa4>
 800a244:	4999      	ldr	r1, [pc, #612]	@ (800a4ac <_strtod_l+0x574>)
 800a246:	a819      	add	r0, sp, #100	@ 0x64
 800a248:	f001 fba0 	bl	800b98c <__match>
 800a24c:	2800      	cmp	r0, #0
 800a24e:	f43f aec5 	beq.w	8009fdc <_strtod_l+0xa4>
 800a252:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a254:	781b      	ldrb	r3, [r3, #0]
 800a256:	2b28      	cmp	r3, #40	@ 0x28
 800a258:	d12e      	bne.n	800a2b8 <_strtod_l+0x380>
 800a25a:	4995      	ldr	r1, [pc, #596]	@ (800a4b0 <_strtod_l+0x578>)
 800a25c:	aa1c      	add	r2, sp, #112	@ 0x70
 800a25e:	a819      	add	r0, sp, #100	@ 0x64
 800a260:	f001 fba8 	bl	800b9b4 <__hexnan>
 800a264:	2805      	cmp	r0, #5
 800a266:	d127      	bne.n	800a2b8 <_strtod_l+0x380>
 800a268:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a26a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a26e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a272:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a276:	e698      	b.n	8009faa <_strtod_l+0x72>
 800a278:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a27a:	fb08 2101 	mla	r1, r8, r1, r2
 800a27e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a282:	9209      	str	r2, [sp, #36]	@ 0x24
 800a284:	e7b5      	b.n	800a1f2 <_strtod_l+0x2ba>
 800a286:	2a6e      	cmp	r2, #110	@ 0x6e
 800a288:	e7da      	b.n	800a240 <_strtod_l+0x308>
 800a28a:	498a      	ldr	r1, [pc, #552]	@ (800a4b4 <_strtod_l+0x57c>)
 800a28c:	a819      	add	r0, sp, #100	@ 0x64
 800a28e:	f001 fb7d 	bl	800b98c <__match>
 800a292:	2800      	cmp	r0, #0
 800a294:	f43f aea2 	beq.w	8009fdc <_strtod_l+0xa4>
 800a298:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a29a:	4987      	ldr	r1, [pc, #540]	@ (800a4b8 <_strtod_l+0x580>)
 800a29c:	3b01      	subs	r3, #1
 800a29e:	a819      	add	r0, sp, #100	@ 0x64
 800a2a0:	9319      	str	r3, [sp, #100]	@ 0x64
 800a2a2:	f001 fb73 	bl	800b98c <__match>
 800a2a6:	b910      	cbnz	r0, 800a2ae <_strtod_l+0x376>
 800a2a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2aa:	3301      	adds	r3, #1
 800a2ac:	9319      	str	r3, [sp, #100]	@ 0x64
 800a2ae:	f04f 0a00 	mov.w	sl, #0
 800a2b2:	f8df b208 	ldr.w	fp, [pc, #520]	@ 800a4bc <_strtod_l+0x584>
 800a2b6:	e678      	b.n	8009faa <_strtod_l+0x72>
 800a2b8:	4881      	ldr	r0, [pc, #516]	@ (800a4c0 <_strtod_l+0x588>)
 800a2ba:	f001 f8a5 	bl	800b408 <nan>
 800a2be:	4682      	mov	sl, r0
 800a2c0:	468b      	mov	fp, r1
 800a2c2:	e672      	b.n	8009faa <_strtod_l+0x72>
 800a2c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2c6:	f1b9 0f00 	cmp.w	r9, #0
 800a2ca:	bf08      	it	eq
 800a2cc:	46a9      	moveq	r9, r5
 800a2ce:	eba8 0303 	sub.w	r3, r8, r3
 800a2d2:	2d10      	cmp	r5, #16
 800a2d4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800a2d6:	462c      	mov	r4, r5
 800a2d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2da:	bfa8      	it	ge
 800a2dc:	2410      	movge	r4, #16
 800a2de:	f7f6 f8a3 	bl	8000428 <__aeabi_ui2d>
 800a2e2:	2d09      	cmp	r5, #9
 800a2e4:	4682      	mov	sl, r0
 800a2e6:	468b      	mov	fp, r1
 800a2e8:	dc11      	bgt.n	800a30e <_strtod_l+0x3d6>
 800a2ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	f43f ae5c 	beq.w	8009faa <_strtod_l+0x72>
 800a2f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2f4:	dd76      	ble.n	800a3e4 <_strtod_l+0x4ac>
 800a2f6:	2b16      	cmp	r3, #22
 800a2f8:	dc5d      	bgt.n	800a3b6 <_strtod_l+0x47e>
 800a2fa:	4972      	ldr	r1, [pc, #456]	@ (800a4c4 <_strtod_l+0x58c>)
 800a2fc:	4652      	mov	r2, sl
 800a2fe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a302:	465b      	mov	r3, fp
 800a304:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a308:	f7f6 f908 	bl	800051c <__aeabi_dmul>
 800a30c:	e7d7      	b.n	800a2be <_strtod_l+0x386>
 800a30e:	4b6d      	ldr	r3, [pc, #436]	@ (800a4c4 <_strtod_l+0x58c>)
 800a310:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a314:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a318:	f7f6 f900 	bl	800051c <__aeabi_dmul>
 800a31c:	4682      	mov	sl, r0
 800a31e:	4638      	mov	r0, r7
 800a320:	468b      	mov	fp, r1
 800a322:	f7f6 f881 	bl	8000428 <__aeabi_ui2d>
 800a326:	4602      	mov	r2, r0
 800a328:	460b      	mov	r3, r1
 800a32a:	4650      	mov	r0, sl
 800a32c:	4659      	mov	r1, fp
 800a32e:	f7f5 ff3f 	bl	80001b0 <__adddf3>
 800a332:	2d0f      	cmp	r5, #15
 800a334:	4682      	mov	sl, r0
 800a336:	468b      	mov	fp, r1
 800a338:	ddd7      	ble.n	800a2ea <_strtod_l+0x3b2>
 800a33a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a33c:	1b2c      	subs	r4, r5, r4
 800a33e:	441c      	add	r4, r3
 800a340:	2c00      	cmp	r4, #0
 800a342:	f340 8093 	ble.w	800a46c <_strtod_l+0x534>
 800a346:	f014 030f 	ands.w	r3, r4, #15
 800a34a:	d00a      	beq.n	800a362 <_strtod_l+0x42a>
 800a34c:	495d      	ldr	r1, [pc, #372]	@ (800a4c4 <_strtod_l+0x58c>)
 800a34e:	4652      	mov	r2, sl
 800a350:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a354:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a358:	465b      	mov	r3, fp
 800a35a:	f7f6 f8df 	bl	800051c <__aeabi_dmul>
 800a35e:	4682      	mov	sl, r0
 800a360:	468b      	mov	fp, r1
 800a362:	f034 040f 	bics.w	r4, r4, #15
 800a366:	d073      	beq.n	800a450 <_strtod_l+0x518>
 800a368:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a36c:	dd49      	ble.n	800a402 <_strtod_l+0x4ca>
 800a36e:	2400      	movs	r4, #0
 800a370:	46a0      	mov	r8, r4
 800a372:	46a1      	mov	r9, r4
 800a374:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a376:	2322      	movs	r3, #34	@ 0x22
 800a378:	f04f 0a00 	mov.w	sl, #0
 800a37c:	9a05      	ldr	r2, [sp, #20]
 800a37e:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 800a4bc <_strtod_l+0x584>
 800a382:	6013      	str	r3, [r2, #0]
 800a384:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a386:	2b00      	cmp	r3, #0
 800a388:	f43f ae0f 	beq.w	8009faa <_strtod_l+0x72>
 800a38c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a38e:	9805      	ldr	r0, [sp, #20]
 800a390:	f7ff f950 	bl	8009634 <_Bfree>
 800a394:	4649      	mov	r1, r9
 800a396:	9805      	ldr	r0, [sp, #20]
 800a398:	f7ff f94c 	bl	8009634 <_Bfree>
 800a39c:	4641      	mov	r1, r8
 800a39e:	9805      	ldr	r0, [sp, #20]
 800a3a0:	f7ff f948 	bl	8009634 <_Bfree>
 800a3a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a3a6:	9805      	ldr	r0, [sp, #20]
 800a3a8:	f7ff f944 	bl	8009634 <_Bfree>
 800a3ac:	4621      	mov	r1, r4
 800a3ae:	9805      	ldr	r0, [sp, #20]
 800a3b0:	f7ff f940 	bl	8009634 <_Bfree>
 800a3b4:	e5f9      	b.n	8009faa <_strtod_l+0x72>
 800a3b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a3b8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	dbbc      	blt.n	800a33a <_strtod_l+0x402>
 800a3c0:	4c40      	ldr	r4, [pc, #256]	@ (800a4c4 <_strtod_l+0x58c>)
 800a3c2:	f1c5 050f 	rsb	r5, r5, #15
 800a3c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a3ca:	4652      	mov	r2, sl
 800a3cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3d0:	465b      	mov	r3, fp
 800a3d2:	f7f6 f8a3 	bl	800051c <__aeabi_dmul>
 800a3d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3d8:	1b5d      	subs	r5, r3, r5
 800a3da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a3de:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a3e2:	e791      	b.n	800a308 <_strtod_l+0x3d0>
 800a3e4:	3316      	adds	r3, #22
 800a3e6:	dba8      	blt.n	800a33a <_strtod_l+0x402>
 800a3e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3ea:	4650      	mov	r0, sl
 800a3ec:	eba3 0808 	sub.w	r8, r3, r8
 800a3f0:	4b34      	ldr	r3, [pc, #208]	@ (800a4c4 <_strtod_l+0x58c>)
 800a3f2:	4659      	mov	r1, fp
 800a3f4:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a3f8:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a3fc:	f7f6 f9b8 	bl	8000770 <__aeabi_ddiv>
 800a400:	e75d      	b.n	800a2be <_strtod_l+0x386>
 800a402:	2300      	movs	r3, #0
 800a404:	4650      	mov	r0, sl
 800a406:	4659      	mov	r1, fp
 800a408:	461e      	mov	r6, r3
 800a40a:	4f2f      	ldr	r7, [pc, #188]	@ (800a4c8 <_strtod_l+0x590>)
 800a40c:	1124      	asrs	r4, r4, #4
 800a40e:	2c01      	cmp	r4, #1
 800a410:	dc21      	bgt.n	800a456 <_strtod_l+0x51e>
 800a412:	b10b      	cbz	r3, 800a418 <_strtod_l+0x4e0>
 800a414:	4682      	mov	sl, r0
 800a416:	468b      	mov	fp, r1
 800a418:	492b      	ldr	r1, [pc, #172]	@ (800a4c8 <_strtod_l+0x590>)
 800a41a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a41e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a422:	4652      	mov	r2, sl
 800a424:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a428:	465b      	mov	r3, fp
 800a42a:	f7f6 f877 	bl	800051c <__aeabi_dmul>
 800a42e:	4b23      	ldr	r3, [pc, #140]	@ (800a4bc <_strtod_l+0x584>)
 800a430:	460a      	mov	r2, r1
 800a432:	400b      	ands	r3, r1
 800a434:	4925      	ldr	r1, [pc, #148]	@ (800a4cc <_strtod_l+0x594>)
 800a436:	4682      	mov	sl, r0
 800a438:	428b      	cmp	r3, r1
 800a43a:	d898      	bhi.n	800a36e <_strtod_l+0x436>
 800a43c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a440:	428b      	cmp	r3, r1
 800a442:	bf86      	itte	hi
 800a444:	f04f 3aff 	movhi.w	sl, #4294967295
 800a448:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 800a4d0 <_strtod_l+0x598>
 800a44c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a450:	2300      	movs	r3, #0
 800a452:	9308      	str	r3, [sp, #32]
 800a454:	e076      	b.n	800a544 <_strtod_l+0x60c>
 800a456:	07e2      	lsls	r2, r4, #31
 800a458:	d504      	bpl.n	800a464 <_strtod_l+0x52c>
 800a45a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a45e:	f7f6 f85d 	bl	800051c <__aeabi_dmul>
 800a462:	2301      	movs	r3, #1
 800a464:	3601      	adds	r6, #1
 800a466:	1064      	asrs	r4, r4, #1
 800a468:	3708      	adds	r7, #8
 800a46a:	e7d0      	b.n	800a40e <_strtod_l+0x4d6>
 800a46c:	d0f0      	beq.n	800a450 <_strtod_l+0x518>
 800a46e:	4264      	negs	r4, r4
 800a470:	f014 020f 	ands.w	r2, r4, #15
 800a474:	d00a      	beq.n	800a48c <_strtod_l+0x554>
 800a476:	4b13      	ldr	r3, [pc, #76]	@ (800a4c4 <_strtod_l+0x58c>)
 800a478:	4650      	mov	r0, sl
 800a47a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a47e:	4659      	mov	r1, fp
 800a480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a484:	f7f6 f974 	bl	8000770 <__aeabi_ddiv>
 800a488:	4682      	mov	sl, r0
 800a48a:	468b      	mov	fp, r1
 800a48c:	1124      	asrs	r4, r4, #4
 800a48e:	d0df      	beq.n	800a450 <_strtod_l+0x518>
 800a490:	2c1f      	cmp	r4, #31
 800a492:	dd1f      	ble.n	800a4d4 <_strtod_l+0x59c>
 800a494:	2400      	movs	r4, #0
 800a496:	46a0      	mov	r8, r4
 800a498:	46a1      	mov	r9, r4
 800a49a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a49c:	2322      	movs	r3, #34	@ 0x22
 800a49e:	9a05      	ldr	r2, [sp, #20]
 800a4a0:	f04f 0a00 	mov.w	sl, #0
 800a4a4:	f04f 0b00 	mov.w	fp, #0
 800a4a8:	6013      	str	r3, [r2, #0]
 800a4aa:	e76b      	b.n	800a384 <_strtod_l+0x44c>
 800a4ac:	08017705 	.word	0x08017705
 800a4b0:	080179d0 	.word	0x080179d0
 800a4b4:	080176fd 	.word	0x080176fd
 800a4b8:	08017734 	.word	0x08017734
 800a4bc:	7ff00000 	.word	0x7ff00000
 800a4c0:	0801786d 	.word	0x0801786d
 800a4c4:	08017908 	.word	0x08017908
 800a4c8:	080178e0 	.word	0x080178e0
 800a4cc:	7ca00000 	.word	0x7ca00000
 800a4d0:	7fefffff 	.word	0x7fefffff
 800a4d4:	f014 0310 	ands.w	r3, r4, #16
 800a4d8:	bf18      	it	ne
 800a4da:	236a      	movne	r3, #106	@ 0x6a
 800a4dc:	4650      	mov	r0, sl
 800a4de:	9308      	str	r3, [sp, #32]
 800a4e0:	4659      	mov	r1, fp
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	4e77      	ldr	r6, [pc, #476]	@ (800a6c4 <_strtod_l+0x78c>)
 800a4e6:	07e7      	lsls	r7, r4, #31
 800a4e8:	d504      	bpl.n	800a4f4 <_strtod_l+0x5bc>
 800a4ea:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a4ee:	f7f6 f815 	bl	800051c <__aeabi_dmul>
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	1064      	asrs	r4, r4, #1
 800a4f6:	f106 0608 	add.w	r6, r6, #8
 800a4fa:	d1f4      	bne.n	800a4e6 <_strtod_l+0x5ae>
 800a4fc:	b10b      	cbz	r3, 800a502 <_strtod_l+0x5ca>
 800a4fe:	4682      	mov	sl, r0
 800a500:	468b      	mov	fp, r1
 800a502:	9b08      	ldr	r3, [sp, #32]
 800a504:	b1b3      	cbz	r3, 800a534 <_strtod_l+0x5fc>
 800a506:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a50a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a50e:	2b00      	cmp	r3, #0
 800a510:	4659      	mov	r1, fp
 800a512:	dd0f      	ble.n	800a534 <_strtod_l+0x5fc>
 800a514:	2b1f      	cmp	r3, #31
 800a516:	dd58      	ble.n	800a5ca <_strtod_l+0x692>
 800a518:	2b34      	cmp	r3, #52	@ 0x34
 800a51a:	bfd8      	it	le
 800a51c:	f04f 33ff 	movle.w	r3, #4294967295
 800a520:	f04f 0a00 	mov.w	sl, #0
 800a524:	bfcf      	iteee	gt
 800a526:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a52a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a52e:	4093      	lslle	r3, r2
 800a530:	ea03 0b01 	andle.w	fp, r3, r1
 800a534:	2200      	movs	r2, #0
 800a536:	2300      	movs	r3, #0
 800a538:	4650      	mov	r0, sl
 800a53a:	4659      	mov	r1, fp
 800a53c:	f7f6 fa56 	bl	80009ec <__aeabi_dcmpeq>
 800a540:	2800      	cmp	r0, #0
 800a542:	d1a7      	bne.n	800a494 <_strtod_l+0x55c>
 800a544:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a546:	464a      	mov	r2, r9
 800a548:	9300      	str	r3, [sp, #0]
 800a54a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a54c:	462b      	mov	r3, r5
 800a54e:	9805      	ldr	r0, [sp, #20]
 800a550:	f7ff f8d8 	bl	8009704 <__s2b>
 800a554:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a556:	2800      	cmp	r0, #0
 800a558:	f43f af09 	beq.w	800a36e <_strtod_l+0x436>
 800a55c:	2400      	movs	r4, #0
 800a55e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a560:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a562:	2a00      	cmp	r2, #0
 800a564:	eba3 0308 	sub.w	r3, r3, r8
 800a568:	bfa8      	it	ge
 800a56a:	2300      	movge	r3, #0
 800a56c:	46a0      	mov	r8, r4
 800a56e:	9312      	str	r3, [sp, #72]	@ 0x48
 800a570:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a574:	9316      	str	r3, [sp, #88]	@ 0x58
 800a576:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a578:	9805      	ldr	r0, [sp, #20]
 800a57a:	6859      	ldr	r1, [r3, #4]
 800a57c:	f7ff f81a 	bl	80095b4 <_Balloc>
 800a580:	4681      	mov	r9, r0
 800a582:	2800      	cmp	r0, #0
 800a584:	f43f aef7 	beq.w	800a376 <_strtod_l+0x43e>
 800a588:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a58a:	300c      	adds	r0, #12
 800a58c:	691a      	ldr	r2, [r3, #16]
 800a58e:	f103 010c 	add.w	r1, r3, #12
 800a592:	3202      	adds	r2, #2
 800a594:	0092      	lsls	r2, r2, #2
 800a596:	f000 ff29 	bl	800b3ec <memcpy>
 800a59a:	ab1c      	add	r3, sp, #112	@ 0x70
 800a59c:	9301      	str	r3, [sp, #4]
 800a59e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a5a0:	9300      	str	r3, [sp, #0]
 800a5a2:	4652      	mov	r2, sl
 800a5a4:	465b      	mov	r3, fp
 800a5a6:	9805      	ldr	r0, [sp, #20]
 800a5a8:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a5ac:	f7ff fbd6 	bl	8009d5c <__d2b>
 800a5b0:	901a      	str	r0, [sp, #104]	@ 0x68
 800a5b2:	2800      	cmp	r0, #0
 800a5b4:	f43f aedf 	beq.w	800a376 <_strtod_l+0x43e>
 800a5b8:	2101      	movs	r1, #1
 800a5ba:	9805      	ldr	r0, [sp, #20]
 800a5bc:	f7ff f938 	bl	8009830 <__i2b>
 800a5c0:	4680      	mov	r8, r0
 800a5c2:	b948      	cbnz	r0, 800a5d8 <_strtod_l+0x6a0>
 800a5c4:	f04f 0800 	mov.w	r8, #0
 800a5c8:	e6d5      	b.n	800a376 <_strtod_l+0x43e>
 800a5ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a5ce:	fa02 f303 	lsl.w	r3, r2, r3
 800a5d2:	ea03 0a0a 	and.w	sl, r3, sl
 800a5d6:	e7ad      	b.n	800a534 <_strtod_l+0x5fc>
 800a5d8:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a5da:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a5dc:	2d00      	cmp	r5, #0
 800a5de:	bfab      	itete	ge
 800a5e0:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a5e2:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a5e4:	18ef      	addge	r7, r5, r3
 800a5e6:	1b5e      	sublt	r6, r3, r5
 800a5e8:	9b08      	ldr	r3, [sp, #32]
 800a5ea:	bfa8      	it	ge
 800a5ec:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a5ee:	eba5 0503 	sub.w	r5, r5, r3
 800a5f2:	4415      	add	r5, r2
 800a5f4:	4b34      	ldr	r3, [pc, #208]	@ (800a6c8 <_strtod_l+0x790>)
 800a5f6:	f105 35ff 	add.w	r5, r5, #4294967295
 800a5fa:	bfb8      	it	lt
 800a5fc:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a5fe:	429d      	cmp	r5, r3
 800a600:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a604:	da50      	bge.n	800a6a8 <_strtod_l+0x770>
 800a606:	1b5b      	subs	r3, r3, r5
 800a608:	2b1f      	cmp	r3, #31
 800a60a:	f04f 0101 	mov.w	r1, #1
 800a60e:	eba2 0203 	sub.w	r2, r2, r3
 800a612:	dc3d      	bgt.n	800a690 <_strtod_l+0x758>
 800a614:	fa01 f303 	lsl.w	r3, r1, r3
 800a618:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a61a:	2300      	movs	r3, #0
 800a61c:	9310      	str	r3, [sp, #64]	@ 0x40
 800a61e:	18bd      	adds	r5, r7, r2
 800a620:	9b08      	ldr	r3, [sp, #32]
 800a622:	42af      	cmp	r7, r5
 800a624:	4416      	add	r6, r2
 800a626:	441e      	add	r6, r3
 800a628:	463b      	mov	r3, r7
 800a62a:	bfa8      	it	ge
 800a62c:	462b      	movge	r3, r5
 800a62e:	42b3      	cmp	r3, r6
 800a630:	bfa8      	it	ge
 800a632:	4633      	movge	r3, r6
 800a634:	2b00      	cmp	r3, #0
 800a636:	bfc2      	ittt	gt
 800a638:	1aed      	subgt	r5, r5, r3
 800a63a:	1af6      	subgt	r6, r6, r3
 800a63c:	1aff      	subgt	r7, r7, r3
 800a63e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a640:	2b00      	cmp	r3, #0
 800a642:	dd16      	ble.n	800a672 <_strtod_l+0x73a>
 800a644:	4641      	mov	r1, r8
 800a646:	461a      	mov	r2, r3
 800a648:	9805      	ldr	r0, [sp, #20]
 800a64a:	f7ff f9a9 	bl	80099a0 <__pow5mult>
 800a64e:	4680      	mov	r8, r0
 800a650:	2800      	cmp	r0, #0
 800a652:	d0b7      	beq.n	800a5c4 <_strtod_l+0x68c>
 800a654:	4601      	mov	r1, r0
 800a656:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a658:	9805      	ldr	r0, [sp, #20]
 800a65a:	f7ff f8ff 	bl	800985c <__multiply>
 800a65e:	900a      	str	r0, [sp, #40]	@ 0x28
 800a660:	2800      	cmp	r0, #0
 800a662:	f43f ae88 	beq.w	800a376 <_strtod_l+0x43e>
 800a666:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a668:	9805      	ldr	r0, [sp, #20]
 800a66a:	f7fe ffe3 	bl	8009634 <_Bfree>
 800a66e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a670:	931a      	str	r3, [sp, #104]	@ 0x68
 800a672:	2d00      	cmp	r5, #0
 800a674:	dc1d      	bgt.n	800a6b2 <_strtod_l+0x77a>
 800a676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a678:	2b00      	cmp	r3, #0
 800a67a:	dd27      	ble.n	800a6cc <_strtod_l+0x794>
 800a67c:	4649      	mov	r1, r9
 800a67e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a680:	9805      	ldr	r0, [sp, #20]
 800a682:	f7ff f98d 	bl	80099a0 <__pow5mult>
 800a686:	4681      	mov	r9, r0
 800a688:	bb00      	cbnz	r0, 800a6cc <_strtod_l+0x794>
 800a68a:	f04f 0900 	mov.w	r9, #0
 800a68e:	e672      	b.n	800a376 <_strtod_l+0x43e>
 800a690:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a694:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a698:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a69c:	35e2      	adds	r5, #226	@ 0xe2
 800a69e:	fa01 f305 	lsl.w	r3, r1, r5
 800a6a2:	9310      	str	r3, [sp, #64]	@ 0x40
 800a6a4:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a6a6:	e7ba      	b.n	800a61e <_strtod_l+0x6e6>
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	9310      	str	r3, [sp, #64]	@ 0x40
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a6b0:	e7b5      	b.n	800a61e <_strtod_l+0x6e6>
 800a6b2:	462a      	mov	r2, r5
 800a6b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a6b6:	9805      	ldr	r0, [sp, #20]
 800a6b8:	f7ff f9cc 	bl	8009a54 <__lshift>
 800a6bc:	901a      	str	r0, [sp, #104]	@ 0x68
 800a6be:	2800      	cmp	r0, #0
 800a6c0:	d1d9      	bne.n	800a676 <_strtod_l+0x73e>
 800a6c2:	e658      	b.n	800a376 <_strtod_l+0x43e>
 800a6c4:	080179f8 	.word	0x080179f8
 800a6c8:	fffffc02 	.word	0xfffffc02
 800a6cc:	2e00      	cmp	r6, #0
 800a6ce:	dd07      	ble.n	800a6e0 <_strtod_l+0x7a8>
 800a6d0:	4649      	mov	r1, r9
 800a6d2:	4632      	mov	r2, r6
 800a6d4:	9805      	ldr	r0, [sp, #20]
 800a6d6:	f7ff f9bd 	bl	8009a54 <__lshift>
 800a6da:	4681      	mov	r9, r0
 800a6dc:	2800      	cmp	r0, #0
 800a6de:	d0d4      	beq.n	800a68a <_strtod_l+0x752>
 800a6e0:	2f00      	cmp	r7, #0
 800a6e2:	dd08      	ble.n	800a6f6 <_strtod_l+0x7be>
 800a6e4:	4641      	mov	r1, r8
 800a6e6:	463a      	mov	r2, r7
 800a6e8:	9805      	ldr	r0, [sp, #20]
 800a6ea:	f7ff f9b3 	bl	8009a54 <__lshift>
 800a6ee:	4680      	mov	r8, r0
 800a6f0:	2800      	cmp	r0, #0
 800a6f2:	f43f ae40 	beq.w	800a376 <_strtod_l+0x43e>
 800a6f6:	464a      	mov	r2, r9
 800a6f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a6fa:	9805      	ldr	r0, [sp, #20]
 800a6fc:	f7ff fa32 	bl	8009b64 <__mdiff>
 800a700:	4604      	mov	r4, r0
 800a702:	2800      	cmp	r0, #0
 800a704:	f43f ae37 	beq.w	800a376 <_strtod_l+0x43e>
 800a708:	68c3      	ldr	r3, [r0, #12]
 800a70a:	4641      	mov	r1, r8
 800a70c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a70e:	2300      	movs	r3, #0
 800a710:	60c3      	str	r3, [r0, #12]
 800a712:	f7ff fa0b 	bl	8009b2c <__mcmp>
 800a716:	2800      	cmp	r0, #0
 800a718:	da3d      	bge.n	800a796 <_strtod_l+0x85e>
 800a71a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a71c:	ea53 030a 	orrs.w	r3, r3, sl
 800a720:	d163      	bne.n	800a7ea <_strtod_l+0x8b2>
 800a722:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a726:	2b00      	cmp	r3, #0
 800a728:	d15f      	bne.n	800a7ea <_strtod_l+0x8b2>
 800a72a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a72e:	0d1b      	lsrs	r3, r3, #20
 800a730:	051b      	lsls	r3, r3, #20
 800a732:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a736:	d958      	bls.n	800a7ea <_strtod_l+0x8b2>
 800a738:	6963      	ldr	r3, [r4, #20]
 800a73a:	b913      	cbnz	r3, 800a742 <_strtod_l+0x80a>
 800a73c:	6923      	ldr	r3, [r4, #16]
 800a73e:	2b01      	cmp	r3, #1
 800a740:	dd53      	ble.n	800a7ea <_strtod_l+0x8b2>
 800a742:	4621      	mov	r1, r4
 800a744:	2201      	movs	r2, #1
 800a746:	9805      	ldr	r0, [sp, #20]
 800a748:	f7ff f984 	bl	8009a54 <__lshift>
 800a74c:	4641      	mov	r1, r8
 800a74e:	4604      	mov	r4, r0
 800a750:	f7ff f9ec 	bl	8009b2c <__mcmp>
 800a754:	2800      	cmp	r0, #0
 800a756:	dd48      	ble.n	800a7ea <_strtod_l+0x8b2>
 800a758:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a75c:	9a08      	ldr	r2, [sp, #32]
 800a75e:	0d1b      	lsrs	r3, r3, #20
 800a760:	051b      	lsls	r3, r3, #20
 800a762:	2a00      	cmp	r2, #0
 800a764:	d062      	beq.n	800a82c <_strtod_l+0x8f4>
 800a766:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a76a:	d85f      	bhi.n	800a82c <_strtod_l+0x8f4>
 800a76c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a770:	f67f ae94 	bls.w	800a49c <_strtod_l+0x564>
 800a774:	4650      	mov	r0, sl
 800a776:	4659      	mov	r1, fp
 800a778:	4ba3      	ldr	r3, [pc, #652]	@ (800aa08 <_strtod_l+0xad0>)
 800a77a:	2200      	movs	r2, #0
 800a77c:	f7f5 fece 	bl	800051c <__aeabi_dmul>
 800a780:	4ba2      	ldr	r3, [pc, #648]	@ (800aa0c <_strtod_l+0xad4>)
 800a782:	4682      	mov	sl, r0
 800a784:	400b      	ands	r3, r1
 800a786:	468b      	mov	fp, r1
 800a788:	2b00      	cmp	r3, #0
 800a78a:	f47f adff 	bne.w	800a38c <_strtod_l+0x454>
 800a78e:	2322      	movs	r3, #34	@ 0x22
 800a790:	9a05      	ldr	r2, [sp, #20]
 800a792:	6013      	str	r3, [r2, #0]
 800a794:	e5fa      	b.n	800a38c <_strtod_l+0x454>
 800a796:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a79a:	d165      	bne.n	800a868 <_strtod_l+0x930>
 800a79c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a79e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a7a2:	b35a      	cbz	r2, 800a7fc <_strtod_l+0x8c4>
 800a7a4:	4a9a      	ldr	r2, [pc, #616]	@ (800aa10 <_strtod_l+0xad8>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d12b      	bne.n	800a802 <_strtod_l+0x8ca>
 800a7aa:	9b08      	ldr	r3, [sp, #32]
 800a7ac:	4651      	mov	r1, sl
 800a7ae:	b303      	cbz	r3, 800a7f2 <_strtod_l+0x8ba>
 800a7b0:	465a      	mov	r2, fp
 800a7b2:	4b96      	ldr	r3, [pc, #600]	@ (800aa0c <_strtod_l+0xad4>)
 800a7b4:	4013      	ands	r3, r2
 800a7b6:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a7ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a7be:	d81b      	bhi.n	800a7f8 <_strtod_l+0x8c0>
 800a7c0:	0d1b      	lsrs	r3, r3, #20
 800a7c2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a7c6:	fa02 f303 	lsl.w	r3, r2, r3
 800a7ca:	4299      	cmp	r1, r3
 800a7cc:	d119      	bne.n	800a802 <_strtod_l+0x8ca>
 800a7ce:	4b91      	ldr	r3, [pc, #580]	@ (800aa14 <_strtod_l+0xadc>)
 800a7d0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d102      	bne.n	800a7dc <_strtod_l+0x8a4>
 800a7d6:	3101      	adds	r1, #1
 800a7d8:	f43f adcd 	beq.w	800a376 <_strtod_l+0x43e>
 800a7dc:	f04f 0a00 	mov.w	sl, #0
 800a7e0:	4b8a      	ldr	r3, [pc, #552]	@ (800aa0c <_strtod_l+0xad4>)
 800a7e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a7e4:	401a      	ands	r2, r3
 800a7e6:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a7ea:	9b08      	ldr	r3, [sp, #32]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d1c1      	bne.n	800a774 <_strtod_l+0x83c>
 800a7f0:	e5cc      	b.n	800a38c <_strtod_l+0x454>
 800a7f2:	f04f 33ff 	mov.w	r3, #4294967295
 800a7f6:	e7e8      	b.n	800a7ca <_strtod_l+0x892>
 800a7f8:	4613      	mov	r3, r2
 800a7fa:	e7e6      	b.n	800a7ca <_strtod_l+0x892>
 800a7fc:	ea53 030a 	orrs.w	r3, r3, sl
 800a800:	d0aa      	beq.n	800a758 <_strtod_l+0x820>
 800a802:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a804:	b1db      	cbz	r3, 800a83e <_strtod_l+0x906>
 800a806:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a808:	4213      	tst	r3, r2
 800a80a:	d0ee      	beq.n	800a7ea <_strtod_l+0x8b2>
 800a80c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a80e:	4650      	mov	r0, sl
 800a810:	4659      	mov	r1, fp
 800a812:	9a08      	ldr	r2, [sp, #32]
 800a814:	b1bb      	cbz	r3, 800a846 <_strtod_l+0x90e>
 800a816:	f7ff fb6d 	bl	8009ef4 <sulp>
 800a81a:	4602      	mov	r2, r0
 800a81c:	460b      	mov	r3, r1
 800a81e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a822:	f7f5 fcc5 	bl	80001b0 <__adddf3>
 800a826:	4682      	mov	sl, r0
 800a828:	468b      	mov	fp, r1
 800a82a:	e7de      	b.n	800a7ea <_strtod_l+0x8b2>
 800a82c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a830:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a834:	f04f 3aff 	mov.w	sl, #4294967295
 800a838:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a83c:	e7d5      	b.n	800a7ea <_strtod_l+0x8b2>
 800a83e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a840:	ea13 0f0a 	tst.w	r3, sl
 800a844:	e7e1      	b.n	800a80a <_strtod_l+0x8d2>
 800a846:	f7ff fb55 	bl	8009ef4 <sulp>
 800a84a:	4602      	mov	r2, r0
 800a84c:	460b      	mov	r3, r1
 800a84e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a852:	f7f5 fcab 	bl	80001ac <__aeabi_dsub>
 800a856:	2200      	movs	r2, #0
 800a858:	2300      	movs	r3, #0
 800a85a:	4682      	mov	sl, r0
 800a85c:	468b      	mov	fp, r1
 800a85e:	f7f6 f8c5 	bl	80009ec <__aeabi_dcmpeq>
 800a862:	2800      	cmp	r0, #0
 800a864:	d0c1      	beq.n	800a7ea <_strtod_l+0x8b2>
 800a866:	e619      	b.n	800a49c <_strtod_l+0x564>
 800a868:	4641      	mov	r1, r8
 800a86a:	4620      	mov	r0, r4
 800a86c:	f7ff face 	bl	8009e0c <__ratio>
 800a870:	2200      	movs	r2, #0
 800a872:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a876:	4606      	mov	r6, r0
 800a878:	460f      	mov	r7, r1
 800a87a:	f7f6 f8cb 	bl	8000a14 <__aeabi_dcmple>
 800a87e:	2800      	cmp	r0, #0
 800a880:	d06d      	beq.n	800a95e <_strtod_l+0xa26>
 800a882:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a884:	2b00      	cmp	r3, #0
 800a886:	d178      	bne.n	800a97a <_strtod_l+0xa42>
 800a888:	f1ba 0f00 	cmp.w	sl, #0
 800a88c:	d156      	bne.n	800a93c <_strtod_l+0xa04>
 800a88e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a890:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a894:	2b00      	cmp	r3, #0
 800a896:	d158      	bne.n	800a94a <_strtod_l+0xa12>
 800a898:	2200      	movs	r2, #0
 800a89a:	4630      	mov	r0, r6
 800a89c:	4639      	mov	r1, r7
 800a89e:	4b5e      	ldr	r3, [pc, #376]	@ (800aa18 <_strtod_l+0xae0>)
 800a8a0:	f7f6 f8ae 	bl	8000a00 <__aeabi_dcmplt>
 800a8a4:	2800      	cmp	r0, #0
 800a8a6:	d157      	bne.n	800a958 <_strtod_l+0xa20>
 800a8a8:	4630      	mov	r0, r6
 800a8aa:	4639      	mov	r1, r7
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	4b5b      	ldr	r3, [pc, #364]	@ (800aa1c <_strtod_l+0xae4>)
 800a8b0:	f7f5 fe34 	bl	800051c <__aeabi_dmul>
 800a8b4:	4606      	mov	r6, r0
 800a8b6:	460f      	mov	r7, r1
 800a8b8:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a8bc:	9606      	str	r6, [sp, #24]
 800a8be:	9307      	str	r3, [sp, #28]
 800a8c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a8c4:	4d51      	ldr	r5, [pc, #324]	@ (800aa0c <_strtod_l+0xad4>)
 800a8c6:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a8ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8cc:	401d      	ands	r5, r3
 800a8ce:	4b54      	ldr	r3, [pc, #336]	@ (800aa20 <_strtod_l+0xae8>)
 800a8d0:	429d      	cmp	r5, r3
 800a8d2:	f040 80ab 	bne.w	800aa2c <_strtod_l+0xaf4>
 800a8d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8d8:	4650      	mov	r0, sl
 800a8da:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a8de:	4659      	mov	r1, fp
 800a8e0:	f7ff f9d4 	bl	8009c8c <__ulp>
 800a8e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a8e8:	f7f5 fe18 	bl	800051c <__aeabi_dmul>
 800a8ec:	4652      	mov	r2, sl
 800a8ee:	465b      	mov	r3, fp
 800a8f0:	f7f5 fc5e 	bl	80001b0 <__adddf3>
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	4945      	ldr	r1, [pc, #276]	@ (800aa0c <_strtod_l+0xad4>)
 800a8f8:	4a4a      	ldr	r2, [pc, #296]	@ (800aa24 <_strtod_l+0xaec>)
 800a8fa:	4019      	ands	r1, r3
 800a8fc:	4291      	cmp	r1, r2
 800a8fe:	4682      	mov	sl, r0
 800a900:	d942      	bls.n	800a988 <_strtod_l+0xa50>
 800a902:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a904:	4b43      	ldr	r3, [pc, #268]	@ (800aa14 <_strtod_l+0xadc>)
 800a906:	429a      	cmp	r2, r3
 800a908:	d103      	bne.n	800a912 <_strtod_l+0x9da>
 800a90a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a90c:	3301      	adds	r3, #1
 800a90e:	f43f ad32 	beq.w	800a376 <_strtod_l+0x43e>
 800a912:	f04f 3aff 	mov.w	sl, #4294967295
 800a916:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 800aa14 <_strtod_l+0xadc>
 800a91a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a91c:	9805      	ldr	r0, [sp, #20]
 800a91e:	f7fe fe89 	bl	8009634 <_Bfree>
 800a922:	4649      	mov	r1, r9
 800a924:	9805      	ldr	r0, [sp, #20]
 800a926:	f7fe fe85 	bl	8009634 <_Bfree>
 800a92a:	4641      	mov	r1, r8
 800a92c:	9805      	ldr	r0, [sp, #20]
 800a92e:	f7fe fe81 	bl	8009634 <_Bfree>
 800a932:	4621      	mov	r1, r4
 800a934:	9805      	ldr	r0, [sp, #20]
 800a936:	f7fe fe7d 	bl	8009634 <_Bfree>
 800a93a:	e61c      	b.n	800a576 <_strtod_l+0x63e>
 800a93c:	f1ba 0f01 	cmp.w	sl, #1
 800a940:	d103      	bne.n	800a94a <_strtod_l+0xa12>
 800a942:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a944:	2b00      	cmp	r3, #0
 800a946:	f43f ada9 	beq.w	800a49c <_strtod_l+0x564>
 800a94a:	2200      	movs	r2, #0
 800a94c:	4b36      	ldr	r3, [pc, #216]	@ (800aa28 <_strtod_l+0xaf0>)
 800a94e:	2600      	movs	r6, #0
 800a950:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a954:	4f30      	ldr	r7, [pc, #192]	@ (800aa18 <_strtod_l+0xae0>)
 800a956:	e7b3      	b.n	800a8c0 <_strtod_l+0x988>
 800a958:	2600      	movs	r6, #0
 800a95a:	4f30      	ldr	r7, [pc, #192]	@ (800aa1c <_strtod_l+0xae4>)
 800a95c:	e7ac      	b.n	800a8b8 <_strtod_l+0x980>
 800a95e:	4630      	mov	r0, r6
 800a960:	4639      	mov	r1, r7
 800a962:	4b2e      	ldr	r3, [pc, #184]	@ (800aa1c <_strtod_l+0xae4>)
 800a964:	2200      	movs	r2, #0
 800a966:	f7f5 fdd9 	bl	800051c <__aeabi_dmul>
 800a96a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a96c:	4606      	mov	r6, r0
 800a96e:	460f      	mov	r7, r1
 800a970:	2b00      	cmp	r3, #0
 800a972:	d0a1      	beq.n	800a8b8 <_strtod_l+0x980>
 800a974:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a978:	e7a2      	b.n	800a8c0 <_strtod_l+0x988>
 800a97a:	2200      	movs	r2, #0
 800a97c:	4b26      	ldr	r3, [pc, #152]	@ (800aa18 <_strtod_l+0xae0>)
 800a97e:	4616      	mov	r6, r2
 800a980:	461f      	mov	r7, r3
 800a982:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a986:	e79b      	b.n	800a8c0 <_strtod_l+0x988>
 800a988:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a98c:	9b08      	ldr	r3, [sp, #32]
 800a98e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a992:	2b00      	cmp	r3, #0
 800a994:	d1c1      	bne.n	800a91a <_strtod_l+0x9e2>
 800a996:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a99a:	0d1b      	lsrs	r3, r3, #20
 800a99c:	051b      	lsls	r3, r3, #20
 800a99e:	429d      	cmp	r5, r3
 800a9a0:	d1bb      	bne.n	800a91a <_strtod_l+0x9e2>
 800a9a2:	4630      	mov	r0, r6
 800a9a4:	4639      	mov	r1, r7
 800a9a6:	f7f6 fc33 	bl	8001210 <__aeabi_d2lz>
 800a9aa:	f7f5 fd89 	bl	80004c0 <__aeabi_l2d>
 800a9ae:	4602      	mov	r2, r0
 800a9b0:	460b      	mov	r3, r1
 800a9b2:	4630      	mov	r0, r6
 800a9b4:	4639      	mov	r1, r7
 800a9b6:	f7f5 fbf9 	bl	80001ac <__aeabi_dsub>
 800a9ba:	460b      	mov	r3, r1
 800a9bc:	4602      	mov	r2, r0
 800a9be:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a9c2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a9c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9c8:	ea46 060a 	orr.w	r6, r6, sl
 800a9cc:	431e      	orrs	r6, r3
 800a9ce:	d06a      	beq.n	800aaa6 <_strtod_l+0xb6e>
 800a9d0:	a309      	add	r3, pc, #36	@ (adr r3, 800a9f8 <_strtod_l+0xac0>)
 800a9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d6:	f7f6 f813 	bl	8000a00 <__aeabi_dcmplt>
 800a9da:	2800      	cmp	r0, #0
 800a9dc:	f47f acd6 	bne.w	800a38c <_strtod_l+0x454>
 800a9e0:	a307      	add	r3, pc, #28	@ (adr r3, 800aa00 <_strtod_l+0xac8>)
 800a9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a9ea:	f7f6 f827 	bl	8000a3c <__aeabi_dcmpgt>
 800a9ee:	2800      	cmp	r0, #0
 800a9f0:	d093      	beq.n	800a91a <_strtod_l+0x9e2>
 800a9f2:	e4cb      	b.n	800a38c <_strtod_l+0x454>
 800a9f4:	f3af 8000 	nop.w
 800a9f8:	94a03595 	.word	0x94a03595
 800a9fc:	3fdfffff 	.word	0x3fdfffff
 800aa00:	35afe535 	.word	0x35afe535
 800aa04:	3fe00000 	.word	0x3fe00000
 800aa08:	39500000 	.word	0x39500000
 800aa0c:	7ff00000 	.word	0x7ff00000
 800aa10:	000fffff 	.word	0x000fffff
 800aa14:	7fefffff 	.word	0x7fefffff
 800aa18:	3ff00000 	.word	0x3ff00000
 800aa1c:	3fe00000 	.word	0x3fe00000
 800aa20:	7fe00000 	.word	0x7fe00000
 800aa24:	7c9fffff 	.word	0x7c9fffff
 800aa28:	bff00000 	.word	0xbff00000
 800aa2c:	9b08      	ldr	r3, [sp, #32]
 800aa2e:	b323      	cbz	r3, 800aa7a <_strtod_l+0xb42>
 800aa30:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800aa34:	d821      	bhi.n	800aa7a <_strtod_l+0xb42>
 800aa36:	a328      	add	r3, pc, #160	@ (adr r3, 800aad8 <_strtod_l+0xba0>)
 800aa38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa3c:	4630      	mov	r0, r6
 800aa3e:	4639      	mov	r1, r7
 800aa40:	f7f5 ffe8 	bl	8000a14 <__aeabi_dcmple>
 800aa44:	b1a0      	cbz	r0, 800aa70 <_strtod_l+0xb38>
 800aa46:	4639      	mov	r1, r7
 800aa48:	4630      	mov	r0, r6
 800aa4a:	f7f6 f83f 	bl	8000acc <__aeabi_d2uiz>
 800aa4e:	2801      	cmp	r0, #1
 800aa50:	bf38      	it	cc
 800aa52:	2001      	movcc	r0, #1
 800aa54:	f7f5 fce8 	bl	8000428 <__aeabi_ui2d>
 800aa58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa5a:	4606      	mov	r6, r0
 800aa5c:	460f      	mov	r7, r1
 800aa5e:	b9fb      	cbnz	r3, 800aaa0 <_strtod_l+0xb68>
 800aa60:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aa64:	9014      	str	r0, [sp, #80]	@ 0x50
 800aa66:	9315      	str	r3, [sp, #84]	@ 0x54
 800aa68:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800aa6c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800aa70:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800aa72:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800aa76:	1b5b      	subs	r3, r3, r5
 800aa78:	9311      	str	r3, [sp, #68]	@ 0x44
 800aa7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa7e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800aa82:	f7ff f903 	bl	8009c8c <__ulp>
 800aa86:	4602      	mov	r2, r0
 800aa88:	460b      	mov	r3, r1
 800aa8a:	4650      	mov	r0, sl
 800aa8c:	4659      	mov	r1, fp
 800aa8e:	f7f5 fd45 	bl	800051c <__aeabi_dmul>
 800aa92:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800aa96:	f7f5 fb8b 	bl	80001b0 <__adddf3>
 800aa9a:	4682      	mov	sl, r0
 800aa9c:	468b      	mov	fp, r1
 800aa9e:	e775      	b.n	800a98c <_strtod_l+0xa54>
 800aaa0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800aaa4:	e7e0      	b.n	800aa68 <_strtod_l+0xb30>
 800aaa6:	a30e      	add	r3, pc, #56	@ (adr r3, 800aae0 <_strtod_l+0xba8>)
 800aaa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaac:	f7f5 ffa8 	bl	8000a00 <__aeabi_dcmplt>
 800aab0:	e79d      	b.n	800a9ee <_strtod_l+0xab6>
 800aab2:	2300      	movs	r3, #0
 800aab4:	930e      	str	r3, [sp, #56]	@ 0x38
 800aab6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aab8:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800aaba:	6013      	str	r3, [r2, #0]
 800aabc:	f7ff ba79 	b.w	8009fb2 <_strtod_l+0x7a>
 800aac0:	2a65      	cmp	r2, #101	@ 0x65
 800aac2:	f43f ab72 	beq.w	800a1aa <_strtod_l+0x272>
 800aac6:	2a45      	cmp	r2, #69	@ 0x45
 800aac8:	f43f ab6f 	beq.w	800a1aa <_strtod_l+0x272>
 800aacc:	2301      	movs	r3, #1
 800aace:	f7ff bbaa 	b.w	800a226 <_strtod_l+0x2ee>
 800aad2:	bf00      	nop
 800aad4:	f3af 8000 	nop.w
 800aad8:	ffc00000 	.word	0xffc00000
 800aadc:	41dfffff 	.word	0x41dfffff
 800aae0:	94a03595 	.word	0x94a03595
 800aae4:	3fcfffff 	.word	0x3fcfffff

0800aae8 <_strtod_r>:
 800aae8:	4b01      	ldr	r3, [pc, #4]	@ (800aaf0 <_strtod_r+0x8>)
 800aaea:	f7ff ba25 	b.w	8009f38 <_strtod_l>
 800aaee:	bf00      	nop
 800aaf0:	20000084 	.word	0x20000084

0800aaf4 <_strtol_l.isra.0>:
 800aaf4:	2b24      	cmp	r3, #36	@ 0x24
 800aaf6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aafa:	4686      	mov	lr, r0
 800aafc:	4690      	mov	r8, r2
 800aafe:	d801      	bhi.n	800ab04 <_strtol_l.isra.0+0x10>
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	d106      	bne.n	800ab12 <_strtol_l.isra.0+0x1e>
 800ab04:	f7fd fdbc 	bl	8008680 <__errno>
 800ab08:	2316      	movs	r3, #22
 800ab0a:	6003      	str	r3, [r0, #0]
 800ab0c:	2000      	movs	r0, #0
 800ab0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab12:	460d      	mov	r5, r1
 800ab14:	4833      	ldr	r0, [pc, #204]	@ (800abe4 <_strtol_l.isra.0+0xf0>)
 800ab16:	462a      	mov	r2, r5
 800ab18:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab1c:	5d06      	ldrb	r6, [r0, r4]
 800ab1e:	f016 0608 	ands.w	r6, r6, #8
 800ab22:	d1f8      	bne.n	800ab16 <_strtol_l.isra.0+0x22>
 800ab24:	2c2d      	cmp	r4, #45	@ 0x2d
 800ab26:	d110      	bne.n	800ab4a <_strtol_l.isra.0+0x56>
 800ab28:	2601      	movs	r6, #1
 800ab2a:	782c      	ldrb	r4, [r5, #0]
 800ab2c:	1c95      	adds	r5, r2, #2
 800ab2e:	f033 0210 	bics.w	r2, r3, #16
 800ab32:	d115      	bne.n	800ab60 <_strtol_l.isra.0+0x6c>
 800ab34:	2c30      	cmp	r4, #48	@ 0x30
 800ab36:	d10d      	bne.n	800ab54 <_strtol_l.isra.0+0x60>
 800ab38:	782a      	ldrb	r2, [r5, #0]
 800ab3a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ab3e:	2a58      	cmp	r2, #88	@ 0x58
 800ab40:	d108      	bne.n	800ab54 <_strtol_l.isra.0+0x60>
 800ab42:	786c      	ldrb	r4, [r5, #1]
 800ab44:	3502      	adds	r5, #2
 800ab46:	2310      	movs	r3, #16
 800ab48:	e00a      	b.n	800ab60 <_strtol_l.isra.0+0x6c>
 800ab4a:	2c2b      	cmp	r4, #43	@ 0x2b
 800ab4c:	bf04      	itt	eq
 800ab4e:	782c      	ldrbeq	r4, [r5, #0]
 800ab50:	1c95      	addeq	r5, r2, #2
 800ab52:	e7ec      	b.n	800ab2e <_strtol_l.isra.0+0x3a>
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d1f6      	bne.n	800ab46 <_strtol_l.isra.0+0x52>
 800ab58:	2c30      	cmp	r4, #48	@ 0x30
 800ab5a:	bf14      	ite	ne
 800ab5c:	230a      	movne	r3, #10
 800ab5e:	2308      	moveq	r3, #8
 800ab60:	2200      	movs	r2, #0
 800ab62:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ab66:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ab6a:	fbbc f9f3 	udiv	r9, ip, r3
 800ab6e:	4610      	mov	r0, r2
 800ab70:	fb03 ca19 	mls	sl, r3, r9, ip
 800ab74:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ab78:	2f09      	cmp	r7, #9
 800ab7a:	d80f      	bhi.n	800ab9c <_strtol_l.isra.0+0xa8>
 800ab7c:	463c      	mov	r4, r7
 800ab7e:	42a3      	cmp	r3, r4
 800ab80:	dd1b      	ble.n	800abba <_strtol_l.isra.0+0xc6>
 800ab82:	1c57      	adds	r7, r2, #1
 800ab84:	d007      	beq.n	800ab96 <_strtol_l.isra.0+0xa2>
 800ab86:	4581      	cmp	r9, r0
 800ab88:	d314      	bcc.n	800abb4 <_strtol_l.isra.0+0xc0>
 800ab8a:	d101      	bne.n	800ab90 <_strtol_l.isra.0+0x9c>
 800ab8c:	45a2      	cmp	sl, r4
 800ab8e:	db11      	blt.n	800abb4 <_strtol_l.isra.0+0xc0>
 800ab90:	2201      	movs	r2, #1
 800ab92:	fb00 4003 	mla	r0, r0, r3, r4
 800ab96:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab9a:	e7eb      	b.n	800ab74 <_strtol_l.isra.0+0x80>
 800ab9c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800aba0:	2f19      	cmp	r7, #25
 800aba2:	d801      	bhi.n	800aba8 <_strtol_l.isra.0+0xb4>
 800aba4:	3c37      	subs	r4, #55	@ 0x37
 800aba6:	e7ea      	b.n	800ab7e <_strtol_l.isra.0+0x8a>
 800aba8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800abac:	2f19      	cmp	r7, #25
 800abae:	d804      	bhi.n	800abba <_strtol_l.isra.0+0xc6>
 800abb0:	3c57      	subs	r4, #87	@ 0x57
 800abb2:	e7e4      	b.n	800ab7e <_strtol_l.isra.0+0x8a>
 800abb4:	f04f 32ff 	mov.w	r2, #4294967295
 800abb8:	e7ed      	b.n	800ab96 <_strtol_l.isra.0+0xa2>
 800abba:	1c53      	adds	r3, r2, #1
 800abbc:	d108      	bne.n	800abd0 <_strtol_l.isra.0+0xdc>
 800abbe:	2322      	movs	r3, #34	@ 0x22
 800abc0:	4660      	mov	r0, ip
 800abc2:	f8ce 3000 	str.w	r3, [lr]
 800abc6:	f1b8 0f00 	cmp.w	r8, #0
 800abca:	d0a0      	beq.n	800ab0e <_strtol_l.isra.0+0x1a>
 800abcc:	1e69      	subs	r1, r5, #1
 800abce:	e006      	b.n	800abde <_strtol_l.isra.0+0xea>
 800abd0:	b106      	cbz	r6, 800abd4 <_strtol_l.isra.0+0xe0>
 800abd2:	4240      	negs	r0, r0
 800abd4:	f1b8 0f00 	cmp.w	r8, #0
 800abd8:	d099      	beq.n	800ab0e <_strtol_l.isra.0+0x1a>
 800abda:	2a00      	cmp	r2, #0
 800abdc:	d1f6      	bne.n	800abcc <_strtol_l.isra.0+0xd8>
 800abde:	f8c8 1000 	str.w	r1, [r8]
 800abe2:	e794      	b.n	800ab0e <_strtol_l.isra.0+0x1a>
 800abe4:	08017a21 	.word	0x08017a21

0800abe8 <_strtol_r>:
 800abe8:	f7ff bf84 	b.w	800aaf4 <_strtol_l.isra.0>

0800abec <__ssputs_r>:
 800abec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abf0:	461f      	mov	r7, r3
 800abf2:	688e      	ldr	r6, [r1, #8]
 800abf4:	4682      	mov	sl, r0
 800abf6:	42be      	cmp	r6, r7
 800abf8:	460c      	mov	r4, r1
 800abfa:	4690      	mov	r8, r2
 800abfc:	680b      	ldr	r3, [r1, #0]
 800abfe:	d82d      	bhi.n	800ac5c <__ssputs_r+0x70>
 800ac00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ac04:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ac08:	d026      	beq.n	800ac58 <__ssputs_r+0x6c>
 800ac0a:	6965      	ldr	r5, [r4, #20]
 800ac0c:	6909      	ldr	r1, [r1, #16]
 800ac0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac12:	eba3 0901 	sub.w	r9, r3, r1
 800ac16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac1a:	1c7b      	adds	r3, r7, #1
 800ac1c:	444b      	add	r3, r9
 800ac1e:	106d      	asrs	r5, r5, #1
 800ac20:	429d      	cmp	r5, r3
 800ac22:	bf38      	it	cc
 800ac24:	461d      	movcc	r5, r3
 800ac26:	0553      	lsls	r3, r2, #21
 800ac28:	d527      	bpl.n	800ac7a <__ssputs_r+0x8e>
 800ac2a:	4629      	mov	r1, r5
 800ac2c:	f7fe fc36 	bl	800949c <_malloc_r>
 800ac30:	4606      	mov	r6, r0
 800ac32:	b360      	cbz	r0, 800ac8e <__ssputs_r+0xa2>
 800ac34:	464a      	mov	r2, r9
 800ac36:	6921      	ldr	r1, [r4, #16]
 800ac38:	f000 fbd8 	bl	800b3ec <memcpy>
 800ac3c:	89a3      	ldrh	r3, [r4, #12]
 800ac3e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ac42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac46:	81a3      	strh	r3, [r4, #12]
 800ac48:	6126      	str	r6, [r4, #16]
 800ac4a:	444e      	add	r6, r9
 800ac4c:	6026      	str	r6, [r4, #0]
 800ac4e:	463e      	mov	r6, r7
 800ac50:	6165      	str	r5, [r4, #20]
 800ac52:	eba5 0509 	sub.w	r5, r5, r9
 800ac56:	60a5      	str	r5, [r4, #8]
 800ac58:	42be      	cmp	r6, r7
 800ac5a:	d900      	bls.n	800ac5e <__ssputs_r+0x72>
 800ac5c:	463e      	mov	r6, r7
 800ac5e:	4632      	mov	r2, r6
 800ac60:	4641      	mov	r1, r8
 800ac62:	6820      	ldr	r0, [r4, #0]
 800ac64:	f000 fb63 	bl	800b32e <memmove>
 800ac68:	2000      	movs	r0, #0
 800ac6a:	68a3      	ldr	r3, [r4, #8]
 800ac6c:	1b9b      	subs	r3, r3, r6
 800ac6e:	60a3      	str	r3, [r4, #8]
 800ac70:	6823      	ldr	r3, [r4, #0]
 800ac72:	4433      	add	r3, r6
 800ac74:	6023      	str	r3, [r4, #0]
 800ac76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac7a:	462a      	mov	r2, r5
 800ac7c:	f000 ff47 	bl	800bb0e <_realloc_r>
 800ac80:	4606      	mov	r6, r0
 800ac82:	2800      	cmp	r0, #0
 800ac84:	d1e0      	bne.n	800ac48 <__ssputs_r+0x5c>
 800ac86:	4650      	mov	r0, sl
 800ac88:	6921      	ldr	r1, [r4, #16]
 800ac8a:	f7fe fb95 	bl	80093b8 <_free_r>
 800ac8e:	230c      	movs	r3, #12
 800ac90:	f8ca 3000 	str.w	r3, [sl]
 800ac94:	89a3      	ldrh	r3, [r4, #12]
 800ac96:	f04f 30ff 	mov.w	r0, #4294967295
 800ac9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac9e:	81a3      	strh	r3, [r4, #12]
 800aca0:	e7e9      	b.n	800ac76 <__ssputs_r+0x8a>
	...

0800aca4 <_svfiprintf_r>:
 800aca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aca8:	4698      	mov	r8, r3
 800acaa:	898b      	ldrh	r3, [r1, #12]
 800acac:	4607      	mov	r7, r0
 800acae:	061b      	lsls	r3, r3, #24
 800acb0:	460d      	mov	r5, r1
 800acb2:	4614      	mov	r4, r2
 800acb4:	b09d      	sub	sp, #116	@ 0x74
 800acb6:	d510      	bpl.n	800acda <_svfiprintf_r+0x36>
 800acb8:	690b      	ldr	r3, [r1, #16]
 800acba:	b973      	cbnz	r3, 800acda <_svfiprintf_r+0x36>
 800acbc:	2140      	movs	r1, #64	@ 0x40
 800acbe:	f7fe fbed 	bl	800949c <_malloc_r>
 800acc2:	6028      	str	r0, [r5, #0]
 800acc4:	6128      	str	r0, [r5, #16]
 800acc6:	b930      	cbnz	r0, 800acd6 <_svfiprintf_r+0x32>
 800acc8:	230c      	movs	r3, #12
 800acca:	603b      	str	r3, [r7, #0]
 800accc:	f04f 30ff 	mov.w	r0, #4294967295
 800acd0:	b01d      	add	sp, #116	@ 0x74
 800acd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acd6:	2340      	movs	r3, #64	@ 0x40
 800acd8:	616b      	str	r3, [r5, #20]
 800acda:	2300      	movs	r3, #0
 800acdc:	9309      	str	r3, [sp, #36]	@ 0x24
 800acde:	2320      	movs	r3, #32
 800ace0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ace4:	2330      	movs	r3, #48	@ 0x30
 800ace6:	f04f 0901 	mov.w	r9, #1
 800acea:	f8cd 800c 	str.w	r8, [sp, #12]
 800acee:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800ae88 <_svfiprintf_r+0x1e4>
 800acf2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800acf6:	4623      	mov	r3, r4
 800acf8:	469a      	mov	sl, r3
 800acfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acfe:	b10a      	cbz	r2, 800ad04 <_svfiprintf_r+0x60>
 800ad00:	2a25      	cmp	r2, #37	@ 0x25
 800ad02:	d1f9      	bne.n	800acf8 <_svfiprintf_r+0x54>
 800ad04:	ebba 0b04 	subs.w	fp, sl, r4
 800ad08:	d00b      	beq.n	800ad22 <_svfiprintf_r+0x7e>
 800ad0a:	465b      	mov	r3, fp
 800ad0c:	4622      	mov	r2, r4
 800ad0e:	4629      	mov	r1, r5
 800ad10:	4638      	mov	r0, r7
 800ad12:	f7ff ff6b 	bl	800abec <__ssputs_r>
 800ad16:	3001      	adds	r0, #1
 800ad18:	f000 80a7 	beq.w	800ae6a <_svfiprintf_r+0x1c6>
 800ad1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad1e:	445a      	add	r2, fp
 800ad20:	9209      	str	r2, [sp, #36]	@ 0x24
 800ad22:	f89a 3000 	ldrb.w	r3, [sl]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	f000 809f 	beq.w	800ae6a <_svfiprintf_r+0x1c6>
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ad32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad36:	f10a 0a01 	add.w	sl, sl, #1
 800ad3a:	9304      	str	r3, [sp, #16]
 800ad3c:	9307      	str	r3, [sp, #28]
 800ad3e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ad42:	931a      	str	r3, [sp, #104]	@ 0x68
 800ad44:	4654      	mov	r4, sl
 800ad46:	2205      	movs	r2, #5
 800ad48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad4c:	484e      	ldr	r0, [pc, #312]	@ (800ae88 <_svfiprintf_r+0x1e4>)
 800ad4e:	f7fd fcc4 	bl	80086da <memchr>
 800ad52:	9a04      	ldr	r2, [sp, #16]
 800ad54:	b9d8      	cbnz	r0, 800ad8e <_svfiprintf_r+0xea>
 800ad56:	06d0      	lsls	r0, r2, #27
 800ad58:	bf44      	itt	mi
 800ad5a:	2320      	movmi	r3, #32
 800ad5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad60:	0711      	lsls	r1, r2, #28
 800ad62:	bf44      	itt	mi
 800ad64:	232b      	movmi	r3, #43	@ 0x2b
 800ad66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad6a:	f89a 3000 	ldrb.w	r3, [sl]
 800ad6e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad70:	d015      	beq.n	800ad9e <_svfiprintf_r+0xfa>
 800ad72:	4654      	mov	r4, sl
 800ad74:	2000      	movs	r0, #0
 800ad76:	f04f 0c0a 	mov.w	ip, #10
 800ad7a:	9a07      	ldr	r2, [sp, #28]
 800ad7c:	4621      	mov	r1, r4
 800ad7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad82:	3b30      	subs	r3, #48	@ 0x30
 800ad84:	2b09      	cmp	r3, #9
 800ad86:	d94b      	bls.n	800ae20 <_svfiprintf_r+0x17c>
 800ad88:	b1b0      	cbz	r0, 800adb8 <_svfiprintf_r+0x114>
 800ad8a:	9207      	str	r2, [sp, #28]
 800ad8c:	e014      	b.n	800adb8 <_svfiprintf_r+0x114>
 800ad8e:	eba0 0308 	sub.w	r3, r0, r8
 800ad92:	fa09 f303 	lsl.w	r3, r9, r3
 800ad96:	4313      	orrs	r3, r2
 800ad98:	46a2      	mov	sl, r4
 800ad9a:	9304      	str	r3, [sp, #16]
 800ad9c:	e7d2      	b.n	800ad44 <_svfiprintf_r+0xa0>
 800ad9e:	9b03      	ldr	r3, [sp, #12]
 800ada0:	1d19      	adds	r1, r3, #4
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	9103      	str	r1, [sp, #12]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	bfbb      	ittet	lt
 800adaa:	425b      	neglt	r3, r3
 800adac:	f042 0202 	orrlt.w	r2, r2, #2
 800adb0:	9307      	strge	r3, [sp, #28]
 800adb2:	9307      	strlt	r3, [sp, #28]
 800adb4:	bfb8      	it	lt
 800adb6:	9204      	strlt	r2, [sp, #16]
 800adb8:	7823      	ldrb	r3, [r4, #0]
 800adba:	2b2e      	cmp	r3, #46	@ 0x2e
 800adbc:	d10a      	bne.n	800add4 <_svfiprintf_r+0x130>
 800adbe:	7863      	ldrb	r3, [r4, #1]
 800adc0:	2b2a      	cmp	r3, #42	@ 0x2a
 800adc2:	d132      	bne.n	800ae2a <_svfiprintf_r+0x186>
 800adc4:	9b03      	ldr	r3, [sp, #12]
 800adc6:	3402      	adds	r4, #2
 800adc8:	1d1a      	adds	r2, r3, #4
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	9203      	str	r2, [sp, #12]
 800adce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800add2:	9305      	str	r3, [sp, #20]
 800add4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800ae8c <_svfiprintf_r+0x1e8>
 800add8:	2203      	movs	r2, #3
 800adda:	4650      	mov	r0, sl
 800addc:	7821      	ldrb	r1, [r4, #0]
 800adde:	f7fd fc7c 	bl	80086da <memchr>
 800ade2:	b138      	cbz	r0, 800adf4 <_svfiprintf_r+0x150>
 800ade4:	2240      	movs	r2, #64	@ 0x40
 800ade6:	9b04      	ldr	r3, [sp, #16]
 800ade8:	eba0 000a 	sub.w	r0, r0, sl
 800adec:	4082      	lsls	r2, r0
 800adee:	4313      	orrs	r3, r2
 800adf0:	3401      	adds	r4, #1
 800adf2:	9304      	str	r3, [sp, #16]
 800adf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adf8:	2206      	movs	r2, #6
 800adfa:	4825      	ldr	r0, [pc, #148]	@ (800ae90 <_svfiprintf_r+0x1ec>)
 800adfc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ae00:	f7fd fc6b 	bl	80086da <memchr>
 800ae04:	2800      	cmp	r0, #0
 800ae06:	d036      	beq.n	800ae76 <_svfiprintf_r+0x1d2>
 800ae08:	4b22      	ldr	r3, [pc, #136]	@ (800ae94 <_svfiprintf_r+0x1f0>)
 800ae0a:	bb1b      	cbnz	r3, 800ae54 <_svfiprintf_r+0x1b0>
 800ae0c:	9b03      	ldr	r3, [sp, #12]
 800ae0e:	3307      	adds	r3, #7
 800ae10:	f023 0307 	bic.w	r3, r3, #7
 800ae14:	3308      	adds	r3, #8
 800ae16:	9303      	str	r3, [sp, #12]
 800ae18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae1a:	4433      	add	r3, r6
 800ae1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae1e:	e76a      	b.n	800acf6 <_svfiprintf_r+0x52>
 800ae20:	460c      	mov	r4, r1
 800ae22:	2001      	movs	r0, #1
 800ae24:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae28:	e7a8      	b.n	800ad7c <_svfiprintf_r+0xd8>
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	f04f 0c0a 	mov.w	ip, #10
 800ae30:	4619      	mov	r1, r3
 800ae32:	3401      	adds	r4, #1
 800ae34:	9305      	str	r3, [sp, #20]
 800ae36:	4620      	mov	r0, r4
 800ae38:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae3c:	3a30      	subs	r2, #48	@ 0x30
 800ae3e:	2a09      	cmp	r2, #9
 800ae40:	d903      	bls.n	800ae4a <_svfiprintf_r+0x1a6>
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d0c6      	beq.n	800add4 <_svfiprintf_r+0x130>
 800ae46:	9105      	str	r1, [sp, #20]
 800ae48:	e7c4      	b.n	800add4 <_svfiprintf_r+0x130>
 800ae4a:	4604      	mov	r4, r0
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae52:	e7f0      	b.n	800ae36 <_svfiprintf_r+0x192>
 800ae54:	ab03      	add	r3, sp, #12
 800ae56:	9300      	str	r3, [sp, #0]
 800ae58:	462a      	mov	r2, r5
 800ae5a:	4638      	mov	r0, r7
 800ae5c:	4b0e      	ldr	r3, [pc, #56]	@ (800ae98 <_svfiprintf_r+0x1f4>)
 800ae5e:	a904      	add	r1, sp, #16
 800ae60:	f7fc fbca 	bl	80075f8 <_printf_float>
 800ae64:	1c42      	adds	r2, r0, #1
 800ae66:	4606      	mov	r6, r0
 800ae68:	d1d6      	bne.n	800ae18 <_svfiprintf_r+0x174>
 800ae6a:	89ab      	ldrh	r3, [r5, #12]
 800ae6c:	065b      	lsls	r3, r3, #25
 800ae6e:	f53f af2d 	bmi.w	800accc <_svfiprintf_r+0x28>
 800ae72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ae74:	e72c      	b.n	800acd0 <_svfiprintf_r+0x2c>
 800ae76:	ab03      	add	r3, sp, #12
 800ae78:	9300      	str	r3, [sp, #0]
 800ae7a:	462a      	mov	r2, r5
 800ae7c:	4638      	mov	r0, r7
 800ae7e:	4b06      	ldr	r3, [pc, #24]	@ (800ae98 <_svfiprintf_r+0x1f4>)
 800ae80:	a904      	add	r1, sp, #16
 800ae82:	f7fc fe57 	bl	8007b34 <_printf_i>
 800ae86:	e7ed      	b.n	800ae64 <_svfiprintf_r+0x1c0>
 800ae88:	08017819 	.word	0x08017819
 800ae8c:	0801781f 	.word	0x0801781f
 800ae90:	08017823 	.word	0x08017823
 800ae94:	080075f9 	.word	0x080075f9
 800ae98:	0800abed 	.word	0x0800abed

0800ae9c <__sfputc_r>:
 800ae9c:	6893      	ldr	r3, [r2, #8]
 800ae9e:	b410      	push	{r4}
 800aea0:	3b01      	subs	r3, #1
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	6093      	str	r3, [r2, #8]
 800aea6:	da07      	bge.n	800aeb8 <__sfputc_r+0x1c>
 800aea8:	6994      	ldr	r4, [r2, #24]
 800aeaa:	42a3      	cmp	r3, r4
 800aeac:	db01      	blt.n	800aeb2 <__sfputc_r+0x16>
 800aeae:	290a      	cmp	r1, #10
 800aeb0:	d102      	bne.n	800aeb8 <__sfputc_r+0x1c>
 800aeb2:	bc10      	pop	{r4}
 800aeb4:	f7fd bafd 	b.w	80084b2 <__swbuf_r>
 800aeb8:	6813      	ldr	r3, [r2, #0]
 800aeba:	1c58      	adds	r0, r3, #1
 800aebc:	6010      	str	r0, [r2, #0]
 800aebe:	7019      	strb	r1, [r3, #0]
 800aec0:	4608      	mov	r0, r1
 800aec2:	bc10      	pop	{r4}
 800aec4:	4770      	bx	lr

0800aec6 <__sfputs_r>:
 800aec6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aec8:	4606      	mov	r6, r0
 800aeca:	460f      	mov	r7, r1
 800aecc:	4614      	mov	r4, r2
 800aece:	18d5      	adds	r5, r2, r3
 800aed0:	42ac      	cmp	r4, r5
 800aed2:	d101      	bne.n	800aed8 <__sfputs_r+0x12>
 800aed4:	2000      	movs	r0, #0
 800aed6:	e007      	b.n	800aee8 <__sfputs_r+0x22>
 800aed8:	463a      	mov	r2, r7
 800aeda:	4630      	mov	r0, r6
 800aedc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aee0:	f7ff ffdc 	bl	800ae9c <__sfputc_r>
 800aee4:	1c43      	adds	r3, r0, #1
 800aee6:	d1f3      	bne.n	800aed0 <__sfputs_r+0xa>
 800aee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aeec <_vfiprintf_r>:
 800aeec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aef0:	460d      	mov	r5, r1
 800aef2:	4614      	mov	r4, r2
 800aef4:	4698      	mov	r8, r3
 800aef6:	4606      	mov	r6, r0
 800aef8:	b09d      	sub	sp, #116	@ 0x74
 800aefa:	b118      	cbz	r0, 800af04 <_vfiprintf_r+0x18>
 800aefc:	6a03      	ldr	r3, [r0, #32]
 800aefe:	b90b      	cbnz	r3, 800af04 <_vfiprintf_r+0x18>
 800af00:	f7fd f9cc 	bl	800829c <__sinit>
 800af04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af06:	07d9      	lsls	r1, r3, #31
 800af08:	d405      	bmi.n	800af16 <_vfiprintf_r+0x2a>
 800af0a:	89ab      	ldrh	r3, [r5, #12]
 800af0c:	059a      	lsls	r2, r3, #22
 800af0e:	d402      	bmi.n	800af16 <_vfiprintf_r+0x2a>
 800af10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af12:	f7fd fbe0 	bl	80086d6 <__retarget_lock_acquire_recursive>
 800af16:	89ab      	ldrh	r3, [r5, #12]
 800af18:	071b      	lsls	r3, r3, #28
 800af1a:	d501      	bpl.n	800af20 <_vfiprintf_r+0x34>
 800af1c:	692b      	ldr	r3, [r5, #16]
 800af1e:	b99b      	cbnz	r3, 800af48 <_vfiprintf_r+0x5c>
 800af20:	4629      	mov	r1, r5
 800af22:	4630      	mov	r0, r6
 800af24:	f7fd fb04 	bl	8008530 <__swsetup_r>
 800af28:	b170      	cbz	r0, 800af48 <_vfiprintf_r+0x5c>
 800af2a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af2c:	07dc      	lsls	r4, r3, #31
 800af2e:	d504      	bpl.n	800af3a <_vfiprintf_r+0x4e>
 800af30:	f04f 30ff 	mov.w	r0, #4294967295
 800af34:	b01d      	add	sp, #116	@ 0x74
 800af36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af3a:	89ab      	ldrh	r3, [r5, #12]
 800af3c:	0598      	lsls	r0, r3, #22
 800af3e:	d4f7      	bmi.n	800af30 <_vfiprintf_r+0x44>
 800af40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af42:	f7fd fbc9 	bl	80086d8 <__retarget_lock_release_recursive>
 800af46:	e7f3      	b.n	800af30 <_vfiprintf_r+0x44>
 800af48:	2300      	movs	r3, #0
 800af4a:	9309      	str	r3, [sp, #36]	@ 0x24
 800af4c:	2320      	movs	r3, #32
 800af4e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af52:	2330      	movs	r3, #48	@ 0x30
 800af54:	f04f 0901 	mov.w	r9, #1
 800af58:	f8cd 800c 	str.w	r8, [sp, #12]
 800af5c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800b108 <_vfiprintf_r+0x21c>
 800af60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800af64:	4623      	mov	r3, r4
 800af66:	469a      	mov	sl, r3
 800af68:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af6c:	b10a      	cbz	r2, 800af72 <_vfiprintf_r+0x86>
 800af6e:	2a25      	cmp	r2, #37	@ 0x25
 800af70:	d1f9      	bne.n	800af66 <_vfiprintf_r+0x7a>
 800af72:	ebba 0b04 	subs.w	fp, sl, r4
 800af76:	d00b      	beq.n	800af90 <_vfiprintf_r+0xa4>
 800af78:	465b      	mov	r3, fp
 800af7a:	4622      	mov	r2, r4
 800af7c:	4629      	mov	r1, r5
 800af7e:	4630      	mov	r0, r6
 800af80:	f7ff ffa1 	bl	800aec6 <__sfputs_r>
 800af84:	3001      	adds	r0, #1
 800af86:	f000 80a7 	beq.w	800b0d8 <_vfiprintf_r+0x1ec>
 800af8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af8c:	445a      	add	r2, fp
 800af8e:	9209      	str	r2, [sp, #36]	@ 0x24
 800af90:	f89a 3000 	ldrb.w	r3, [sl]
 800af94:	2b00      	cmp	r3, #0
 800af96:	f000 809f 	beq.w	800b0d8 <_vfiprintf_r+0x1ec>
 800af9a:	2300      	movs	r3, #0
 800af9c:	f04f 32ff 	mov.w	r2, #4294967295
 800afa0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afa4:	f10a 0a01 	add.w	sl, sl, #1
 800afa8:	9304      	str	r3, [sp, #16]
 800afaa:	9307      	str	r3, [sp, #28]
 800afac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800afb0:	931a      	str	r3, [sp, #104]	@ 0x68
 800afb2:	4654      	mov	r4, sl
 800afb4:	2205      	movs	r2, #5
 800afb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afba:	4853      	ldr	r0, [pc, #332]	@ (800b108 <_vfiprintf_r+0x21c>)
 800afbc:	f7fd fb8d 	bl	80086da <memchr>
 800afc0:	9a04      	ldr	r2, [sp, #16]
 800afc2:	b9d8      	cbnz	r0, 800affc <_vfiprintf_r+0x110>
 800afc4:	06d1      	lsls	r1, r2, #27
 800afc6:	bf44      	itt	mi
 800afc8:	2320      	movmi	r3, #32
 800afca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afce:	0713      	lsls	r3, r2, #28
 800afd0:	bf44      	itt	mi
 800afd2:	232b      	movmi	r3, #43	@ 0x2b
 800afd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afd8:	f89a 3000 	ldrb.w	r3, [sl]
 800afdc:	2b2a      	cmp	r3, #42	@ 0x2a
 800afde:	d015      	beq.n	800b00c <_vfiprintf_r+0x120>
 800afe0:	4654      	mov	r4, sl
 800afe2:	2000      	movs	r0, #0
 800afe4:	f04f 0c0a 	mov.w	ip, #10
 800afe8:	9a07      	ldr	r2, [sp, #28]
 800afea:	4621      	mov	r1, r4
 800afec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aff0:	3b30      	subs	r3, #48	@ 0x30
 800aff2:	2b09      	cmp	r3, #9
 800aff4:	d94b      	bls.n	800b08e <_vfiprintf_r+0x1a2>
 800aff6:	b1b0      	cbz	r0, 800b026 <_vfiprintf_r+0x13a>
 800aff8:	9207      	str	r2, [sp, #28]
 800affa:	e014      	b.n	800b026 <_vfiprintf_r+0x13a>
 800affc:	eba0 0308 	sub.w	r3, r0, r8
 800b000:	fa09 f303 	lsl.w	r3, r9, r3
 800b004:	4313      	orrs	r3, r2
 800b006:	46a2      	mov	sl, r4
 800b008:	9304      	str	r3, [sp, #16]
 800b00a:	e7d2      	b.n	800afb2 <_vfiprintf_r+0xc6>
 800b00c:	9b03      	ldr	r3, [sp, #12]
 800b00e:	1d19      	adds	r1, r3, #4
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	9103      	str	r1, [sp, #12]
 800b014:	2b00      	cmp	r3, #0
 800b016:	bfbb      	ittet	lt
 800b018:	425b      	neglt	r3, r3
 800b01a:	f042 0202 	orrlt.w	r2, r2, #2
 800b01e:	9307      	strge	r3, [sp, #28]
 800b020:	9307      	strlt	r3, [sp, #28]
 800b022:	bfb8      	it	lt
 800b024:	9204      	strlt	r2, [sp, #16]
 800b026:	7823      	ldrb	r3, [r4, #0]
 800b028:	2b2e      	cmp	r3, #46	@ 0x2e
 800b02a:	d10a      	bne.n	800b042 <_vfiprintf_r+0x156>
 800b02c:	7863      	ldrb	r3, [r4, #1]
 800b02e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b030:	d132      	bne.n	800b098 <_vfiprintf_r+0x1ac>
 800b032:	9b03      	ldr	r3, [sp, #12]
 800b034:	3402      	adds	r4, #2
 800b036:	1d1a      	adds	r2, r3, #4
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	9203      	str	r2, [sp, #12]
 800b03c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b040:	9305      	str	r3, [sp, #20]
 800b042:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800b10c <_vfiprintf_r+0x220>
 800b046:	2203      	movs	r2, #3
 800b048:	4650      	mov	r0, sl
 800b04a:	7821      	ldrb	r1, [r4, #0]
 800b04c:	f7fd fb45 	bl	80086da <memchr>
 800b050:	b138      	cbz	r0, 800b062 <_vfiprintf_r+0x176>
 800b052:	2240      	movs	r2, #64	@ 0x40
 800b054:	9b04      	ldr	r3, [sp, #16]
 800b056:	eba0 000a 	sub.w	r0, r0, sl
 800b05a:	4082      	lsls	r2, r0
 800b05c:	4313      	orrs	r3, r2
 800b05e:	3401      	adds	r4, #1
 800b060:	9304      	str	r3, [sp, #16]
 800b062:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b066:	2206      	movs	r2, #6
 800b068:	4829      	ldr	r0, [pc, #164]	@ (800b110 <_vfiprintf_r+0x224>)
 800b06a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b06e:	f7fd fb34 	bl	80086da <memchr>
 800b072:	2800      	cmp	r0, #0
 800b074:	d03f      	beq.n	800b0f6 <_vfiprintf_r+0x20a>
 800b076:	4b27      	ldr	r3, [pc, #156]	@ (800b114 <_vfiprintf_r+0x228>)
 800b078:	bb1b      	cbnz	r3, 800b0c2 <_vfiprintf_r+0x1d6>
 800b07a:	9b03      	ldr	r3, [sp, #12]
 800b07c:	3307      	adds	r3, #7
 800b07e:	f023 0307 	bic.w	r3, r3, #7
 800b082:	3308      	adds	r3, #8
 800b084:	9303      	str	r3, [sp, #12]
 800b086:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b088:	443b      	add	r3, r7
 800b08a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b08c:	e76a      	b.n	800af64 <_vfiprintf_r+0x78>
 800b08e:	460c      	mov	r4, r1
 800b090:	2001      	movs	r0, #1
 800b092:	fb0c 3202 	mla	r2, ip, r2, r3
 800b096:	e7a8      	b.n	800afea <_vfiprintf_r+0xfe>
 800b098:	2300      	movs	r3, #0
 800b09a:	f04f 0c0a 	mov.w	ip, #10
 800b09e:	4619      	mov	r1, r3
 800b0a0:	3401      	adds	r4, #1
 800b0a2:	9305      	str	r3, [sp, #20]
 800b0a4:	4620      	mov	r0, r4
 800b0a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0aa:	3a30      	subs	r2, #48	@ 0x30
 800b0ac:	2a09      	cmp	r2, #9
 800b0ae:	d903      	bls.n	800b0b8 <_vfiprintf_r+0x1cc>
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d0c6      	beq.n	800b042 <_vfiprintf_r+0x156>
 800b0b4:	9105      	str	r1, [sp, #20]
 800b0b6:	e7c4      	b.n	800b042 <_vfiprintf_r+0x156>
 800b0b8:	4604      	mov	r4, r0
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0c0:	e7f0      	b.n	800b0a4 <_vfiprintf_r+0x1b8>
 800b0c2:	ab03      	add	r3, sp, #12
 800b0c4:	9300      	str	r3, [sp, #0]
 800b0c6:	462a      	mov	r2, r5
 800b0c8:	4630      	mov	r0, r6
 800b0ca:	4b13      	ldr	r3, [pc, #76]	@ (800b118 <_vfiprintf_r+0x22c>)
 800b0cc:	a904      	add	r1, sp, #16
 800b0ce:	f7fc fa93 	bl	80075f8 <_printf_float>
 800b0d2:	4607      	mov	r7, r0
 800b0d4:	1c78      	adds	r0, r7, #1
 800b0d6:	d1d6      	bne.n	800b086 <_vfiprintf_r+0x19a>
 800b0d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b0da:	07d9      	lsls	r1, r3, #31
 800b0dc:	d405      	bmi.n	800b0ea <_vfiprintf_r+0x1fe>
 800b0de:	89ab      	ldrh	r3, [r5, #12]
 800b0e0:	059a      	lsls	r2, r3, #22
 800b0e2:	d402      	bmi.n	800b0ea <_vfiprintf_r+0x1fe>
 800b0e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b0e6:	f7fd faf7 	bl	80086d8 <__retarget_lock_release_recursive>
 800b0ea:	89ab      	ldrh	r3, [r5, #12]
 800b0ec:	065b      	lsls	r3, r3, #25
 800b0ee:	f53f af1f 	bmi.w	800af30 <_vfiprintf_r+0x44>
 800b0f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b0f4:	e71e      	b.n	800af34 <_vfiprintf_r+0x48>
 800b0f6:	ab03      	add	r3, sp, #12
 800b0f8:	9300      	str	r3, [sp, #0]
 800b0fa:	462a      	mov	r2, r5
 800b0fc:	4630      	mov	r0, r6
 800b0fe:	4b06      	ldr	r3, [pc, #24]	@ (800b118 <_vfiprintf_r+0x22c>)
 800b100:	a904      	add	r1, sp, #16
 800b102:	f7fc fd17 	bl	8007b34 <_printf_i>
 800b106:	e7e4      	b.n	800b0d2 <_vfiprintf_r+0x1e6>
 800b108:	08017819 	.word	0x08017819
 800b10c:	0801781f 	.word	0x0801781f
 800b110:	08017823 	.word	0x08017823
 800b114:	080075f9 	.word	0x080075f9
 800b118:	0800aec7 	.word	0x0800aec7

0800b11c <__sflush_r>:
 800b11c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b122:	0716      	lsls	r6, r2, #28
 800b124:	4605      	mov	r5, r0
 800b126:	460c      	mov	r4, r1
 800b128:	d454      	bmi.n	800b1d4 <__sflush_r+0xb8>
 800b12a:	684b      	ldr	r3, [r1, #4]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	dc02      	bgt.n	800b136 <__sflush_r+0x1a>
 800b130:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b132:	2b00      	cmp	r3, #0
 800b134:	dd48      	ble.n	800b1c8 <__sflush_r+0xac>
 800b136:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b138:	2e00      	cmp	r6, #0
 800b13a:	d045      	beq.n	800b1c8 <__sflush_r+0xac>
 800b13c:	2300      	movs	r3, #0
 800b13e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b142:	682f      	ldr	r7, [r5, #0]
 800b144:	6a21      	ldr	r1, [r4, #32]
 800b146:	602b      	str	r3, [r5, #0]
 800b148:	d030      	beq.n	800b1ac <__sflush_r+0x90>
 800b14a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b14c:	89a3      	ldrh	r3, [r4, #12]
 800b14e:	0759      	lsls	r1, r3, #29
 800b150:	d505      	bpl.n	800b15e <__sflush_r+0x42>
 800b152:	6863      	ldr	r3, [r4, #4]
 800b154:	1ad2      	subs	r2, r2, r3
 800b156:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b158:	b10b      	cbz	r3, 800b15e <__sflush_r+0x42>
 800b15a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b15c:	1ad2      	subs	r2, r2, r3
 800b15e:	2300      	movs	r3, #0
 800b160:	4628      	mov	r0, r5
 800b162:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b164:	6a21      	ldr	r1, [r4, #32]
 800b166:	47b0      	blx	r6
 800b168:	1c43      	adds	r3, r0, #1
 800b16a:	89a3      	ldrh	r3, [r4, #12]
 800b16c:	d106      	bne.n	800b17c <__sflush_r+0x60>
 800b16e:	6829      	ldr	r1, [r5, #0]
 800b170:	291d      	cmp	r1, #29
 800b172:	d82b      	bhi.n	800b1cc <__sflush_r+0xb0>
 800b174:	4a28      	ldr	r2, [pc, #160]	@ (800b218 <__sflush_r+0xfc>)
 800b176:	40ca      	lsrs	r2, r1
 800b178:	07d6      	lsls	r6, r2, #31
 800b17a:	d527      	bpl.n	800b1cc <__sflush_r+0xb0>
 800b17c:	2200      	movs	r2, #0
 800b17e:	6062      	str	r2, [r4, #4]
 800b180:	6922      	ldr	r2, [r4, #16]
 800b182:	04d9      	lsls	r1, r3, #19
 800b184:	6022      	str	r2, [r4, #0]
 800b186:	d504      	bpl.n	800b192 <__sflush_r+0x76>
 800b188:	1c42      	adds	r2, r0, #1
 800b18a:	d101      	bne.n	800b190 <__sflush_r+0x74>
 800b18c:	682b      	ldr	r3, [r5, #0]
 800b18e:	b903      	cbnz	r3, 800b192 <__sflush_r+0x76>
 800b190:	6560      	str	r0, [r4, #84]	@ 0x54
 800b192:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b194:	602f      	str	r7, [r5, #0]
 800b196:	b1b9      	cbz	r1, 800b1c8 <__sflush_r+0xac>
 800b198:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b19c:	4299      	cmp	r1, r3
 800b19e:	d002      	beq.n	800b1a6 <__sflush_r+0x8a>
 800b1a0:	4628      	mov	r0, r5
 800b1a2:	f7fe f909 	bl	80093b8 <_free_r>
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	6363      	str	r3, [r4, #52]	@ 0x34
 800b1aa:	e00d      	b.n	800b1c8 <__sflush_r+0xac>
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	4628      	mov	r0, r5
 800b1b0:	47b0      	blx	r6
 800b1b2:	4602      	mov	r2, r0
 800b1b4:	1c50      	adds	r0, r2, #1
 800b1b6:	d1c9      	bne.n	800b14c <__sflush_r+0x30>
 800b1b8:	682b      	ldr	r3, [r5, #0]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d0c6      	beq.n	800b14c <__sflush_r+0x30>
 800b1be:	2b1d      	cmp	r3, #29
 800b1c0:	d001      	beq.n	800b1c6 <__sflush_r+0xaa>
 800b1c2:	2b16      	cmp	r3, #22
 800b1c4:	d11d      	bne.n	800b202 <__sflush_r+0xe6>
 800b1c6:	602f      	str	r7, [r5, #0]
 800b1c8:	2000      	movs	r0, #0
 800b1ca:	e021      	b.n	800b210 <__sflush_r+0xf4>
 800b1cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1d0:	b21b      	sxth	r3, r3
 800b1d2:	e01a      	b.n	800b20a <__sflush_r+0xee>
 800b1d4:	690f      	ldr	r7, [r1, #16]
 800b1d6:	2f00      	cmp	r7, #0
 800b1d8:	d0f6      	beq.n	800b1c8 <__sflush_r+0xac>
 800b1da:	0793      	lsls	r3, r2, #30
 800b1dc:	bf18      	it	ne
 800b1de:	2300      	movne	r3, #0
 800b1e0:	680e      	ldr	r6, [r1, #0]
 800b1e2:	bf08      	it	eq
 800b1e4:	694b      	ldreq	r3, [r1, #20]
 800b1e6:	1bf6      	subs	r6, r6, r7
 800b1e8:	600f      	str	r7, [r1, #0]
 800b1ea:	608b      	str	r3, [r1, #8]
 800b1ec:	2e00      	cmp	r6, #0
 800b1ee:	ddeb      	ble.n	800b1c8 <__sflush_r+0xac>
 800b1f0:	4633      	mov	r3, r6
 800b1f2:	463a      	mov	r2, r7
 800b1f4:	4628      	mov	r0, r5
 800b1f6:	6a21      	ldr	r1, [r4, #32]
 800b1f8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800b1fc:	47e0      	blx	ip
 800b1fe:	2800      	cmp	r0, #0
 800b200:	dc07      	bgt.n	800b212 <__sflush_r+0xf6>
 800b202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b206:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b20a:	f04f 30ff 	mov.w	r0, #4294967295
 800b20e:	81a3      	strh	r3, [r4, #12]
 800b210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b212:	4407      	add	r7, r0
 800b214:	1a36      	subs	r6, r6, r0
 800b216:	e7e9      	b.n	800b1ec <__sflush_r+0xd0>
 800b218:	20400001 	.word	0x20400001

0800b21c <_fflush_r>:
 800b21c:	b538      	push	{r3, r4, r5, lr}
 800b21e:	690b      	ldr	r3, [r1, #16]
 800b220:	4605      	mov	r5, r0
 800b222:	460c      	mov	r4, r1
 800b224:	b913      	cbnz	r3, 800b22c <_fflush_r+0x10>
 800b226:	2500      	movs	r5, #0
 800b228:	4628      	mov	r0, r5
 800b22a:	bd38      	pop	{r3, r4, r5, pc}
 800b22c:	b118      	cbz	r0, 800b236 <_fflush_r+0x1a>
 800b22e:	6a03      	ldr	r3, [r0, #32]
 800b230:	b90b      	cbnz	r3, 800b236 <_fflush_r+0x1a>
 800b232:	f7fd f833 	bl	800829c <__sinit>
 800b236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d0f3      	beq.n	800b226 <_fflush_r+0xa>
 800b23e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b240:	07d0      	lsls	r0, r2, #31
 800b242:	d404      	bmi.n	800b24e <_fflush_r+0x32>
 800b244:	0599      	lsls	r1, r3, #22
 800b246:	d402      	bmi.n	800b24e <_fflush_r+0x32>
 800b248:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b24a:	f7fd fa44 	bl	80086d6 <__retarget_lock_acquire_recursive>
 800b24e:	4628      	mov	r0, r5
 800b250:	4621      	mov	r1, r4
 800b252:	f7ff ff63 	bl	800b11c <__sflush_r>
 800b256:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b258:	4605      	mov	r5, r0
 800b25a:	07da      	lsls	r2, r3, #31
 800b25c:	d4e4      	bmi.n	800b228 <_fflush_r+0xc>
 800b25e:	89a3      	ldrh	r3, [r4, #12]
 800b260:	059b      	lsls	r3, r3, #22
 800b262:	d4e1      	bmi.n	800b228 <_fflush_r+0xc>
 800b264:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b266:	f7fd fa37 	bl	80086d8 <__retarget_lock_release_recursive>
 800b26a:	e7dd      	b.n	800b228 <_fflush_r+0xc>

0800b26c <__swhatbuf_r>:
 800b26c:	b570      	push	{r4, r5, r6, lr}
 800b26e:	460c      	mov	r4, r1
 800b270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b274:	4615      	mov	r5, r2
 800b276:	2900      	cmp	r1, #0
 800b278:	461e      	mov	r6, r3
 800b27a:	b096      	sub	sp, #88	@ 0x58
 800b27c:	da0c      	bge.n	800b298 <__swhatbuf_r+0x2c>
 800b27e:	89a3      	ldrh	r3, [r4, #12]
 800b280:	2100      	movs	r1, #0
 800b282:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b286:	bf14      	ite	ne
 800b288:	2340      	movne	r3, #64	@ 0x40
 800b28a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b28e:	2000      	movs	r0, #0
 800b290:	6031      	str	r1, [r6, #0]
 800b292:	602b      	str	r3, [r5, #0]
 800b294:	b016      	add	sp, #88	@ 0x58
 800b296:	bd70      	pop	{r4, r5, r6, pc}
 800b298:	466a      	mov	r2, sp
 800b29a:	f000 f875 	bl	800b388 <_fstat_r>
 800b29e:	2800      	cmp	r0, #0
 800b2a0:	dbed      	blt.n	800b27e <__swhatbuf_r+0x12>
 800b2a2:	9901      	ldr	r1, [sp, #4]
 800b2a4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b2a8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b2ac:	4259      	negs	r1, r3
 800b2ae:	4159      	adcs	r1, r3
 800b2b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b2b4:	e7eb      	b.n	800b28e <__swhatbuf_r+0x22>

0800b2b6 <__smakebuf_r>:
 800b2b6:	898b      	ldrh	r3, [r1, #12]
 800b2b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b2ba:	079d      	lsls	r5, r3, #30
 800b2bc:	4606      	mov	r6, r0
 800b2be:	460c      	mov	r4, r1
 800b2c0:	d507      	bpl.n	800b2d2 <__smakebuf_r+0x1c>
 800b2c2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b2c6:	6023      	str	r3, [r4, #0]
 800b2c8:	6123      	str	r3, [r4, #16]
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	6163      	str	r3, [r4, #20]
 800b2ce:	b003      	add	sp, #12
 800b2d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2d2:	466a      	mov	r2, sp
 800b2d4:	ab01      	add	r3, sp, #4
 800b2d6:	f7ff ffc9 	bl	800b26c <__swhatbuf_r>
 800b2da:	9f00      	ldr	r7, [sp, #0]
 800b2dc:	4605      	mov	r5, r0
 800b2de:	4639      	mov	r1, r7
 800b2e0:	4630      	mov	r0, r6
 800b2e2:	f7fe f8db 	bl	800949c <_malloc_r>
 800b2e6:	b948      	cbnz	r0, 800b2fc <__smakebuf_r+0x46>
 800b2e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2ec:	059a      	lsls	r2, r3, #22
 800b2ee:	d4ee      	bmi.n	800b2ce <__smakebuf_r+0x18>
 800b2f0:	f023 0303 	bic.w	r3, r3, #3
 800b2f4:	f043 0302 	orr.w	r3, r3, #2
 800b2f8:	81a3      	strh	r3, [r4, #12]
 800b2fa:	e7e2      	b.n	800b2c2 <__smakebuf_r+0xc>
 800b2fc:	89a3      	ldrh	r3, [r4, #12]
 800b2fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b302:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b306:	81a3      	strh	r3, [r4, #12]
 800b308:	9b01      	ldr	r3, [sp, #4]
 800b30a:	6020      	str	r0, [r4, #0]
 800b30c:	b15b      	cbz	r3, 800b326 <__smakebuf_r+0x70>
 800b30e:	4630      	mov	r0, r6
 800b310:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b314:	f000 f84a 	bl	800b3ac <_isatty_r>
 800b318:	b128      	cbz	r0, 800b326 <__smakebuf_r+0x70>
 800b31a:	89a3      	ldrh	r3, [r4, #12]
 800b31c:	f023 0303 	bic.w	r3, r3, #3
 800b320:	f043 0301 	orr.w	r3, r3, #1
 800b324:	81a3      	strh	r3, [r4, #12]
 800b326:	89a3      	ldrh	r3, [r4, #12]
 800b328:	431d      	orrs	r5, r3
 800b32a:	81a5      	strh	r5, [r4, #12]
 800b32c:	e7cf      	b.n	800b2ce <__smakebuf_r+0x18>

0800b32e <memmove>:
 800b32e:	4288      	cmp	r0, r1
 800b330:	b510      	push	{r4, lr}
 800b332:	eb01 0402 	add.w	r4, r1, r2
 800b336:	d902      	bls.n	800b33e <memmove+0x10>
 800b338:	4284      	cmp	r4, r0
 800b33a:	4623      	mov	r3, r4
 800b33c:	d807      	bhi.n	800b34e <memmove+0x20>
 800b33e:	1e43      	subs	r3, r0, #1
 800b340:	42a1      	cmp	r1, r4
 800b342:	d008      	beq.n	800b356 <memmove+0x28>
 800b344:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b348:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b34c:	e7f8      	b.n	800b340 <memmove+0x12>
 800b34e:	4601      	mov	r1, r0
 800b350:	4402      	add	r2, r0
 800b352:	428a      	cmp	r2, r1
 800b354:	d100      	bne.n	800b358 <memmove+0x2a>
 800b356:	bd10      	pop	{r4, pc}
 800b358:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b35c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b360:	e7f7      	b.n	800b352 <memmove+0x24>

0800b362 <strncmp>:
 800b362:	b510      	push	{r4, lr}
 800b364:	b16a      	cbz	r2, 800b382 <strncmp+0x20>
 800b366:	3901      	subs	r1, #1
 800b368:	1884      	adds	r4, r0, r2
 800b36a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b36e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b372:	429a      	cmp	r2, r3
 800b374:	d103      	bne.n	800b37e <strncmp+0x1c>
 800b376:	42a0      	cmp	r0, r4
 800b378:	d001      	beq.n	800b37e <strncmp+0x1c>
 800b37a:	2a00      	cmp	r2, #0
 800b37c:	d1f5      	bne.n	800b36a <strncmp+0x8>
 800b37e:	1ad0      	subs	r0, r2, r3
 800b380:	bd10      	pop	{r4, pc}
 800b382:	4610      	mov	r0, r2
 800b384:	e7fc      	b.n	800b380 <strncmp+0x1e>
	...

0800b388 <_fstat_r>:
 800b388:	b538      	push	{r3, r4, r5, lr}
 800b38a:	2300      	movs	r3, #0
 800b38c:	4d06      	ldr	r5, [pc, #24]	@ (800b3a8 <_fstat_r+0x20>)
 800b38e:	4604      	mov	r4, r0
 800b390:	4608      	mov	r0, r1
 800b392:	4611      	mov	r1, r2
 800b394:	602b      	str	r3, [r5, #0]
 800b396:	f7f7 f9a7 	bl	80026e8 <_fstat>
 800b39a:	1c43      	adds	r3, r0, #1
 800b39c:	d102      	bne.n	800b3a4 <_fstat_r+0x1c>
 800b39e:	682b      	ldr	r3, [r5, #0]
 800b3a0:	b103      	cbz	r3, 800b3a4 <_fstat_r+0x1c>
 800b3a2:	6023      	str	r3, [r4, #0]
 800b3a4:	bd38      	pop	{r3, r4, r5, pc}
 800b3a6:	bf00      	nop
 800b3a8:	20001178 	.word	0x20001178

0800b3ac <_isatty_r>:
 800b3ac:	b538      	push	{r3, r4, r5, lr}
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	4d05      	ldr	r5, [pc, #20]	@ (800b3c8 <_isatty_r+0x1c>)
 800b3b2:	4604      	mov	r4, r0
 800b3b4:	4608      	mov	r0, r1
 800b3b6:	602b      	str	r3, [r5, #0]
 800b3b8:	f7f7 f9a5 	bl	8002706 <_isatty>
 800b3bc:	1c43      	adds	r3, r0, #1
 800b3be:	d102      	bne.n	800b3c6 <_isatty_r+0x1a>
 800b3c0:	682b      	ldr	r3, [r5, #0]
 800b3c2:	b103      	cbz	r3, 800b3c6 <_isatty_r+0x1a>
 800b3c4:	6023      	str	r3, [r4, #0]
 800b3c6:	bd38      	pop	{r3, r4, r5, pc}
 800b3c8:	20001178 	.word	0x20001178

0800b3cc <_sbrk_r>:
 800b3cc:	b538      	push	{r3, r4, r5, lr}
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	4d05      	ldr	r5, [pc, #20]	@ (800b3e8 <_sbrk_r+0x1c>)
 800b3d2:	4604      	mov	r4, r0
 800b3d4:	4608      	mov	r0, r1
 800b3d6:	602b      	str	r3, [r5, #0]
 800b3d8:	f7f7 f9ac 	bl	8002734 <_sbrk>
 800b3dc:	1c43      	adds	r3, r0, #1
 800b3de:	d102      	bne.n	800b3e6 <_sbrk_r+0x1a>
 800b3e0:	682b      	ldr	r3, [r5, #0]
 800b3e2:	b103      	cbz	r3, 800b3e6 <_sbrk_r+0x1a>
 800b3e4:	6023      	str	r3, [r4, #0]
 800b3e6:	bd38      	pop	{r3, r4, r5, pc}
 800b3e8:	20001178 	.word	0x20001178

0800b3ec <memcpy>:
 800b3ec:	440a      	add	r2, r1
 800b3ee:	4291      	cmp	r1, r2
 800b3f0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b3f4:	d100      	bne.n	800b3f8 <memcpy+0xc>
 800b3f6:	4770      	bx	lr
 800b3f8:	b510      	push	{r4, lr}
 800b3fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3fe:	4291      	cmp	r1, r2
 800b400:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b404:	d1f9      	bne.n	800b3fa <memcpy+0xe>
 800b406:	bd10      	pop	{r4, pc}

0800b408 <nan>:
 800b408:	2000      	movs	r0, #0
 800b40a:	4901      	ldr	r1, [pc, #4]	@ (800b410 <nan+0x8>)
 800b40c:	4770      	bx	lr
 800b40e:	bf00      	nop
 800b410:	7ff80000 	.word	0x7ff80000

0800b414 <__assert_func>:
 800b414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b416:	4614      	mov	r4, r2
 800b418:	461a      	mov	r2, r3
 800b41a:	4b09      	ldr	r3, [pc, #36]	@ (800b440 <__assert_func+0x2c>)
 800b41c:	4605      	mov	r5, r0
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	68d8      	ldr	r0, [r3, #12]
 800b422:	b14c      	cbz	r4, 800b438 <__assert_func+0x24>
 800b424:	4b07      	ldr	r3, [pc, #28]	@ (800b444 <__assert_func+0x30>)
 800b426:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b42a:	9100      	str	r1, [sp, #0]
 800b42c:	462b      	mov	r3, r5
 800b42e:	4906      	ldr	r1, [pc, #24]	@ (800b448 <__assert_func+0x34>)
 800b430:	f000 fba8 	bl	800bb84 <fiprintf>
 800b434:	f000 fbb8 	bl	800bba8 <abort>
 800b438:	4b04      	ldr	r3, [pc, #16]	@ (800b44c <__assert_func+0x38>)
 800b43a:	461c      	mov	r4, r3
 800b43c:	e7f3      	b.n	800b426 <__assert_func+0x12>
 800b43e:	bf00      	nop
 800b440:	20000034 	.word	0x20000034
 800b444:	08017832 	.word	0x08017832
 800b448:	0801783f 	.word	0x0801783f
 800b44c:	0801786d 	.word	0x0801786d

0800b450 <_calloc_r>:
 800b450:	b570      	push	{r4, r5, r6, lr}
 800b452:	fba1 5402 	umull	r5, r4, r1, r2
 800b456:	b934      	cbnz	r4, 800b466 <_calloc_r+0x16>
 800b458:	4629      	mov	r1, r5
 800b45a:	f7fe f81f 	bl	800949c <_malloc_r>
 800b45e:	4606      	mov	r6, r0
 800b460:	b928      	cbnz	r0, 800b46e <_calloc_r+0x1e>
 800b462:	4630      	mov	r0, r6
 800b464:	bd70      	pop	{r4, r5, r6, pc}
 800b466:	220c      	movs	r2, #12
 800b468:	2600      	movs	r6, #0
 800b46a:	6002      	str	r2, [r0, #0]
 800b46c:	e7f9      	b.n	800b462 <_calloc_r+0x12>
 800b46e:	462a      	mov	r2, r5
 800b470:	4621      	mov	r1, r4
 800b472:	f7fd f8b3 	bl	80085dc <memset>
 800b476:	e7f4      	b.n	800b462 <_calloc_r+0x12>

0800b478 <rshift>:
 800b478:	6903      	ldr	r3, [r0, #16]
 800b47a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b47e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b482:	f100 0414 	add.w	r4, r0, #20
 800b486:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b48a:	dd46      	ble.n	800b51a <rshift+0xa2>
 800b48c:	f011 011f 	ands.w	r1, r1, #31
 800b490:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b494:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b498:	d10c      	bne.n	800b4b4 <rshift+0x3c>
 800b49a:	4629      	mov	r1, r5
 800b49c:	f100 0710 	add.w	r7, r0, #16
 800b4a0:	42b1      	cmp	r1, r6
 800b4a2:	d335      	bcc.n	800b510 <rshift+0x98>
 800b4a4:	1a9b      	subs	r3, r3, r2
 800b4a6:	009b      	lsls	r3, r3, #2
 800b4a8:	1eea      	subs	r2, r5, #3
 800b4aa:	4296      	cmp	r6, r2
 800b4ac:	bf38      	it	cc
 800b4ae:	2300      	movcc	r3, #0
 800b4b0:	4423      	add	r3, r4
 800b4b2:	e015      	b.n	800b4e0 <rshift+0x68>
 800b4b4:	46a1      	mov	r9, r4
 800b4b6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b4ba:	f1c1 0820 	rsb	r8, r1, #32
 800b4be:	40cf      	lsrs	r7, r1
 800b4c0:	f105 0e04 	add.w	lr, r5, #4
 800b4c4:	4576      	cmp	r6, lr
 800b4c6:	46f4      	mov	ip, lr
 800b4c8:	d816      	bhi.n	800b4f8 <rshift+0x80>
 800b4ca:	1a9a      	subs	r2, r3, r2
 800b4cc:	0092      	lsls	r2, r2, #2
 800b4ce:	3a04      	subs	r2, #4
 800b4d0:	3501      	adds	r5, #1
 800b4d2:	42ae      	cmp	r6, r5
 800b4d4:	bf38      	it	cc
 800b4d6:	2200      	movcc	r2, #0
 800b4d8:	18a3      	adds	r3, r4, r2
 800b4da:	50a7      	str	r7, [r4, r2]
 800b4dc:	b107      	cbz	r7, 800b4e0 <rshift+0x68>
 800b4de:	3304      	adds	r3, #4
 800b4e0:	42a3      	cmp	r3, r4
 800b4e2:	eba3 0204 	sub.w	r2, r3, r4
 800b4e6:	bf08      	it	eq
 800b4e8:	2300      	moveq	r3, #0
 800b4ea:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b4ee:	6102      	str	r2, [r0, #16]
 800b4f0:	bf08      	it	eq
 800b4f2:	6143      	streq	r3, [r0, #20]
 800b4f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4f8:	f8dc c000 	ldr.w	ip, [ip]
 800b4fc:	fa0c fc08 	lsl.w	ip, ip, r8
 800b500:	ea4c 0707 	orr.w	r7, ip, r7
 800b504:	f849 7b04 	str.w	r7, [r9], #4
 800b508:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b50c:	40cf      	lsrs	r7, r1
 800b50e:	e7d9      	b.n	800b4c4 <rshift+0x4c>
 800b510:	f851 cb04 	ldr.w	ip, [r1], #4
 800b514:	f847 cf04 	str.w	ip, [r7, #4]!
 800b518:	e7c2      	b.n	800b4a0 <rshift+0x28>
 800b51a:	4623      	mov	r3, r4
 800b51c:	e7e0      	b.n	800b4e0 <rshift+0x68>

0800b51e <__hexdig_fun>:
 800b51e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b522:	2b09      	cmp	r3, #9
 800b524:	d802      	bhi.n	800b52c <__hexdig_fun+0xe>
 800b526:	3820      	subs	r0, #32
 800b528:	b2c0      	uxtb	r0, r0
 800b52a:	4770      	bx	lr
 800b52c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b530:	2b05      	cmp	r3, #5
 800b532:	d801      	bhi.n	800b538 <__hexdig_fun+0x1a>
 800b534:	3847      	subs	r0, #71	@ 0x47
 800b536:	e7f7      	b.n	800b528 <__hexdig_fun+0xa>
 800b538:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b53c:	2b05      	cmp	r3, #5
 800b53e:	d801      	bhi.n	800b544 <__hexdig_fun+0x26>
 800b540:	3827      	subs	r0, #39	@ 0x27
 800b542:	e7f1      	b.n	800b528 <__hexdig_fun+0xa>
 800b544:	2000      	movs	r0, #0
 800b546:	4770      	bx	lr

0800b548 <__gethex>:
 800b548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b54c:	468a      	mov	sl, r1
 800b54e:	4690      	mov	r8, r2
 800b550:	b085      	sub	sp, #20
 800b552:	9302      	str	r3, [sp, #8]
 800b554:	680b      	ldr	r3, [r1, #0]
 800b556:	9001      	str	r0, [sp, #4]
 800b558:	1c9c      	adds	r4, r3, #2
 800b55a:	46a1      	mov	r9, r4
 800b55c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b560:	2830      	cmp	r0, #48	@ 0x30
 800b562:	d0fa      	beq.n	800b55a <__gethex+0x12>
 800b564:	eba9 0303 	sub.w	r3, r9, r3
 800b568:	f1a3 0b02 	sub.w	fp, r3, #2
 800b56c:	f7ff ffd7 	bl	800b51e <__hexdig_fun>
 800b570:	4605      	mov	r5, r0
 800b572:	2800      	cmp	r0, #0
 800b574:	d168      	bne.n	800b648 <__gethex+0x100>
 800b576:	2201      	movs	r2, #1
 800b578:	4648      	mov	r0, r9
 800b57a:	499f      	ldr	r1, [pc, #636]	@ (800b7f8 <__gethex+0x2b0>)
 800b57c:	f7ff fef1 	bl	800b362 <strncmp>
 800b580:	4607      	mov	r7, r0
 800b582:	2800      	cmp	r0, #0
 800b584:	d167      	bne.n	800b656 <__gethex+0x10e>
 800b586:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b58a:	4626      	mov	r6, r4
 800b58c:	f7ff ffc7 	bl	800b51e <__hexdig_fun>
 800b590:	2800      	cmp	r0, #0
 800b592:	d062      	beq.n	800b65a <__gethex+0x112>
 800b594:	4623      	mov	r3, r4
 800b596:	7818      	ldrb	r0, [r3, #0]
 800b598:	4699      	mov	r9, r3
 800b59a:	2830      	cmp	r0, #48	@ 0x30
 800b59c:	f103 0301 	add.w	r3, r3, #1
 800b5a0:	d0f9      	beq.n	800b596 <__gethex+0x4e>
 800b5a2:	f7ff ffbc 	bl	800b51e <__hexdig_fun>
 800b5a6:	fab0 f580 	clz	r5, r0
 800b5aa:	f04f 0b01 	mov.w	fp, #1
 800b5ae:	096d      	lsrs	r5, r5, #5
 800b5b0:	464a      	mov	r2, r9
 800b5b2:	4616      	mov	r6, r2
 800b5b4:	7830      	ldrb	r0, [r6, #0]
 800b5b6:	3201      	adds	r2, #1
 800b5b8:	f7ff ffb1 	bl	800b51e <__hexdig_fun>
 800b5bc:	2800      	cmp	r0, #0
 800b5be:	d1f8      	bne.n	800b5b2 <__gethex+0x6a>
 800b5c0:	2201      	movs	r2, #1
 800b5c2:	4630      	mov	r0, r6
 800b5c4:	498c      	ldr	r1, [pc, #560]	@ (800b7f8 <__gethex+0x2b0>)
 800b5c6:	f7ff fecc 	bl	800b362 <strncmp>
 800b5ca:	2800      	cmp	r0, #0
 800b5cc:	d13f      	bne.n	800b64e <__gethex+0x106>
 800b5ce:	b944      	cbnz	r4, 800b5e2 <__gethex+0x9a>
 800b5d0:	1c74      	adds	r4, r6, #1
 800b5d2:	4622      	mov	r2, r4
 800b5d4:	4616      	mov	r6, r2
 800b5d6:	7830      	ldrb	r0, [r6, #0]
 800b5d8:	3201      	adds	r2, #1
 800b5da:	f7ff ffa0 	bl	800b51e <__hexdig_fun>
 800b5de:	2800      	cmp	r0, #0
 800b5e0:	d1f8      	bne.n	800b5d4 <__gethex+0x8c>
 800b5e2:	1ba4      	subs	r4, r4, r6
 800b5e4:	00a7      	lsls	r7, r4, #2
 800b5e6:	7833      	ldrb	r3, [r6, #0]
 800b5e8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b5ec:	2b50      	cmp	r3, #80	@ 0x50
 800b5ee:	d13e      	bne.n	800b66e <__gethex+0x126>
 800b5f0:	7873      	ldrb	r3, [r6, #1]
 800b5f2:	2b2b      	cmp	r3, #43	@ 0x2b
 800b5f4:	d033      	beq.n	800b65e <__gethex+0x116>
 800b5f6:	2b2d      	cmp	r3, #45	@ 0x2d
 800b5f8:	d034      	beq.n	800b664 <__gethex+0x11c>
 800b5fa:	2400      	movs	r4, #0
 800b5fc:	1c71      	adds	r1, r6, #1
 800b5fe:	7808      	ldrb	r0, [r1, #0]
 800b600:	f7ff ff8d 	bl	800b51e <__hexdig_fun>
 800b604:	1e43      	subs	r3, r0, #1
 800b606:	b2db      	uxtb	r3, r3
 800b608:	2b18      	cmp	r3, #24
 800b60a:	d830      	bhi.n	800b66e <__gethex+0x126>
 800b60c:	f1a0 0210 	sub.w	r2, r0, #16
 800b610:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b614:	f7ff ff83 	bl	800b51e <__hexdig_fun>
 800b618:	f100 3cff 	add.w	ip, r0, #4294967295
 800b61c:	fa5f fc8c 	uxtb.w	ip, ip
 800b620:	f1bc 0f18 	cmp.w	ip, #24
 800b624:	f04f 030a 	mov.w	r3, #10
 800b628:	d91e      	bls.n	800b668 <__gethex+0x120>
 800b62a:	b104      	cbz	r4, 800b62e <__gethex+0xe6>
 800b62c:	4252      	negs	r2, r2
 800b62e:	4417      	add	r7, r2
 800b630:	f8ca 1000 	str.w	r1, [sl]
 800b634:	b1ed      	cbz	r5, 800b672 <__gethex+0x12a>
 800b636:	f1bb 0f00 	cmp.w	fp, #0
 800b63a:	bf0c      	ite	eq
 800b63c:	2506      	moveq	r5, #6
 800b63e:	2500      	movne	r5, #0
 800b640:	4628      	mov	r0, r5
 800b642:	b005      	add	sp, #20
 800b644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b648:	2500      	movs	r5, #0
 800b64a:	462c      	mov	r4, r5
 800b64c:	e7b0      	b.n	800b5b0 <__gethex+0x68>
 800b64e:	2c00      	cmp	r4, #0
 800b650:	d1c7      	bne.n	800b5e2 <__gethex+0x9a>
 800b652:	4627      	mov	r7, r4
 800b654:	e7c7      	b.n	800b5e6 <__gethex+0x9e>
 800b656:	464e      	mov	r6, r9
 800b658:	462f      	mov	r7, r5
 800b65a:	2501      	movs	r5, #1
 800b65c:	e7c3      	b.n	800b5e6 <__gethex+0x9e>
 800b65e:	2400      	movs	r4, #0
 800b660:	1cb1      	adds	r1, r6, #2
 800b662:	e7cc      	b.n	800b5fe <__gethex+0xb6>
 800b664:	2401      	movs	r4, #1
 800b666:	e7fb      	b.n	800b660 <__gethex+0x118>
 800b668:	fb03 0002 	mla	r0, r3, r2, r0
 800b66c:	e7ce      	b.n	800b60c <__gethex+0xc4>
 800b66e:	4631      	mov	r1, r6
 800b670:	e7de      	b.n	800b630 <__gethex+0xe8>
 800b672:	4629      	mov	r1, r5
 800b674:	eba6 0309 	sub.w	r3, r6, r9
 800b678:	3b01      	subs	r3, #1
 800b67a:	2b07      	cmp	r3, #7
 800b67c:	dc0a      	bgt.n	800b694 <__gethex+0x14c>
 800b67e:	9801      	ldr	r0, [sp, #4]
 800b680:	f7fd ff98 	bl	80095b4 <_Balloc>
 800b684:	4604      	mov	r4, r0
 800b686:	b940      	cbnz	r0, 800b69a <__gethex+0x152>
 800b688:	4602      	mov	r2, r0
 800b68a:	21e4      	movs	r1, #228	@ 0xe4
 800b68c:	4b5b      	ldr	r3, [pc, #364]	@ (800b7fc <__gethex+0x2b4>)
 800b68e:	485c      	ldr	r0, [pc, #368]	@ (800b800 <__gethex+0x2b8>)
 800b690:	f7ff fec0 	bl	800b414 <__assert_func>
 800b694:	3101      	adds	r1, #1
 800b696:	105b      	asrs	r3, r3, #1
 800b698:	e7ef      	b.n	800b67a <__gethex+0x132>
 800b69a:	2300      	movs	r3, #0
 800b69c:	f100 0a14 	add.w	sl, r0, #20
 800b6a0:	4655      	mov	r5, sl
 800b6a2:	469b      	mov	fp, r3
 800b6a4:	45b1      	cmp	r9, r6
 800b6a6:	d337      	bcc.n	800b718 <__gethex+0x1d0>
 800b6a8:	f845 bb04 	str.w	fp, [r5], #4
 800b6ac:	eba5 050a 	sub.w	r5, r5, sl
 800b6b0:	10ad      	asrs	r5, r5, #2
 800b6b2:	6125      	str	r5, [r4, #16]
 800b6b4:	4658      	mov	r0, fp
 800b6b6:	f7fe f86f 	bl	8009798 <__hi0bits>
 800b6ba:	016d      	lsls	r5, r5, #5
 800b6bc:	f8d8 6000 	ldr.w	r6, [r8]
 800b6c0:	1a2d      	subs	r5, r5, r0
 800b6c2:	42b5      	cmp	r5, r6
 800b6c4:	dd54      	ble.n	800b770 <__gethex+0x228>
 800b6c6:	1bad      	subs	r5, r5, r6
 800b6c8:	4629      	mov	r1, r5
 800b6ca:	4620      	mov	r0, r4
 800b6cc:	f7fe fbf1 	bl	8009eb2 <__any_on>
 800b6d0:	4681      	mov	r9, r0
 800b6d2:	b178      	cbz	r0, 800b6f4 <__gethex+0x1ac>
 800b6d4:	f04f 0901 	mov.w	r9, #1
 800b6d8:	1e6b      	subs	r3, r5, #1
 800b6da:	1159      	asrs	r1, r3, #5
 800b6dc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b6e0:	f003 021f 	and.w	r2, r3, #31
 800b6e4:	fa09 f202 	lsl.w	r2, r9, r2
 800b6e8:	420a      	tst	r2, r1
 800b6ea:	d003      	beq.n	800b6f4 <__gethex+0x1ac>
 800b6ec:	454b      	cmp	r3, r9
 800b6ee:	dc36      	bgt.n	800b75e <__gethex+0x216>
 800b6f0:	f04f 0902 	mov.w	r9, #2
 800b6f4:	4629      	mov	r1, r5
 800b6f6:	4620      	mov	r0, r4
 800b6f8:	f7ff febe 	bl	800b478 <rshift>
 800b6fc:	442f      	add	r7, r5
 800b6fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b702:	42bb      	cmp	r3, r7
 800b704:	da42      	bge.n	800b78c <__gethex+0x244>
 800b706:	4621      	mov	r1, r4
 800b708:	9801      	ldr	r0, [sp, #4]
 800b70a:	f7fd ff93 	bl	8009634 <_Bfree>
 800b70e:	2300      	movs	r3, #0
 800b710:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b712:	25a3      	movs	r5, #163	@ 0xa3
 800b714:	6013      	str	r3, [r2, #0]
 800b716:	e793      	b.n	800b640 <__gethex+0xf8>
 800b718:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b71c:	2a2e      	cmp	r2, #46	@ 0x2e
 800b71e:	d012      	beq.n	800b746 <__gethex+0x1fe>
 800b720:	2b20      	cmp	r3, #32
 800b722:	d104      	bne.n	800b72e <__gethex+0x1e6>
 800b724:	f845 bb04 	str.w	fp, [r5], #4
 800b728:	f04f 0b00 	mov.w	fp, #0
 800b72c:	465b      	mov	r3, fp
 800b72e:	7830      	ldrb	r0, [r6, #0]
 800b730:	9303      	str	r3, [sp, #12]
 800b732:	f7ff fef4 	bl	800b51e <__hexdig_fun>
 800b736:	9b03      	ldr	r3, [sp, #12]
 800b738:	f000 000f 	and.w	r0, r0, #15
 800b73c:	4098      	lsls	r0, r3
 800b73e:	ea4b 0b00 	orr.w	fp, fp, r0
 800b742:	3304      	adds	r3, #4
 800b744:	e7ae      	b.n	800b6a4 <__gethex+0x15c>
 800b746:	45b1      	cmp	r9, r6
 800b748:	d8ea      	bhi.n	800b720 <__gethex+0x1d8>
 800b74a:	2201      	movs	r2, #1
 800b74c:	4630      	mov	r0, r6
 800b74e:	492a      	ldr	r1, [pc, #168]	@ (800b7f8 <__gethex+0x2b0>)
 800b750:	9303      	str	r3, [sp, #12]
 800b752:	f7ff fe06 	bl	800b362 <strncmp>
 800b756:	9b03      	ldr	r3, [sp, #12]
 800b758:	2800      	cmp	r0, #0
 800b75a:	d1e1      	bne.n	800b720 <__gethex+0x1d8>
 800b75c:	e7a2      	b.n	800b6a4 <__gethex+0x15c>
 800b75e:	4620      	mov	r0, r4
 800b760:	1ea9      	subs	r1, r5, #2
 800b762:	f7fe fba6 	bl	8009eb2 <__any_on>
 800b766:	2800      	cmp	r0, #0
 800b768:	d0c2      	beq.n	800b6f0 <__gethex+0x1a8>
 800b76a:	f04f 0903 	mov.w	r9, #3
 800b76e:	e7c1      	b.n	800b6f4 <__gethex+0x1ac>
 800b770:	da09      	bge.n	800b786 <__gethex+0x23e>
 800b772:	1b75      	subs	r5, r6, r5
 800b774:	4621      	mov	r1, r4
 800b776:	462a      	mov	r2, r5
 800b778:	9801      	ldr	r0, [sp, #4]
 800b77a:	f7fe f96b 	bl	8009a54 <__lshift>
 800b77e:	4604      	mov	r4, r0
 800b780:	1b7f      	subs	r7, r7, r5
 800b782:	f100 0a14 	add.w	sl, r0, #20
 800b786:	f04f 0900 	mov.w	r9, #0
 800b78a:	e7b8      	b.n	800b6fe <__gethex+0x1b6>
 800b78c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b790:	42bd      	cmp	r5, r7
 800b792:	dd6f      	ble.n	800b874 <__gethex+0x32c>
 800b794:	1bed      	subs	r5, r5, r7
 800b796:	42ae      	cmp	r6, r5
 800b798:	dc34      	bgt.n	800b804 <__gethex+0x2bc>
 800b79a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b79e:	2b02      	cmp	r3, #2
 800b7a0:	d022      	beq.n	800b7e8 <__gethex+0x2a0>
 800b7a2:	2b03      	cmp	r3, #3
 800b7a4:	d024      	beq.n	800b7f0 <__gethex+0x2a8>
 800b7a6:	2b01      	cmp	r3, #1
 800b7a8:	d115      	bne.n	800b7d6 <__gethex+0x28e>
 800b7aa:	42ae      	cmp	r6, r5
 800b7ac:	d113      	bne.n	800b7d6 <__gethex+0x28e>
 800b7ae:	2e01      	cmp	r6, #1
 800b7b0:	d10b      	bne.n	800b7ca <__gethex+0x282>
 800b7b2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b7b6:	9a02      	ldr	r2, [sp, #8]
 800b7b8:	2562      	movs	r5, #98	@ 0x62
 800b7ba:	6013      	str	r3, [r2, #0]
 800b7bc:	2301      	movs	r3, #1
 800b7be:	6123      	str	r3, [r4, #16]
 800b7c0:	f8ca 3000 	str.w	r3, [sl]
 800b7c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b7c6:	601c      	str	r4, [r3, #0]
 800b7c8:	e73a      	b.n	800b640 <__gethex+0xf8>
 800b7ca:	4620      	mov	r0, r4
 800b7cc:	1e71      	subs	r1, r6, #1
 800b7ce:	f7fe fb70 	bl	8009eb2 <__any_on>
 800b7d2:	2800      	cmp	r0, #0
 800b7d4:	d1ed      	bne.n	800b7b2 <__gethex+0x26a>
 800b7d6:	4621      	mov	r1, r4
 800b7d8:	9801      	ldr	r0, [sp, #4]
 800b7da:	f7fd ff2b 	bl	8009634 <_Bfree>
 800b7de:	2300      	movs	r3, #0
 800b7e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b7e2:	2550      	movs	r5, #80	@ 0x50
 800b7e4:	6013      	str	r3, [r2, #0]
 800b7e6:	e72b      	b.n	800b640 <__gethex+0xf8>
 800b7e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d1f3      	bne.n	800b7d6 <__gethex+0x28e>
 800b7ee:	e7e0      	b.n	800b7b2 <__gethex+0x26a>
 800b7f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d1dd      	bne.n	800b7b2 <__gethex+0x26a>
 800b7f6:	e7ee      	b.n	800b7d6 <__gethex+0x28e>
 800b7f8:	08017817 	.word	0x08017817
 800b7fc:	080177ad 	.word	0x080177ad
 800b800:	0801786e 	.word	0x0801786e
 800b804:	1e6f      	subs	r7, r5, #1
 800b806:	f1b9 0f00 	cmp.w	r9, #0
 800b80a:	d130      	bne.n	800b86e <__gethex+0x326>
 800b80c:	b127      	cbz	r7, 800b818 <__gethex+0x2d0>
 800b80e:	4639      	mov	r1, r7
 800b810:	4620      	mov	r0, r4
 800b812:	f7fe fb4e 	bl	8009eb2 <__any_on>
 800b816:	4681      	mov	r9, r0
 800b818:	2301      	movs	r3, #1
 800b81a:	4629      	mov	r1, r5
 800b81c:	1b76      	subs	r6, r6, r5
 800b81e:	2502      	movs	r5, #2
 800b820:	117a      	asrs	r2, r7, #5
 800b822:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b826:	f007 071f 	and.w	r7, r7, #31
 800b82a:	40bb      	lsls	r3, r7
 800b82c:	4213      	tst	r3, r2
 800b82e:	4620      	mov	r0, r4
 800b830:	bf18      	it	ne
 800b832:	f049 0902 	orrne.w	r9, r9, #2
 800b836:	f7ff fe1f 	bl	800b478 <rshift>
 800b83a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b83e:	f1b9 0f00 	cmp.w	r9, #0
 800b842:	d047      	beq.n	800b8d4 <__gethex+0x38c>
 800b844:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b848:	2b02      	cmp	r3, #2
 800b84a:	d015      	beq.n	800b878 <__gethex+0x330>
 800b84c:	2b03      	cmp	r3, #3
 800b84e:	d017      	beq.n	800b880 <__gethex+0x338>
 800b850:	2b01      	cmp	r3, #1
 800b852:	d109      	bne.n	800b868 <__gethex+0x320>
 800b854:	f019 0f02 	tst.w	r9, #2
 800b858:	d006      	beq.n	800b868 <__gethex+0x320>
 800b85a:	f8da 3000 	ldr.w	r3, [sl]
 800b85e:	ea49 0903 	orr.w	r9, r9, r3
 800b862:	f019 0f01 	tst.w	r9, #1
 800b866:	d10e      	bne.n	800b886 <__gethex+0x33e>
 800b868:	f045 0510 	orr.w	r5, r5, #16
 800b86c:	e032      	b.n	800b8d4 <__gethex+0x38c>
 800b86e:	f04f 0901 	mov.w	r9, #1
 800b872:	e7d1      	b.n	800b818 <__gethex+0x2d0>
 800b874:	2501      	movs	r5, #1
 800b876:	e7e2      	b.n	800b83e <__gethex+0x2f6>
 800b878:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b87a:	f1c3 0301 	rsb	r3, r3, #1
 800b87e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b880:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b882:	2b00      	cmp	r3, #0
 800b884:	d0f0      	beq.n	800b868 <__gethex+0x320>
 800b886:	f04f 0c00 	mov.w	ip, #0
 800b88a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b88e:	f104 0314 	add.w	r3, r4, #20
 800b892:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b896:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b89a:	4618      	mov	r0, r3
 800b89c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8a0:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b8a4:	d01b      	beq.n	800b8de <__gethex+0x396>
 800b8a6:	3201      	adds	r2, #1
 800b8a8:	6002      	str	r2, [r0, #0]
 800b8aa:	2d02      	cmp	r5, #2
 800b8ac:	f104 0314 	add.w	r3, r4, #20
 800b8b0:	d13c      	bne.n	800b92c <__gethex+0x3e4>
 800b8b2:	f8d8 2000 	ldr.w	r2, [r8]
 800b8b6:	3a01      	subs	r2, #1
 800b8b8:	42b2      	cmp	r2, r6
 800b8ba:	d109      	bne.n	800b8d0 <__gethex+0x388>
 800b8bc:	2201      	movs	r2, #1
 800b8be:	1171      	asrs	r1, r6, #5
 800b8c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b8c4:	f006 061f 	and.w	r6, r6, #31
 800b8c8:	fa02 f606 	lsl.w	r6, r2, r6
 800b8cc:	421e      	tst	r6, r3
 800b8ce:	d13a      	bne.n	800b946 <__gethex+0x3fe>
 800b8d0:	f045 0520 	orr.w	r5, r5, #32
 800b8d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b8d6:	601c      	str	r4, [r3, #0]
 800b8d8:	9b02      	ldr	r3, [sp, #8]
 800b8da:	601f      	str	r7, [r3, #0]
 800b8dc:	e6b0      	b.n	800b640 <__gethex+0xf8>
 800b8de:	4299      	cmp	r1, r3
 800b8e0:	f843 cc04 	str.w	ip, [r3, #-4]
 800b8e4:	d8d9      	bhi.n	800b89a <__gethex+0x352>
 800b8e6:	68a3      	ldr	r3, [r4, #8]
 800b8e8:	459b      	cmp	fp, r3
 800b8ea:	db17      	blt.n	800b91c <__gethex+0x3d4>
 800b8ec:	6861      	ldr	r1, [r4, #4]
 800b8ee:	9801      	ldr	r0, [sp, #4]
 800b8f0:	3101      	adds	r1, #1
 800b8f2:	f7fd fe5f 	bl	80095b4 <_Balloc>
 800b8f6:	4681      	mov	r9, r0
 800b8f8:	b918      	cbnz	r0, 800b902 <__gethex+0x3ba>
 800b8fa:	4602      	mov	r2, r0
 800b8fc:	2184      	movs	r1, #132	@ 0x84
 800b8fe:	4b19      	ldr	r3, [pc, #100]	@ (800b964 <__gethex+0x41c>)
 800b900:	e6c5      	b.n	800b68e <__gethex+0x146>
 800b902:	6922      	ldr	r2, [r4, #16]
 800b904:	f104 010c 	add.w	r1, r4, #12
 800b908:	3202      	adds	r2, #2
 800b90a:	0092      	lsls	r2, r2, #2
 800b90c:	300c      	adds	r0, #12
 800b90e:	f7ff fd6d 	bl	800b3ec <memcpy>
 800b912:	4621      	mov	r1, r4
 800b914:	9801      	ldr	r0, [sp, #4]
 800b916:	f7fd fe8d 	bl	8009634 <_Bfree>
 800b91a:	464c      	mov	r4, r9
 800b91c:	6923      	ldr	r3, [r4, #16]
 800b91e:	1c5a      	adds	r2, r3, #1
 800b920:	6122      	str	r2, [r4, #16]
 800b922:	2201      	movs	r2, #1
 800b924:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b928:	615a      	str	r2, [r3, #20]
 800b92a:	e7be      	b.n	800b8aa <__gethex+0x362>
 800b92c:	6922      	ldr	r2, [r4, #16]
 800b92e:	455a      	cmp	r2, fp
 800b930:	dd0b      	ble.n	800b94a <__gethex+0x402>
 800b932:	2101      	movs	r1, #1
 800b934:	4620      	mov	r0, r4
 800b936:	f7ff fd9f 	bl	800b478 <rshift>
 800b93a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b93e:	3701      	adds	r7, #1
 800b940:	42bb      	cmp	r3, r7
 800b942:	f6ff aee0 	blt.w	800b706 <__gethex+0x1be>
 800b946:	2501      	movs	r5, #1
 800b948:	e7c2      	b.n	800b8d0 <__gethex+0x388>
 800b94a:	f016 061f 	ands.w	r6, r6, #31
 800b94e:	d0fa      	beq.n	800b946 <__gethex+0x3fe>
 800b950:	4453      	add	r3, sl
 800b952:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b956:	f7fd ff1f 	bl	8009798 <__hi0bits>
 800b95a:	f1c6 0620 	rsb	r6, r6, #32
 800b95e:	42b0      	cmp	r0, r6
 800b960:	dbe7      	blt.n	800b932 <__gethex+0x3ea>
 800b962:	e7f0      	b.n	800b946 <__gethex+0x3fe>
 800b964:	080177ad 	.word	0x080177ad

0800b968 <L_shift>:
 800b968:	f1c2 0208 	rsb	r2, r2, #8
 800b96c:	0092      	lsls	r2, r2, #2
 800b96e:	b570      	push	{r4, r5, r6, lr}
 800b970:	f1c2 0620 	rsb	r6, r2, #32
 800b974:	6843      	ldr	r3, [r0, #4]
 800b976:	6804      	ldr	r4, [r0, #0]
 800b978:	fa03 f506 	lsl.w	r5, r3, r6
 800b97c:	432c      	orrs	r4, r5
 800b97e:	40d3      	lsrs	r3, r2
 800b980:	6004      	str	r4, [r0, #0]
 800b982:	f840 3f04 	str.w	r3, [r0, #4]!
 800b986:	4288      	cmp	r0, r1
 800b988:	d3f4      	bcc.n	800b974 <L_shift+0xc>
 800b98a:	bd70      	pop	{r4, r5, r6, pc}

0800b98c <__match>:
 800b98c:	b530      	push	{r4, r5, lr}
 800b98e:	6803      	ldr	r3, [r0, #0]
 800b990:	3301      	adds	r3, #1
 800b992:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b996:	b914      	cbnz	r4, 800b99e <__match+0x12>
 800b998:	6003      	str	r3, [r0, #0]
 800b99a:	2001      	movs	r0, #1
 800b99c:	bd30      	pop	{r4, r5, pc}
 800b99e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9a2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b9a6:	2d19      	cmp	r5, #25
 800b9a8:	bf98      	it	ls
 800b9aa:	3220      	addls	r2, #32
 800b9ac:	42a2      	cmp	r2, r4
 800b9ae:	d0f0      	beq.n	800b992 <__match+0x6>
 800b9b0:	2000      	movs	r0, #0
 800b9b2:	e7f3      	b.n	800b99c <__match+0x10>

0800b9b4 <__hexnan>:
 800b9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9b8:	2500      	movs	r5, #0
 800b9ba:	680b      	ldr	r3, [r1, #0]
 800b9bc:	4682      	mov	sl, r0
 800b9be:	115e      	asrs	r6, r3, #5
 800b9c0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b9c4:	f013 031f 	ands.w	r3, r3, #31
 800b9c8:	bf18      	it	ne
 800b9ca:	3604      	addne	r6, #4
 800b9cc:	1f37      	subs	r7, r6, #4
 800b9ce:	4690      	mov	r8, r2
 800b9d0:	46b9      	mov	r9, r7
 800b9d2:	463c      	mov	r4, r7
 800b9d4:	46ab      	mov	fp, r5
 800b9d6:	b087      	sub	sp, #28
 800b9d8:	6801      	ldr	r1, [r0, #0]
 800b9da:	9301      	str	r3, [sp, #4]
 800b9dc:	f846 5c04 	str.w	r5, [r6, #-4]
 800b9e0:	9502      	str	r5, [sp, #8]
 800b9e2:	784a      	ldrb	r2, [r1, #1]
 800b9e4:	1c4b      	adds	r3, r1, #1
 800b9e6:	9303      	str	r3, [sp, #12]
 800b9e8:	b342      	cbz	r2, 800ba3c <__hexnan+0x88>
 800b9ea:	4610      	mov	r0, r2
 800b9ec:	9105      	str	r1, [sp, #20]
 800b9ee:	9204      	str	r2, [sp, #16]
 800b9f0:	f7ff fd95 	bl	800b51e <__hexdig_fun>
 800b9f4:	2800      	cmp	r0, #0
 800b9f6:	d151      	bne.n	800ba9c <__hexnan+0xe8>
 800b9f8:	9a04      	ldr	r2, [sp, #16]
 800b9fa:	9905      	ldr	r1, [sp, #20]
 800b9fc:	2a20      	cmp	r2, #32
 800b9fe:	d818      	bhi.n	800ba32 <__hexnan+0x7e>
 800ba00:	9b02      	ldr	r3, [sp, #8]
 800ba02:	459b      	cmp	fp, r3
 800ba04:	dd13      	ble.n	800ba2e <__hexnan+0x7a>
 800ba06:	454c      	cmp	r4, r9
 800ba08:	d206      	bcs.n	800ba18 <__hexnan+0x64>
 800ba0a:	2d07      	cmp	r5, #7
 800ba0c:	dc04      	bgt.n	800ba18 <__hexnan+0x64>
 800ba0e:	462a      	mov	r2, r5
 800ba10:	4649      	mov	r1, r9
 800ba12:	4620      	mov	r0, r4
 800ba14:	f7ff ffa8 	bl	800b968 <L_shift>
 800ba18:	4544      	cmp	r4, r8
 800ba1a:	d952      	bls.n	800bac2 <__hexnan+0x10e>
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	f1a4 0904 	sub.w	r9, r4, #4
 800ba22:	f844 3c04 	str.w	r3, [r4, #-4]
 800ba26:	461d      	mov	r5, r3
 800ba28:	464c      	mov	r4, r9
 800ba2a:	f8cd b008 	str.w	fp, [sp, #8]
 800ba2e:	9903      	ldr	r1, [sp, #12]
 800ba30:	e7d7      	b.n	800b9e2 <__hexnan+0x2e>
 800ba32:	2a29      	cmp	r2, #41	@ 0x29
 800ba34:	d157      	bne.n	800bae6 <__hexnan+0x132>
 800ba36:	3102      	adds	r1, #2
 800ba38:	f8ca 1000 	str.w	r1, [sl]
 800ba3c:	f1bb 0f00 	cmp.w	fp, #0
 800ba40:	d051      	beq.n	800bae6 <__hexnan+0x132>
 800ba42:	454c      	cmp	r4, r9
 800ba44:	d206      	bcs.n	800ba54 <__hexnan+0xa0>
 800ba46:	2d07      	cmp	r5, #7
 800ba48:	dc04      	bgt.n	800ba54 <__hexnan+0xa0>
 800ba4a:	462a      	mov	r2, r5
 800ba4c:	4649      	mov	r1, r9
 800ba4e:	4620      	mov	r0, r4
 800ba50:	f7ff ff8a 	bl	800b968 <L_shift>
 800ba54:	4544      	cmp	r4, r8
 800ba56:	d936      	bls.n	800bac6 <__hexnan+0x112>
 800ba58:	4623      	mov	r3, r4
 800ba5a:	f1a8 0204 	sub.w	r2, r8, #4
 800ba5e:	f853 1b04 	ldr.w	r1, [r3], #4
 800ba62:	429f      	cmp	r7, r3
 800ba64:	f842 1f04 	str.w	r1, [r2, #4]!
 800ba68:	d2f9      	bcs.n	800ba5e <__hexnan+0xaa>
 800ba6a:	1b3b      	subs	r3, r7, r4
 800ba6c:	f023 0303 	bic.w	r3, r3, #3
 800ba70:	3304      	adds	r3, #4
 800ba72:	3401      	adds	r4, #1
 800ba74:	3e03      	subs	r6, #3
 800ba76:	42b4      	cmp	r4, r6
 800ba78:	bf88      	it	hi
 800ba7a:	2304      	movhi	r3, #4
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	4443      	add	r3, r8
 800ba80:	f843 2b04 	str.w	r2, [r3], #4
 800ba84:	429f      	cmp	r7, r3
 800ba86:	d2fb      	bcs.n	800ba80 <__hexnan+0xcc>
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	b91b      	cbnz	r3, 800ba94 <__hexnan+0xe0>
 800ba8c:	4547      	cmp	r7, r8
 800ba8e:	d128      	bne.n	800bae2 <__hexnan+0x12e>
 800ba90:	2301      	movs	r3, #1
 800ba92:	603b      	str	r3, [r7, #0]
 800ba94:	2005      	movs	r0, #5
 800ba96:	b007      	add	sp, #28
 800ba98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba9c:	3501      	adds	r5, #1
 800ba9e:	2d08      	cmp	r5, #8
 800baa0:	f10b 0b01 	add.w	fp, fp, #1
 800baa4:	dd06      	ble.n	800bab4 <__hexnan+0x100>
 800baa6:	4544      	cmp	r4, r8
 800baa8:	d9c1      	bls.n	800ba2e <__hexnan+0x7a>
 800baaa:	2300      	movs	r3, #0
 800baac:	2501      	movs	r5, #1
 800baae:	f844 3c04 	str.w	r3, [r4, #-4]
 800bab2:	3c04      	subs	r4, #4
 800bab4:	6822      	ldr	r2, [r4, #0]
 800bab6:	f000 000f 	and.w	r0, r0, #15
 800baba:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800babe:	6020      	str	r0, [r4, #0]
 800bac0:	e7b5      	b.n	800ba2e <__hexnan+0x7a>
 800bac2:	2508      	movs	r5, #8
 800bac4:	e7b3      	b.n	800ba2e <__hexnan+0x7a>
 800bac6:	9b01      	ldr	r3, [sp, #4]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d0dd      	beq.n	800ba88 <__hexnan+0xd4>
 800bacc:	f04f 32ff 	mov.w	r2, #4294967295
 800bad0:	f1c3 0320 	rsb	r3, r3, #32
 800bad4:	40da      	lsrs	r2, r3
 800bad6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bada:	4013      	ands	r3, r2
 800badc:	f846 3c04 	str.w	r3, [r6, #-4]
 800bae0:	e7d2      	b.n	800ba88 <__hexnan+0xd4>
 800bae2:	3f04      	subs	r7, #4
 800bae4:	e7d0      	b.n	800ba88 <__hexnan+0xd4>
 800bae6:	2004      	movs	r0, #4
 800bae8:	e7d5      	b.n	800ba96 <__hexnan+0xe2>

0800baea <__ascii_mbtowc>:
 800baea:	b082      	sub	sp, #8
 800baec:	b901      	cbnz	r1, 800baf0 <__ascii_mbtowc+0x6>
 800baee:	a901      	add	r1, sp, #4
 800baf0:	b142      	cbz	r2, 800bb04 <__ascii_mbtowc+0x1a>
 800baf2:	b14b      	cbz	r3, 800bb08 <__ascii_mbtowc+0x1e>
 800baf4:	7813      	ldrb	r3, [r2, #0]
 800baf6:	600b      	str	r3, [r1, #0]
 800baf8:	7812      	ldrb	r2, [r2, #0]
 800bafa:	1e10      	subs	r0, r2, #0
 800bafc:	bf18      	it	ne
 800bafe:	2001      	movne	r0, #1
 800bb00:	b002      	add	sp, #8
 800bb02:	4770      	bx	lr
 800bb04:	4610      	mov	r0, r2
 800bb06:	e7fb      	b.n	800bb00 <__ascii_mbtowc+0x16>
 800bb08:	f06f 0001 	mvn.w	r0, #1
 800bb0c:	e7f8      	b.n	800bb00 <__ascii_mbtowc+0x16>

0800bb0e <_realloc_r>:
 800bb0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb12:	4607      	mov	r7, r0
 800bb14:	4614      	mov	r4, r2
 800bb16:	460d      	mov	r5, r1
 800bb18:	b921      	cbnz	r1, 800bb24 <_realloc_r+0x16>
 800bb1a:	4611      	mov	r1, r2
 800bb1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb20:	f7fd bcbc 	b.w	800949c <_malloc_r>
 800bb24:	b92a      	cbnz	r2, 800bb32 <_realloc_r+0x24>
 800bb26:	f7fd fc47 	bl	80093b8 <_free_r>
 800bb2a:	4625      	mov	r5, r4
 800bb2c:	4628      	mov	r0, r5
 800bb2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb32:	f000 f840 	bl	800bbb6 <_malloc_usable_size_r>
 800bb36:	4284      	cmp	r4, r0
 800bb38:	4606      	mov	r6, r0
 800bb3a:	d802      	bhi.n	800bb42 <_realloc_r+0x34>
 800bb3c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bb40:	d8f4      	bhi.n	800bb2c <_realloc_r+0x1e>
 800bb42:	4621      	mov	r1, r4
 800bb44:	4638      	mov	r0, r7
 800bb46:	f7fd fca9 	bl	800949c <_malloc_r>
 800bb4a:	4680      	mov	r8, r0
 800bb4c:	b908      	cbnz	r0, 800bb52 <_realloc_r+0x44>
 800bb4e:	4645      	mov	r5, r8
 800bb50:	e7ec      	b.n	800bb2c <_realloc_r+0x1e>
 800bb52:	42b4      	cmp	r4, r6
 800bb54:	4622      	mov	r2, r4
 800bb56:	4629      	mov	r1, r5
 800bb58:	bf28      	it	cs
 800bb5a:	4632      	movcs	r2, r6
 800bb5c:	f7ff fc46 	bl	800b3ec <memcpy>
 800bb60:	4629      	mov	r1, r5
 800bb62:	4638      	mov	r0, r7
 800bb64:	f7fd fc28 	bl	80093b8 <_free_r>
 800bb68:	e7f1      	b.n	800bb4e <_realloc_r+0x40>

0800bb6a <__ascii_wctomb>:
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	4608      	mov	r0, r1
 800bb6e:	b141      	cbz	r1, 800bb82 <__ascii_wctomb+0x18>
 800bb70:	2aff      	cmp	r2, #255	@ 0xff
 800bb72:	d904      	bls.n	800bb7e <__ascii_wctomb+0x14>
 800bb74:	228a      	movs	r2, #138	@ 0x8a
 800bb76:	f04f 30ff 	mov.w	r0, #4294967295
 800bb7a:	601a      	str	r2, [r3, #0]
 800bb7c:	4770      	bx	lr
 800bb7e:	2001      	movs	r0, #1
 800bb80:	700a      	strb	r2, [r1, #0]
 800bb82:	4770      	bx	lr

0800bb84 <fiprintf>:
 800bb84:	b40e      	push	{r1, r2, r3}
 800bb86:	b503      	push	{r0, r1, lr}
 800bb88:	4601      	mov	r1, r0
 800bb8a:	ab03      	add	r3, sp, #12
 800bb8c:	4805      	ldr	r0, [pc, #20]	@ (800bba4 <fiprintf+0x20>)
 800bb8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb92:	6800      	ldr	r0, [r0, #0]
 800bb94:	9301      	str	r3, [sp, #4]
 800bb96:	f7ff f9a9 	bl	800aeec <_vfiprintf_r>
 800bb9a:	b002      	add	sp, #8
 800bb9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bba0:	b003      	add	sp, #12
 800bba2:	4770      	bx	lr
 800bba4:	20000034 	.word	0x20000034

0800bba8 <abort>:
 800bba8:	2006      	movs	r0, #6
 800bbaa:	b508      	push	{r3, lr}
 800bbac:	f000 f834 	bl	800bc18 <raise>
 800bbb0:	2001      	movs	r0, #1
 800bbb2:	f7f6 fd4a 	bl	800264a <_exit>

0800bbb6 <_malloc_usable_size_r>:
 800bbb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbba:	1f18      	subs	r0, r3, #4
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	bfbc      	itt	lt
 800bbc0:	580b      	ldrlt	r3, [r1, r0]
 800bbc2:	18c0      	addlt	r0, r0, r3
 800bbc4:	4770      	bx	lr

0800bbc6 <_raise_r>:
 800bbc6:	291f      	cmp	r1, #31
 800bbc8:	b538      	push	{r3, r4, r5, lr}
 800bbca:	4605      	mov	r5, r0
 800bbcc:	460c      	mov	r4, r1
 800bbce:	d904      	bls.n	800bbda <_raise_r+0x14>
 800bbd0:	2316      	movs	r3, #22
 800bbd2:	6003      	str	r3, [r0, #0]
 800bbd4:	f04f 30ff 	mov.w	r0, #4294967295
 800bbd8:	bd38      	pop	{r3, r4, r5, pc}
 800bbda:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bbdc:	b112      	cbz	r2, 800bbe4 <_raise_r+0x1e>
 800bbde:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bbe2:	b94b      	cbnz	r3, 800bbf8 <_raise_r+0x32>
 800bbe4:	4628      	mov	r0, r5
 800bbe6:	f000 f831 	bl	800bc4c <_getpid_r>
 800bbea:	4622      	mov	r2, r4
 800bbec:	4601      	mov	r1, r0
 800bbee:	4628      	mov	r0, r5
 800bbf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbf4:	f000 b818 	b.w	800bc28 <_kill_r>
 800bbf8:	2b01      	cmp	r3, #1
 800bbfa:	d00a      	beq.n	800bc12 <_raise_r+0x4c>
 800bbfc:	1c59      	adds	r1, r3, #1
 800bbfe:	d103      	bne.n	800bc08 <_raise_r+0x42>
 800bc00:	2316      	movs	r3, #22
 800bc02:	6003      	str	r3, [r0, #0]
 800bc04:	2001      	movs	r0, #1
 800bc06:	e7e7      	b.n	800bbd8 <_raise_r+0x12>
 800bc08:	2100      	movs	r1, #0
 800bc0a:	4620      	mov	r0, r4
 800bc0c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bc10:	4798      	blx	r3
 800bc12:	2000      	movs	r0, #0
 800bc14:	e7e0      	b.n	800bbd8 <_raise_r+0x12>
	...

0800bc18 <raise>:
 800bc18:	4b02      	ldr	r3, [pc, #8]	@ (800bc24 <raise+0xc>)
 800bc1a:	4601      	mov	r1, r0
 800bc1c:	6818      	ldr	r0, [r3, #0]
 800bc1e:	f7ff bfd2 	b.w	800bbc6 <_raise_r>
 800bc22:	bf00      	nop
 800bc24:	20000034 	.word	0x20000034

0800bc28 <_kill_r>:
 800bc28:	b538      	push	{r3, r4, r5, lr}
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	4d06      	ldr	r5, [pc, #24]	@ (800bc48 <_kill_r+0x20>)
 800bc2e:	4604      	mov	r4, r0
 800bc30:	4608      	mov	r0, r1
 800bc32:	4611      	mov	r1, r2
 800bc34:	602b      	str	r3, [r5, #0]
 800bc36:	f7f6 fcf8 	bl	800262a <_kill>
 800bc3a:	1c43      	adds	r3, r0, #1
 800bc3c:	d102      	bne.n	800bc44 <_kill_r+0x1c>
 800bc3e:	682b      	ldr	r3, [r5, #0]
 800bc40:	b103      	cbz	r3, 800bc44 <_kill_r+0x1c>
 800bc42:	6023      	str	r3, [r4, #0]
 800bc44:	bd38      	pop	{r3, r4, r5, pc}
 800bc46:	bf00      	nop
 800bc48:	20001178 	.word	0x20001178

0800bc4c <_getpid_r>:
 800bc4c:	f7f6 bce6 	b.w	800261c <_getpid>

0800bc50 <expf>:
 800bc50:	b538      	push	{r3, r4, r5, lr}
 800bc52:	4605      	mov	r5, r0
 800bc54:	f000 f85a 	bl	800bd0c <__ieee754_expf>
 800bc58:	4604      	mov	r4, r0
 800bc5a:	4628      	mov	r0, r5
 800bc5c:	f000 f81e 	bl	800bc9c <finitef>
 800bc60:	b150      	cbz	r0, 800bc78 <expf+0x28>
 800bc62:	4628      	mov	r0, r5
 800bc64:	490b      	ldr	r1, [pc, #44]	@ (800bc94 <expf+0x44>)
 800bc66:	f7f5 fa6b 	bl	8001140 <__aeabi_fcmpgt>
 800bc6a:	b138      	cbz	r0, 800bc7c <expf+0x2c>
 800bc6c:	f7fc fd08 	bl	8008680 <__errno>
 800bc70:	2322      	movs	r3, #34	@ 0x22
 800bc72:	f04f 44ff 	mov.w	r4, #2139095040	@ 0x7f800000
 800bc76:	6003      	str	r3, [r0, #0]
 800bc78:	4620      	mov	r0, r4
 800bc7a:	bd38      	pop	{r3, r4, r5, pc}
 800bc7c:	4628      	mov	r0, r5
 800bc7e:	4906      	ldr	r1, [pc, #24]	@ (800bc98 <expf+0x48>)
 800bc80:	f7f5 fa40 	bl	8001104 <__aeabi_fcmplt>
 800bc84:	2800      	cmp	r0, #0
 800bc86:	d0f7      	beq.n	800bc78 <expf+0x28>
 800bc88:	f7fc fcfa 	bl	8008680 <__errno>
 800bc8c:	2322      	movs	r3, #34	@ 0x22
 800bc8e:	2400      	movs	r4, #0
 800bc90:	6003      	str	r3, [r0, #0]
 800bc92:	e7f1      	b.n	800bc78 <expf+0x28>
 800bc94:	42b17217 	.word	0x42b17217
 800bc98:	c2cff1b5 	.word	0xc2cff1b5

0800bc9c <finitef>:
 800bc9c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800bca0:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800bca4:	bfac      	ite	ge
 800bca6:	2000      	movge	r0, #0
 800bca8:	2001      	movlt	r0, #1
 800bcaa:	4770      	bx	lr

0800bcac <fminf>:
 800bcac:	b538      	push	{r3, r4, r5, lr}
 800bcae:	4604      	mov	r4, r0
 800bcb0:	460d      	mov	r5, r1
 800bcb2:	f000 f811 	bl	800bcd8 <__fpclassifyf>
 800bcb6:	b910      	cbnz	r0, 800bcbe <fminf+0x12>
 800bcb8:	462c      	mov	r4, r5
 800bcba:	4620      	mov	r0, r4
 800bcbc:	bd38      	pop	{r3, r4, r5, pc}
 800bcbe:	4628      	mov	r0, r5
 800bcc0:	f000 f80a 	bl	800bcd8 <__fpclassifyf>
 800bcc4:	2800      	cmp	r0, #0
 800bcc6:	d0f8      	beq.n	800bcba <fminf+0xe>
 800bcc8:	4629      	mov	r1, r5
 800bcca:	4620      	mov	r0, r4
 800bccc:	f7f5 fa1a 	bl	8001104 <__aeabi_fcmplt>
 800bcd0:	2800      	cmp	r0, #0
 800bcd2:	d0f1      	beq.n	800bcb8 <fminf+0xc>
 800bcd4:	e7f1      	b.n	800bcba <fminf+0xe>
	...

0800bcd8 <__fpclassifyf>:
 800bcd8:	f030 4000 	bics.w	r0, r0, #2147483648	@ 0x80000000
 800bcdc:	d00d      	beq.n	800bcfa <__fpclassifyf+0x22>
 800bcde:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800bce2:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800bce6:	d30a      	bcc.n	800bcfe <__fpclassifyf+0x26>
 800bce8:	4b07      	ldr	r3, [pc, #28]	@ (800bd08 <__fpclassifyf+0x30>)
 800bcea:	1e42      	subs	r2, r0, #1
 800bcec:	429a      	cmp	r2, r3
 800bcee:	d908      	bls.n	800bd02 <__fpclassifyf+0x2a>
 800bcf0:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800bcf4:	4258      	negs	r0, r3
 800bcf6:	4158      	adcs	r0, r3
 800bcf8:	4770      	bx	lr
 800bcfa:	2002      	movs	r0, #2
 800bcfc:	4770      	bx	lr
 800bcfe:	2004      	movs	r0, #4
 800bd00:	4770      	bx	lr
 800bd02:	2003      	movs	r0, #3
 800bd04:	4770      	bx	lr
 800bd06:	bf00      	nop
 800bd08:	007ffffe 	.word	0x007ffffe

0800bd0c <__ieee754_expf>:
 800bd0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd10:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800bd14:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800bd18:	4604      	mov	r4, r0
 800bd1a:	d904      	bls.n	800bd26 <__ieee754_expf+0x1a>
 800bd1c:	4601      	mov	r1, r0
 800bd1e:	f7f4 ff4b 	bl	8000bb8 <__addsf3>
 800bd22:	4604      	mov	r4, r0
 800bd24:	e005      	b.n	800bd32 <__ieee754_expf+0x26>
 800bd26:	ea4f 76d0 	mov.w	r6, r0, lsr #31
 800bd2a:	d105      	bne.n	800bd38 <__ieee754_expf+0x2c>
 800bd2c:	2e00      	cmp	r6, #0
 800bd2e:	f040 80c3 	bne.w	800beb8 <__ieee754_expf+0x1ac>
 800bd32:	4620      	mov	r0, r4
 800bd34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd38:	4960      	ldr	r1, [pc, #384]	@ (800bebc <__ieee754_expf+0x1b0>)
 800bd3a:	4288      	cmp	r0, r1
 800bd3c:	dd04      	ble.n	800bd48 <__ieee754_expf+0x3c>
 800bd3e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd42:	2000      	movs	r0, #0
 800bd44:	f000 b8f3 	b.w	800bf2e <__math_oflowf>
 800bd48:	2800      	cmp	r0, #0
 800bd4a:	da07      	bge.n	800bd5c <__ieee754_expf+0x50>
 800bd4c:	4a5c      	ldr	r2, [pc, #368]	@ (800bec0 <__ieee754_expf+0x1b4>)
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	d904      	bls.n	800bd5c <__ieee754_expf+0x50>
 800bd52:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd56:	2000      	movs	r0, #0
 800bd58:	f000 b8e5 	b.w	800bf26 <__math_uflowf>
 800bd5c:	4a59      	ldr	r2, [pc, #356]	@ (800bec4 <__ieee754_expf+0x1b8>)
 800bd5e:	4293      	cmp	r3, r2
 800bd60:	d971      	bls.n	800be46 <__ieee754_expf+0x13a>
 800bd62:	4a59      	ldr	r2, [pc, #356]	@ (800bec8 <__ieee754_expf+0x1bc>)
 800bd64:	4293      	cmp	r3, r2
 800bd66:	d851      	bhi.n	800be0c <__ieee754_expf+0x100>
 800bd68:	4b58      	ldr	r3, [pc, #352]	@ (800becc <__ieee754_expf+0x1c0>)
 800bd6a:	4620      	mov	r0, r4
 800bd6c:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800bd70:	f7f4 ff20 	bl	8000bb4 <__aeabi_fsub>
 800bd74:	4605      	mov	r5, r0
 800bd76:	4b56      	ldr	r3, [pc, #344]	@ (800bed0 <__ieee754_expf+0x1c4>)
 800bd78:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 800bd7c:	f086 0301 	eor.w	r3, r6, #1
 800bd80:	eba3 0806 	sub.w	r8, r3, r6
 800bd84:	4639      	mov	r1, r7
 800bd86:	4628      	mov	r0, r5
 800bd88:	f7f4 ff14 	bl	8000bb4 <__aeabi_fsub>
 800bd8c:	4604      	mov	r4, r0
 800bd8e:	4621      	mov	r1, r4
 800bd90:	4620      	mov	r0, r4
 800bd92:	f7f5 f819 	bl	8000dc8 <__aeabi_fmul>
 800bd96:	4606      	mov	r6, r0
 800bd98:	494e      	ldr	r1, [pc, #312]	@ (800bed4 <__ieee754_expf+0x1c8>)
 800bd9a:	f7f5 f815 	bl	8000dc8 <__aeabi_fmul>
 800bd9e:	494e      	ldr	r1, [pc, #312]	@ (800bed8 <__ieee754_expf+0x1cc>)
 800bda0:	f7f4 ff08 	bl	8000bb4 <__aeabi_fsub>
 800bda4:	4631      	mov	r1, r6
 800bda6:	f7f5 f80f 	bl	8000dc8 <__aeabi_fmul>
 800bdaa:	494c      	ldr	r1, [pc, #304]	@ (800bedc <__ieee754_expf+0x1d0>)
 800bdac:	f7f4 ff04 	bl	8000bb8 <__addsf3>
 800bdb0:	4631      	mov	r1, r6
 800bdb2:	f7f5 f809 	bl	8000dc8 <__aeabi_fmul>
 800bdb6:	494a      	ldr	r1, [pc, #296]	@ (800bee0 <__ieee754_expf+0x1d4>)
 800bdb8:	f7f4 fefc 	bl	8000bb4 <__aeabi_fsub>
 800bdbc:	4631      	mov	r1, r6
 800bdbe:	f7f5 f803 	bl	8000dc8 <__aeabi_fmul>
 800bdc2:	4948      	ldr	r1, [pc, #288]	@ (800bee4 <__ieee754_expf+0x1d8>)
 800bdc4:	f7f4 fef8 	bl	8000bb8 <__addsf3>
 800bdc8:	4631      	mov	r1, r6
 800bdca:	f7f4 fffd 	bl	8000dc8 <__aeabi_fmul>
 800bdce:	4601      	mov	r1, r0
 800bdd0:	4620      	mov	r0, r4
 800bdd2:	f7f4 feef 	bl	8000bb4 <__aeabi_fsub>
 800bdd6:	4601      	mov	r1, r0
 800bdd8:	4606      	mov	r6, r0
 800bdda:	4620      	mov	r0, r4
 800bddc:	f7f4 fff4 	bl	8000dc8 <__aeabi_fmul>
 800bde0:	4681      	mov	r9, r0
 800bde2:	f1b8 0f00 	cmp.w	r8, #0
 800bde6:	d143      	bne.n	800be70 <__ieee754_expf+0x164>
 800bde8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800bdec:	4630      	mov	r0, r6
 800bdee:	f7f4 fee1 	bl	8000bb4 <__aeabi_fsub>
 800bdf2:	4601      	mov	r1, r0
 800bdf4:	4648      	mov	r0, r9
 800bdf6:	f7f5 f89b 	bl	8000f30 <__aeabi_fdiv>
 800bdfa:	4621      	mov	r1, r4
 800bdfc:	f7f4 feda 	bl	8000bb4 <__aeabi_fsub>
 800be00:	4601      	mov	r1, r0
 800be02:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800be06:	f7f4 fed5 	bl	8000bb4 <__aeabi_fsub>
 800be0a:	e78a      	b.n	800bd22 <__ieee754_expf+0x16>
 800be0c:	4936      	ldr	r1, [pc, #216]	@ (800bee8 <__ieee754_expf+0x1dc>)
 800be0e:	4620      	mov	r0, r4
 800be10:	f7f4 ffda 	bl	8000dc8 <__aeabi_fmul>
 800be14:	4b35      	ldr	r3, [pc, #212]	@ (800beec <__ieee754_expf+0x1e0>)
 800be16:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800be1a:	f7f4 fecd 	bl	8000bb8 <__addsf3>
 800be1e:	f7f5 f999 	bl	8001154 <__aeabi_f2iz>
 800be22:	4680      	mov	r8, r0
 800be24:	f7f4 ff7c 	bl	8000d20 <__aeabi_i2f>
 800be28:	4931      	ldr	r1, [pc, #196]	@ (800bef0 <__ieee754_expf+0x1e4>)
 800be2a:	4606      	mov	r6, r0
 800be2c:	f7f4 ffcc 	bl	8000dc8 <__aeabi_fmul>
 800be30:	4601      	mov	r1, r0
 800be32:	4620      	mov	r0, r4
 800be34:	f7f4 febe 	bl	8000bb4 <__aeabi_fsub>
 800be38:	492e      	ldr	r1, [pc, #184]	@ (800bef4 <__ieee754_expf+0x1e8>)
 800be3a:	4605      	mov	r5, r0
 800be3c:	4630      	mov	r0, r6
 800be3e:	f7f4 ffc3 	bl	8000dc8 <__aeabi_fmul>
 800be42:	4607      	mov	r7, r0
 800be44:	e79e      	b.n	800bd84 <__ieee754_expf+0x78>
 800be46:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 800be4a:	d20c      	bcs.n	800be66 <__ieee754_expf+0x15a>
 800be4c:	492a      	ldr	r1, [pc, #168]	@ (800bef8 <__ieee754_expf+0x1ec>)
 800be4e:	4620      	mov	r0, r4
 800be50:	f7f4 feb2 	bl	8000bb8 <__addsf3>
 800be54:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800be58:	f7f5 f972 	bl	8001140 <__aeabi_fcmpgt>
 800be5c:	b130      	cbz	r0, 800be6c <__ieee754_expf+0x160>
 800be5e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800be62:	4620      	mov	r0, r4
 800be64:	e75b      	b.n	800bd1e <__ieee754_expf+0x12>
 800be66:	f04f 0800 	mov.w	r8, #0
 800be6a:	e790      	b.n	800bd8e <__ieee754_expf+0x82>
 800be6c:	4680      	mov	r8, r0
 800be6e:	e78e      	b.n	800bd8e <__ieee754_expf+0x82>
 800be70:	4631      	mov	r1, r6
 800be72:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800be76:	f7f4 fe9d 	bl	8000bb4 <__aeabi_fsub>
 800be7a:	4601      	mov	r1, r0
 800be7c:	4648      	mov	r0, r9
 800be7e:	f7f5 f857 	bl	8000f30 <__aeabi_fdiv>
 800be82:	4601      	mov	r1, r0
 800be84:	4638      	mov	r0, r7
 800be86:	f7f4 fe95 	bl	8000bb4 <__aeabi_fsub>
 800be8a:	4629      	mov	r1, r5
 800be8c:	f7f4 fe92 	bl	8000bb4 <__aeabi_fsub>
 800be90:	4601      	mov	r1, r0
 800be92:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800be96:	f7f4 fe8d 	bl	8000bb4 <__aeabi_fsub>
 800be9a:	f118 0f7d 	cmn.w	r8, #125	@ 0x7d
 800be9e:	db02      	blt.n	800bea6 <__ieee754_expf+0x19a>
 800bea0:	eb00 54c8 	add.w	r4, r0, r8, lsl #23
 800bea4:	e745      	b.n	800bd32 <__ieee754_expf+0x26>
 800bea6:	f108 0864 	add.w	r8, r8, #100	@ 0x64
 800beaa:	f04f 6158 	mov.w	r1, #226492416	@ 0xd800000
 800beae:	eb00 50c8 	add.w	r0, r0, r8, lsl #23
 800beb2:	f7f4 ff89 	bl	8000dc8 <__aeabi_fmul>
 800beb6:	e734      	b.n	800bd22 <__ieee754_expf+0x16>
 800beb8:	2400      	movs	r4, #0
 800beba:	e73a      	b.n	800bd32 <__ieee754_expf+0x26>
 800bebc:	42b17217 	.word	0x42b17217
 800bec0:	42cff1b5 	.word	0x42cff1b5
 800bec4:	3eb17218 	.word	0x3eb17218
 800bec8:	3f851591 	.word	0x3f851591
 800becc:	08017b2c 	.word	0x08017b2c
 800bed0:	08017b24 	.word	0x08017b24
 800bed4:	3331bb4c 	.word	0x3331bb4c
 800bed8:	35ddea0e 	.word	0x35ddea0e
 800bedc:	388ab355 	.word	0x388ab355
 800bee0:	3b360b61 	.word	0x3b360b61
 800bee4:	3e2aaaab 	.word	0x3e2aaaab
 800bee8:	3fb8aa3b 	.word	0x3fb8aa3b
 800beec:	08017b34 	.word	0x08017b34
 800bef0:	3f317180 	.word	0x3f317180
 800bef4:	3717f7d1 	.word	0x3717f7d1
 800bef8:	7149f2ca 	.word	0x7149f2ca

0800befc <with_errnof>:
 800befc:	b538      	push	{r3, r4, r5, lr}
 800befe:	4604      	mov	r4, r0
 800bf00:	460d      	mov	r5, r1
 800bf02:	f7fc fbbd 	bl	8008680 <__errno>
 800bf06:	6005      	str	r5, [r0, #0]
 800bf08:	4620      	mov	r0, r4
 800bf0a:	bd38      	pop	{r3, r4, r5, pc}

0800bf0c <xflowf>:
 800bf0c:	b508      	push	{r3, lr}
 800bf0e:	b140      	cbz	r0, 800bf22 <xflowf+0x16>
 800bf10:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 800bf14:	f7f4 ff58 	bl	8000dc8 <__aeabi_fmul>
 800bf18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800bf1c:	2122      	movs	r1, #34	@ 0x22
 800bf1e:	f7ff bfed 	b.w	800befc <with_errnof>
 800bf22:	4608      	mov	r0, r1
 800bf24:	e7f6      	b.n	800bf14 <xflowf+0x8>

0800bf26 <__math_uflowf>:
 800bf26:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 800bf2a:	f7ff bfef 	b.w	800bf0c <xflowf>

0800bf2e <__math_oflowf>:
 800bf2e:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 800bf32:	f7ff bfeb 	b.w	800bf0c <xflowf>
	...

0800bf38 <_init>:
 800bf38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf3a:	bf00      	nop
 800bf3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf3e:	bc08      	pop	{r3}
 800bf40:	469e      	mov	lr, r3
 800bf42:	4770      	bx	lr

0800bf44 <_fini>:
 800bf44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf46:	bf00      	nop
 800bf48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf4a:	bc08      	pop	{r3}
 800bf4c:	469e      	mov	lr, r3
 800bf4e:	4770      	bx	lr
